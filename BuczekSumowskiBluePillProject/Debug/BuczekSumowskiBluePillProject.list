
BuczekSumowskiBluePillProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008410  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008544  08008544  000202f0  2**0
                  CONTENTS
  4 .ARM          00000000  08008544  08008544  000202f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008544  08008544  000202f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008548  08008548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  0800854c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  200002f0  0800883c  000202f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae8  0800883c  00020ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dbf  00000000  00000000  00020319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002197  00000000  00000000  000340d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00036270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  000373d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eee  00000000  00000000  00038470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128aa  00000000  00000000  0005135e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091039  00000000  00000000  00063c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4c41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b14  00000000  00000000  000f4c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002f0 	.word	0x200002f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008504 	.word	0x08008504

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002f4 	.word	0x200002f4
 8000148:	08008504 	.word	0x08008504

0800014c <readLaserSensor>:
enum ActionState action_state;

uint16_t laser_values[4];
bool ir_values[3];

uint16_t readLaserSensor(enum LaserSensorPosition laser_pos) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	//VL53L0X_RangingMeasurementData_t RangingData;
	VL53L0X_PerformSingleRangingMeasurement(laser_devs[laser_pos], &RangingData);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	4a06      	ldr	r2, [pc, #24]	; (8000174 <readLaserSensor+0x28>)
 800015a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015e:	4906      	ldr	r1, [pc, #24]	; (8000178 <readLaserSensor+0x2c>)
 8000160:	4618      	mov	r0, r3
 8000162:	f004 fca3 	bl	8004aac <VL53L0X_PerformSingleRangingMeasurement>

	//while (RangingData.RangeStatus != 0)
	//	VL53L0X_PerformSingleRangingMeasurement(laser_devs[laser_pos], &RangingData);

	return RangingData.RangeMilliMeter;
 8000166:	4b04      	ldr	r3, [pc, #16]	; (8000178 <readLaserSensor+0x2c>)
 8000168:	891b      	ldrh	r3, [r3, #8]
}
 800016a:	4618      	mov	r0, r3
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	20000018 	.word	0x20000018
 8000178:	200003a8 	.word	0x200003a8

0800017c <readFromAllLasers>:
void readFromAllLasers() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	laser_values[RIGHT_SIDE] = readLaserSensor(RIGHT_SIDE);
 8000180:	2000      	movs	r0, #0
 8000182:	f7ff ffe3 	bl	800014c <readLaserSensor>
 8000186:	4603      	mov	r3, r0
 8000188:	461a      	mov	r2, r3
 800018a:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <readFromAllLasers+0x40>)
 800018c:	801a      	strh	r2, [r3, #0]
	laser_values[RIGHT_FRONT] = readLaserSensor(RIGHT_FRONT);
 800018e:	2001      	movs	r0, #1
 8000190:	f7ff ffdc 	bl	800014c <readLaserSensor>
 8000194:	4603      	mov	r3, r0
 8000196:	461a      	mov	r2, r3
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <readFromAllLasers+0x40>)
 800019a:	805a      	strh	r2, [r3, #2]
	laser_values[LEFT_SIDE] = readLaserSensor(LEFT_SIDE);
 800019c:	2002      	movs	r0, #2
 800019e:	f7ff ffd5 	bl	800014c <readLaserSensor>
 80001a2:	4603      	mov	r3, r0
 80001a4:	461a      	mov	r2, r3
 80001a6:	4b05      	ldr	r3, [pc, #20]	; (80001bc <readFromAllLasers+0x40>)
 80001a8:	809a      	strh	r2, [r3, #4]
	laser_values[LEFT_FRONT] = readLaserSensor(LEFT_FRONT);
 80001aa:	2003      	movs	r0, #3
 80001ac:	f7ff ffce 	bl	800014c <readLaserSensor>
 80001b0:	4603      	mov	r3, r0
 80001b2:	461a      	mov	r2, r3
 80001b4:	4b01      	ldr	r3, [pc, #4]	; (80001bc <readFromAllLasers+0x40>)
 80001b6:	80da      	strh	r2, [r3, #6]
}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	20000a94 	.word	0x20000a94

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c4:	f000 fbd8 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c8:	f000 f816 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001cc:	f000 f92a 	bl	8000424 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d0:	f000 f84e 	bl	8000270 <MX_I2C1_Init>
  MX_TIM1_Init();
 80001d4:	f000 f87a 	bl	80002cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  	initLasers();
 80001d8:	f000 f9b8 	bl	800054c <initLasers>


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80001dc:	2104      	movs	r1, #4
 80001de:	4805      	ldr	r0, [pc, #20]	; (80001f4 <main+0x34>)
 80001e0:	f002 fb4c 	bl	800287c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80001e4:	2108      	movs	r1, #8
 80001e6:	4803      	ldr	r0, [pc, #12]	; (80001f4 <main+0x34>)
 80001e8:	f002 fb48 	bl	800287c <HAL_TIM_PWM_Start>
		//while (RangingData.RangeStatus != 0)
		//	VL53L0X_PerformSingleRangingMeasurement(laser_devs[LEFT_SIDE], &RangingData);

		//value2 = RangingData.RangeMilliMeter;
	  //value = readLaserSensor(LEFT_FRONT);
	  readFromAllLasers();
 80001ec:	f7ff ffc6 	bl	800017c <readFromAllLasers>
 80001f0:	e7fc      	b.n	80001ec <main+0x2c>
 80001f2:	bf00      	nop
 80001f4:	20000360 	.word	0x20000360

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	; 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f008 f96c 	bl	80084e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000222:	2310      	movs	r3, #16
 8000224:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000226:	2300      	movs	r3, #0
 8000228:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fe76 	bl	8001f20 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800023a:	f000 fa7f 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 f8e4 	bl	8002424 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000262:	f000 fa6b 	bl	800073c <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3740      	adds	r7, #64	; 0x40
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000276:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <MX_I2C1_Init+0x54>)
 8000278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800027a:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <MX_I2C1_Init+0x50>)
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <MX_I2C1_Init+0x58>)
 800027e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_I2C1_Init+0x50>)
 800028e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_I2C1_Init+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <MX_I2C1_Init+0x50>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <MX_I2C1_Init+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <MX_I2C1_Init+0x50>)
 80002ae:	f000 fe69 	bl	8000f84 <HAL_I2C_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b8:	f000 fa40 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	2000030c 	.word	0x2000030c
 80002c4:	40005400 	.word	0x40005400
 80002c8:	000186a0 	.word	0x000186a0

080002cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b096      	sub	sp, #88	; 0x58
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]
 80002fa:	615a      	str	r2, [r3, #20]
 80002fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2220      	movs	r2, #32
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f008 f8ed 	bl	80084e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800030a:	4b44      	ldr	r3, [pc, #272]	; (800041c <MX_TIM1_Init+0x150>)
 800030c:	4a44      	ldr	r2, [pc, #272]	; (8000420 <MX_TIM1_Init+0x154>)
 800030e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000310:	4b42      	ldr	r3, [pc, #264]	; (800041c <MX_TIM1_Init+0x150>)
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000316:	4b41      	ldr	r3, [pc, #260]	; (800041c <MX_TIM1_Init+0x150>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800031c:	4b3f      	ldr	r3, [pc, #252]	; (800041c <MX_TIM1_Init+0x150>)
 800031e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000322:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000324:	4b3d      	ldr	r3, [pc, #244]	; (800041c <MX_TIM1_Init+0x150>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800032a:	4b3c      	ldr	r3, [pc, #240]	; (800041c <MX_TIM1_Init+0x150>)
 800032c:	2200      	movs	r2, #0
 800032e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000330:	4b3a      	ldr	r3, [pc, #232]	; (800041c <MX_TIM1_Init+0x150>)
 8000332:	2280      	movs	r2, #128	; 0x80
 8000334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000336:	4839      	ldr	r0, [pc, #228]	; (800041c <MX_TIM1_Init+0x150>)
 8000338:	f002 f9f8 	bl	800272c <HAL_TIM_Base_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000342:	f000 f9fb 	bl	800073c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800034a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800034c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000350:	4619      	mov	r1, r3
 8000352:	4832      	ldr	r0, [pc, #200]	; (800041c <MX_TIM1_Init+0x150>)
 8000354:	f002 fbf2 	bl	8002b3c <HAL_TIM_ConfigClockSource>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800035e:	f000 f9ed 	bl	800073c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000362:	482e      	ldr	r0, [pc, #184]	; (800041c <MX_TIM1_Init+0x150>)
 8000364:	f002 fa31 	bl	80027ca <HAL_TIM_PWM_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800036e:	f000 f9e5 	bl	800073c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000372:	2300      	movs	r3, #0
 8000374:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800037a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800037e:	4619      	mov	r1, r3
 8000380:	4826      	ldr	r0, [pc, #152]	; (800041c <MX_TIM1_Init+0x150>)
 8000382:	f002 ff43 	bl	800320c <HAL_TIMEx_MasterConfigSynchronization>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800038c:	f000 f9d6 	bl	800073c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000390:	2360      	movs	r3, #96	; 0x60
 8000392:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000398:	2300      	movs	r3, #0
 800039a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800039c:	2300      	movs	r3, #0
 800039e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003a4:	2300      	movs	r3, #0
 80003a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003a8:	2300      	movs	r3, #0
 80003aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b0:	2204      	movs	r2, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4819      	ldr	r0, [pc, #100]	; (800041c <MX_TIM1_Init+0x150>)
 80003b6:	f002 fb03 	bl	80029c0 <HAL_TIM_PWM_ConfigChannel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80003c0:	f000 f9bc 	bl	800073c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c8:	2208      	movs	r2, #8
 80003ca:	4619      	mov	r1, r3
 80003cc:	4813      	ldr	r0, [pc, #76]	; (800041c <MX_TIM1_Init+0x150>)
 80003ce:	f002 faf7 	bl	80029c0 <HAL_TIM_PWM_ConfigChannel>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80003d8:	f000 f9b0 	bl	800073c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4807      	ldr	r0, [pc, #28]	; (800041c <MX_TIM1_Init+0x150>)
 8000400:	f002 ff62 	bl	80032c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800040a:	f000 f997 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800040e:	4803      	ldr	r0, [pc, #12]	; (800041c <MX_TIM1_Init+0x150>)
 8000410:	f000 fa2a 	bl	8000868 <HAL_TIM_MspPostInit>

}
 8000414:	bf00      	nop
 8000416:	3758      	adds	r7, #88	; 0x58
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000360 	.word	0x20000360
 8000420:	40012c00 	.word	0x40012c00

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000438:	4b40      	ldr	r3, [pc, #256]	; (800053c <MX_GPIO_Init+0x118>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a3f      	ldr	r2, [pc, #252]	; (800053c <MX_GPIO_Init+0x118>)
 800043e:	f043 0310 	orr.w	r3, r3, #16
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b3d      	ldr	r3, [pc, #244]	; (800053c <MX_GPIO_Init+0x118>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0310 	and.w	r3, r3, #16
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b3a      	ldr	r3, [pc, #232]	; (800053c <MX_GPIO_Init+0x118>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a39      	ldr	r2, [pc, #228]	; (800053c <MX_GPIO_Init+0x118>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b37      	ldr	r3, [pc, #220]	; (800053c <MX_GPIO_Init+0x118>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b34      	ldr	r3, [pc, #208]	; (800053c <MX_GPIO_Init+0x118>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a33      	ldr	r2, [pc, #204]	; (800053c <MX_GPIO_Init+0x118>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b31      	ldr	r3, [pc, #196]	; (800053c <MX_GPIO_Init+0x118>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000486:	482e      	ldr	r0, [pc, #184]	; (8000540 <MX_GPIO_Init+0x11c>)
 8000488:	f000 fd64 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000492:	482c      	ldr	r0, [pc, #176]	; (8000544 <MX_GPIO_Init+0x120>)
 8000494:	f000 fd5e 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000498:	2200      	movs	r2, #0
 800049a:	f24e 0190 	movw	r1, #57488	; 0xe090
 800049e:	482a      	ldr	r0, [pc, #168]	; (8000548 <MX_GPIO_Init+0x124>)
 80004a0:	f000 fd58 	bl	8000f54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	4820      	ldr	r0, [pc, #128]	; (8000540 <MX_GPIO_Init+0x11c>)
 80004be:	f000 fbc5 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80004c2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80004c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	481a      	ldr	r0, [pc, #104]	; (8000544 <MX_GPIO_Init+0x120>)
 80004dc:	f000 fbb6 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3;
 80004e0:	f641 4308 	movw	r3, #7176	; 0x1c08
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	4814      	ldr	r0, [pc, #80]	; (8000548 <MX_GPIO_Init+0x124>)
 80004f6:	f000 fba9 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80004fa:	f24e 0390 	movw	r3, #57488	; 0xe090
 80004fe:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2302      	movs	r3, #2
 800050a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	480d      	ldr	r0, [pc, #52]	; (8000548 <MX_GPIO_Init+0x124>)
 8000514:	f000 fb9a 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8000518:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800051c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	4619      	mov	r1, r3
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_GPIO_Init+0x120>)
 800052e:	f000 fb8d 	bl	8000c4c <HAL_GPIO_Init>

}
 8000532:	bf00      	nop
 8000534:	3720      	adds	r7, #32
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000
 8000540:	40011000 	.word	0x40011000
 8000544:	40010800 	.word	0x40010800
 8000548:	40010c00 	.word	0x40010c00

0800054c <initLasers>:
uint32_t refSpadCount;
uint8_t isApertureSpads;
uint8_t VhvSettings;
uint8_t PhaseCal;

void initLasers() {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(xshut_ports[RIGHT_SIDE], xshut_pins[RIGHT_SIDE], GPIO_PIN_RESET);
 8000552:	4b71      	ldr	r3, [pc, #452]	; (8000718 <initLasers+0x1cc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a71      	ldr	r2, [pc, #452]	; (800071c <initLasers+0x1d0>)
 8000558:	8811      	ldrh	r1, [r2, #0]
 800055a:	2200      	movs	r2, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fcf9 	bl	8000f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(xshut_ports[RIGHT_FRONT], xshut_pins[RIGHT_FRONT], GPIO_PIN_RESET);
 8000562:	4b6d      	ldr	r3, [pc, #436]	; (8000718 <initLasers+0x1cc>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	4a6d      	ldr	r2, [pc, #436]	; (800071c <initLasers+0x1d0>)
 8000568:	8851      	ldrh	r1, [r2, #2]
 800056a:	2200      	movs	r2, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fcf1 	bl	8000f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(xshut_ports[LEFT_SIDE], xshut_pins[LEFT_SIDE], GPIO_PIN_RESET);
 8000572:	4b69      	ldr	r3, [pc, #420]	; (8000718 <initLasers+0x1cc>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	4a69      	ldr	r2, [pc, #420]	; (800071c <initLasers+0x1d0>)
 8000578:	8891      	ldrh	r1, [r2, #4]
 800057a:	2200      	movs	r2, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fce9 	bl	8000f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(xshut_ports[LEFT_FRONT], xshut_pins[LEFT_FRONT], GPIO_PIN_RESET);
 8000582:	4b65      	ldr	r3, [pc, #404]	; (8000718 <initLasers+0x1cc>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	4a65      	ldr	r2, [pc, #404]	; (800071c <initLasers+0x1d0>)
 8000588:	88d1      	ldrh	r1, [r2, #6]
 800058a:	2200      	movs	r2, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fce1 	bl	8000f54 <HAL_GPIO_WritePin>

	uint8_t new_addresses[] = { 0x62, 0x64, 0x66, 0x68 };
 8000592:	4b63      	ldr	r3, [pc, #396]	; (8000720 <initLasers+0x1d4>)
 8000594:	603b      	str	r3, [r7, #0]

	for (int dev_ind = 0; dev_ind < 4; dev_ind++) { //RIGHT_SIDE, RIGHT_FRONT, LEFT_SIDE, LEFT_FRONT
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	e0b3      	b.n	8000704 <initLasers+0x1b8>
		laser_devs[dev_ind]->I2cHandle = &hi2c1;
 800059c:	4a61      	ldr	r2, [pc, #388]	; (8000724 <initLasers+0x1d8>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a4:	4a60      	ldr	r2, [pc, #384]	; (8000728 <initLasers+0x1dc>)
 80005a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		laser_devs[dev_ind]->I2cDevAddr = 0x52;
 80005aa:	4a5e      	ldr	r2, [pc, #376]	; (8000724 <initLasers+0x1d8>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b2:	2252      	movs	r2, #82	; 0x52
 80005b4:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

		HAL_GPIO_WritePin(xshut_ports[dev_ind], xshut_pins[dev_ind], GPIO_PIN_RESET); // Disable XSHUT
 80005b8:	4a57      	ldr	r2, [pc, #348]	; (8000718 <initLasers+0x1cc>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005c0:	4a56      	ldr	r2, [pc, #344]	; (800071c <initLasers+0x1d0>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c8:	2200      	movs	r2, #0
 80005ca:	4619      	mov	r1, r3
 80005cc:	f000 fcc2 	bl	8000f54 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 80005d0:	2014      	movs	r0, #20
 80005d2:	f000 fa33 	bl	8000a3c <HAL_Delay>
		HAL_GPIO_WritePin(xshut_ports[dev_ind], xshut_pins[dev_ind], GPIO_PIN_SET); // Enable XSHUT
 80005d6:	4a50      	ldr	r2, [pc, #320]	; (8000718 <initLasers+0x1cc>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005de:	4a4f      	ldr	r2, [pc, #316]	; (800071c <initLasers+0x1d0>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e6:	2201      	movs	r2, #1
 80005e8:	4619      	mov	r1, r3
 80005ea:	f000 fcb3 	bl	8000f54 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 80005ee:	2014      	movs	r0, #20
 80005f0:	f000 fa24 	bl	8000a3c <HAL_Delay>
		//HAL_GPIO_WritePin(xshut_ports[LEFT_SIDE], xshut_pins[LEFT_SIDE], GPIO_PIN_RESET);
		//
		// VL53L0X init for Single Measurement
		//

		VL53L0X_WaitDeviceBooted( laser_devs[dev_ind] );
 80005f4:	4a4b      	ldr	r2, [pc, #300]	; (8000724 <initLasers+0x1d8>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 f9e9 	bl	80039d4 <VL53L0X_WaitDeviceBooted>
		VL53L0X_DataInit( laser_devs[dev_ind] );
 8000602:	4a48      	ldr	r2, [pc, #288]	; (8000724 <initLasers+0x1d8>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fed8 	bl	80033c0 <VL53L0X_DataInit>
		VL53L0X_StaticInit( laser_devs[dev_ind]);
 8000610:	4a44      	ldr	r2, [pc, #272]	; (8000724 <initLasers+0x1d8>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000618:	4618      	mov	r0, r3
 800061a:	f003 f857 	bl	80036cc <VL53L0X_StaticInit>
		VL53L0X_PerformRefCalibration(laser_devs[dev_ind], &VhvSettings, &PhaseCal);
 800061e:	4a41      	ldr	r2, [pc, #260]	; (8000724 <initLasers+0x1d8>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000626:	4a41      	ldr	r2, [pc, #260]	; (800072c <initLasers+0x1e0>)
 8000628:	4941      	ldr	r1, [pc, #260]	; (8000730 <initLasers+0x1e4>)
 800062a:	4618      	mov	r0, r3
 800062c:	f003 ff10 	bl	8004450 <VL53L0X_PerformRefCalibration>
		VL53L0X_PerformRefSpadManagement(laser_devs[dev_ind], &refSpadCount, &isApertureSpads);
 8000630:	4a3c      	ldr	r2, [pc, #240]	; (8000724 <initLasers+0x1d8>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000638:	4a3e      	ldr	r2, [pc, #248]	; (8000734 <initLasers+0x1e8>)
 800063a:	493f      	ldr	r1, [pc, #252]	; (8000738 <initLasers+0x1ec>)
 800063c:	4618      	mov	r0, r3
 800063e:	f004 fc21 	bl	8004e84 <VL53L0X_PerformRefSpadManagement>
		VL53L0X_SetDeviceMode(laser_devs[dev_ind], VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000642:	4a38      	ldr	r2, [pc, #224]	; (8000724 <initLasers+0x1d8>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fa83 	bl	8003b58 <VL53L0X_SetDeviceMode>

		// Enable/Disable Sigma and Signal check
		VL53L0X_SetLimitCheckEnable(laser_devs[dev_ind], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000652:	4a34      	ldr	r2, [pc, #208]	; (8000724 <initLasers+0x1d8>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065a:	2201      	movs	r2, #1
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fcf2 	bl	8004048 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckEnable(laser_devs[dev_ind], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000664:	4a2f      	ldr	r2, [pc, #188]	; (8000724 <initLasers+0x1d8>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fce9 	bl	8004048 <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckValue(laser_devs[dev_ind], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000676:	4a2b      	ldr	r2, [pc, #172]	; (8000724 <initLasers+0x1d8>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067e:	f641 1299 	movw	r2, #6553	; 0x1999
 8000682:	2101      	movs	r1, #1
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fd8d 	bl	80041a4 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetLimitCheckValue(laser_devs[dev_ind], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800068a:	4a26      	ldr	r2, [pc, #152]	; (8000724 <initLasers+0x1d8>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fd83 	bl	80041a4 <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(laser_devs[dev_ind], 33000);
 800069e:	4a21      	ldr	r2, [pc, #132]	; (8000724 <initLasers+0x1d8>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a6:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 faaf 	bl	8003c0e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		VL53L0X_SetVcselPulsePeriod(laser_devs[dev_ind], VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80006b0:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <initLasers+0x1d8>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b8:	2212      	movs	r2, #18
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 facc 	bl	8003c5a <VL53L0X_SetVcselPulsePeriod>
		VL53L0X_SetVcselPulsePeriod(laser_devs[dev_ind], VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <initLasers+0x1d8>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	220e      	movs	r2, #14
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fac3 	bl	8003c5a <VL53L0X_SetVcselPulsePeriod>

		VL53L0X_SetDeviceAddress(laser_devs[dev_ind], new_addresses[dev_ind]);
 80006d4:	4a13      	ldr	r2, [pc, #76]	; (8000724 <initLasers+0x1d8>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006dc:	463a      	mov	r2, r7
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4619      	mov	r1, r3
 80006e6:	f002 fe53 	bl	8003390 <VL53L0X_SetDeviceAddress>
		laser_devs[dev_ind]->I2cDevAddr = new_addresses[dev_ind];
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <initLasers+0x1d8>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f2:	4639      	mov	r1, r7
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	440a      	add	r2, r1
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
	for (int dev_ind = 0; dev_ind < 4; dev_ind++) { //RIGHT_SIDE, RIGHT_FRONT, LEFT_SIDE, LEFT_FRONT
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3301      	adds	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b03      	cmp	r3, #3
 8000708:	f77f af48 	ble.w	800059c <initLasers+0x50>
	}


}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000000 	.word	0x20000000
 800071c:	20000010 	.word	0x20000010
 8000720:	68666462 	.word	0x68666462
 8000724:	20000018 	.word	0x20000018
 8000728:	2000030c 	.word	0x2000030c
 800072c:	20000aa2 	.word	0x20000aa2
 8000730:	20000aa1 	.word	0x20000aa1
 8000734:	20000aa0 	.word	0x20000aa0
 8000738:	20000a9c 	.word	0x20000a9c

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x8>
	...

08000748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_MspInit+0x40>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <HAL_MspInit+0x40>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_MspInit+0x40>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_MspInit+0x40>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a07      	ldr	r2, [pc, #28]	; (8000788 <HAL_MspInit+0x40>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_MspInit+0x40>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a1d      	ldr	r2, [pc, #116]	; (800081c <HAL_I2C_MspInit+0x90>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d132      	bne.n	8000812 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <HAL_I2C_MspInit+0x94>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <HAL_I2C_MspInit+0x94>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <HAL_I2C_MspInit+0x94>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0308 	and.w	r3, r3, #8
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ca:	2312      	movs	r3, #18
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4812      	ldr	r0, [pc, #72]	; (8000824 <HAL_I2C_MspInit+0x98>)
 80007da:	f000 fa37 	bl	8000c4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_I2C_MspInit+0x9c>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
 80007ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ee:	f043 0302 	orr.w	r3, r3, #2
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <HAL_I2C_MspInit+0x9c>)
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_I2C_MspInit+0x94>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_I2C_MspInit+0x94>)
 8000800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_I2C_MspInit+0x94>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40005400 	.word	0x40005400
 8000820:	40021000 	.word	0x40021000
 8000824:	40010c00 	.word	0x40010c00
 8000828:	40010000 	.word	0x40010000

0800082c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a09      	ldr	r2, [pc, #36]	; (8000860 <HAL_TIM_Base_MspInit+0x34>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d10b      	bne.n	8000856 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_TIM_Base_MspInit+0x38>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_TIM_Base_MspInit+0x38>)
 8000844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_TIM_Base_MspInit+0x38>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	40012c00 	.word	0x40012c00
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <HAL_TIM_MspPostInit+0x5c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d118      	bne.n	80008ba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_TIM_MspPostInit+0x60>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_TIM_MspPostInit+0x60>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_TIM_MspPostInit+0x60>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_TIM_MspPostInit+0x64>)
 80008b6:	f000 f9c9 	bl	8000c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40012c00 	.word	0x40012c00
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010800 	.word	0x40010800

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f875 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}

0800091e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
	...

0800092c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000952:	f7ff ffe4 	bl	800091e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f007 fd93 	bl	8008480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff fc31 	bl	80001c0 <main>
  bx lr
 800095e:	4770      	bx	lr
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8000968:	0800854c 	.word	0x0800854c
  ldr r2, =_sbss
 800096c:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8000970:	20000ae8 	.word	0x20000ae8

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f92b 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	200f      	movs	r0, #15
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fed8 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f935 	bl	8000c32 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e0:	f000 f90b 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000028 	.word	0x20000028
 80009fc:	20000030 	.word	0x20000030
 8000a00:	2000002c 	.word	0x2000002c

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <HAL_IncTick+0x20>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000030 	.word	0x20000030
 8000a24:	20000aa4 	.word	0x20000aa4

08000a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <HAL_GetTick+0x10>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000aa4 	.word	0x20000aa4

08000a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff fff0 	bl	8000a28 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a54:	d005      	beq.n	8000a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_Delay+0x44>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a62:	bf00      	nop
 8000a64:	f7ff ffe0 	bl	8000a28 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8f7      	bhi.n	8000a64 <HAL_Delay+0x28>
  {
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000030 	.word	0x20000030

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f7ff ff90 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff49 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff5e 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff90 	bl	8000b3c <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5f 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffb0 	bl	8000ba0 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b08b      	sub	sp, #44	; 0x2c
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5e:	e169      	b.n	8000f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c60:	2201      	movs	r2, #1
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	f040 8158 	bne.w	8000f2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	4a9a      	ldr	r2, [pc, #616]	; (8000eec <HAL_GPIO_Init+0x2a0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d05e      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
 8000c88:	4a98      	ldr	r2, [pc, #608]	; (8000eec <HAL_GPIO_Init+0x2a0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d875      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000c8e:	4a98      	ldr	r2, [pc, #608]	; (8000ef0 <HAL_GPIO_Init+0x2a4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d058      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
 8000c94:	4a96      	ldr	r2, [pc, #600]	; (8000ef0 <HAL_GPIO_Init+0x2a4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d86f      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000c9a:	4a96      	ldr	r2, [pc, #600]	; (8000ef4 <HAL_GPIO_Init+0x2a8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d052      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
 8000ca0:	4a94      	ldr	r2, [pc, #592]	; (8000ef4 <HAL_GPIO_Init+0x2a8>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d869      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000ca6:	4a94      	ldr	r2, [pc, #592]	; (8000ef8 <HAL_GPIO_Init+0x2ac>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d04c      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
 8000cac:	4a92      	ldr	r2, [pc, #584]	; (8000ef8 <HAL_GPIO_Init+0x2ac>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d863      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000cb2:	4a92      	ldr	r2, [pc, #584]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d046      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
 8000cb8:	4a90      	ldr	r2, [pc, #576]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d85d      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000cbe:	2b12      	cmp	r3, #18
 8000cc0:	d82a      	bhi.n	8000d18 <HAL_GPIO_Init+0xcc>
 8000cc2:	2b12      	cmp	r3, #18
 8000cc4:	d859      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000cc6:	a201      	add	r2, pc, #4	; (adr r2, 8000ccc <HAL_GPIO_Init+0x80>)
 8000cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ccc:	08000d47 	.word	0x08000d47
 8000cd0:	08000d21 	.word	0x08000d21
 8000cd4:	08000d33 	.word	0x08000d33
 8000cd8:	08000d75 	.word	0x08000d75
 8000cdc:	08000d7b 	.word	0x08000d7b
 8000ce0:	08000d7b 	.word	0x08000d7b
 8000ce4:	08000d7b 	.word	0x08000d7b
 8000ce8:	08000d7b 	.word	0x08000d7b
 8000cec:	08000d7b 	.word	0x08000d7b
 8000cf0:	08000d7b 	.word	0x08000d7b
 8000cf4:	08000d7b 	.word	0x08000d7b
 8000cf8:	08000d7b 	.word	0x08000d7b
 8000cfc:	08000d7b 	.word	0x08000d7b
 8000d00:	08000d7b 	.word	0x08000d7b
 8000d04:	08000d7b 	.word	0x08000d7b
 8000d08:	08000d7b 	.word	0x08000d7b
 8000d0c:	08000d7b 	.word	0x08000d7b
 8000d10:	08000d29 	.word	0x08000d29
 8000d14:	08000d3d 	.word	0x08000d3d
 8000d18:	4a79      	ldr	r2, [pc, #484]	; (8000f00 <HAL_GPIO_Init+0x2b4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d013      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d1e:	e02c      	b.n	8000d7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	623b      	str	r3, [r7, #32]
          break;
 8000d26:	e029      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	e024      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	3308      	adds	r3, #8
 8000d38:	623b      	str	r3, [r7, #32]
          break;
 8000d3a:	e01f      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	330c      	adds	r3, #12
 8000d42:	623b      	str	r3, [r7, #32]
          break;
 8000d44:	e01a      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	623b      	str	r3, [r7, #32]
          break;
 8000d52:	e013      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d105      	bne.n	8000d68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	611a      	str	r2, [r3, #16]
          break;
 8000d66:	e009      	b.n	8000d7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	615a      	str	r2, [r3, #20]
          break;
 8000d72:	e003      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
          break;
 8000d78:	e000      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          break;
 8000d7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	2bff      	cmp	r3, #255	; 0xff
 8000d80:	d801      	bhi.n	8000d86 <HAL_GPIO_Init+0x13a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	e001      	b.n	8000d8a <HAL_GPIO_Init+0x13e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	2bff      	cmp	r3, #255	; 0xff
 8000d90:	d802      	bhi.n	8000d98 <HAL_GPIO_Init+0x14c>
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	e002      	b.n	8000d9e <HAL_GPIO_Init+0x152>
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	3b08      	subs	r3, #8
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	210f      	movs	r1, #15
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	401a      	ands	r2, r3
 8000db0:	6a39      	ldr	r1, [r7, #32]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	431a      	orrs	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 80b1 	beq.w	8000f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dcc:	4b4d      	ldr	r3, [pc, #308]	; (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a4c      	ldr	r2, [pc, #304]	; (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b4a      	ldr	r3, [pc, #296]	; (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000de4:	4a48      	ldr	r2, [pc, #288]	; (8000f08 <HAL_GPIO_Init+0x2bc>)
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a40      	ldr	r2, [pc, #256]	; (8000f0c <HAL_GPIO_Init+0x2c0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d013      	beq.n	8000e38 <HAL_GPIO_Init+0x1ec>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a3f      	ldr	r2, [pc, #252]	; (8000f10 <HAL_GPIO_Init+0x2c4>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d00d      	beq.n	8000e34 <HAL_GPIO_Init+0x1e8>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a3e      	ldr	r2, [pc, #248]	; (8000f14 <HAL_GPIO_Init+0x2c8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d007      	beq.n	8000e30 <HAL_GPIO_Init+0x1e4>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a3d      	ldr	r2, [pc, #244]	; (8000f18 <HAL_GPIO_Init+0x2cc>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d101      	bne.n	8000e2c <HAL_GPIO_Init+0x1e0>
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e006      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	e004      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e002      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3c:	f002 0203 	and.w	r2, r2, #3
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	4093      	lsls	r3, r2
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e4a:	492f      	ldr	r1, [pc, #188]	; (8000f08 <HAL_GPIO_Init+0x2bc>)
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d006      	beq.n	8000e72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	492c      	ldr	r1, [pc, #176]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	600b      	str	r3, [r1, #0]
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4928      	ldr	r1, [pc, #160]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	4922      	ldr	r1, [pc, #136]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	604b      	str	r3, [r1, #4]
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	491e      	ldr	r1, [pc, #120]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d006      	beq.n	8000ec2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	4918      	ldr	r1, [pc, #96]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	608b      	str	r3, [r1, #8]
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4914      	ldr	r1, [pc, #80]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d021      	beq.n	8000f20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	490e      	ldr	r1, [pc, #56]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	60cb      	str	r3, [r1, #12]
 8000ee8:	e021      	b.n	8000f2e <HAL_GPIO_Init+0x2e2>
 8000eea:	bf00      	nop
 8000eec:	10320000 	.word	0x10320000
 8000ef0:	10310000 	.word	0x10310000
 8000ef4:	10220000 	.word	0x10220000
 8000ef8:	10210000 	.word	0x10210000
 8000efc:	10120000 	.word	0x10120000
 8000f00:	10110000 	.word	0x10110000
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	40010c00 	.word	0x40010c00
 8000f14:	40011000 	.word	0x40011000
 8000f18:	40011400 	.word	0x40011400
 8000f1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_GPIO_Init+0x304>)
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	4909      	ldr	r1, [pc, #36]	; (8000f50 <HAL_GPIO_Init+0x304>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	3301      	adds	r3, #1
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f47f ae8e 	bne.w	8000c60 <HAL_GPIO_Init+0x14>
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	372c      	adds	r7, #44	; 0x2c
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
 8000f60:	4613      	mov	r3, r2
 8000f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f70:	e003      	b.n	8000f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	041a      	lsls	r2, r3, #16
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	611a      	str	r2, [r3, #16]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e12b      	b.n	80011ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fbee 	bl	800078c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2224      	movs	r2, #36	; 0x24
 8000fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fe8:	f001 fb6e 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8000fec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4a81      	ldr	r2, [pc, #516]	; (80011f8 <HAL_I2C_Init+0x274>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d807      	bhi.n	8001008 <HAL_I2C_Init+0x84>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4a80      	ldr	r2, [pc, #512]	; (80011fc <HAL_I2C_Init+0x278>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	bf94      	ite	ls
 8001000:	2301      	movls	r3, #1
 8001002:	2300      	movhi	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	e006      	b.n	8001016 <HAL_I2C_Init+0x92>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4a7d      	ldr	r2, [pc, #500]	; (8001200 <HAL_I2C_Init+0x27c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	bf94      	ite	ls
 8001010:	2301      	movls	r3, #1
 8001012:	2300      	movhi	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e0e7      	b.n	80011ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4a78      	ldr	r2, [pc, #480]	; (8001204 <HAL_I2C_Init+0x280>)
 8001022:	fba2 2303 	umull	r2, r3, r2, r3
 8001026:	0c9b      	lsrs	r3, r3, #18
 8001028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	430a      	orrs	r2, r1
 800103c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a6a      	ldr	r2, [pc, #424]	; (80011f8 <HAL_I2C_Init+0x274>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d802      	bhi.n	8001058 <HAL_I2C_Init+0xd4>
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	3301      	adds	r3, #1
 8001056:	e009      	b.n	800106c <HAL_I2C_Init+0xe8>
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	4a69      	ldr	r2, [pc, #420]	; (8001208 <HAL_I2C_Init+0x284>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	099b      	lsrs	r3, r3, #6
 800106a:	3301      	adds	r3, #1
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	430b      	orrs	r3, r1
 8001072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800107e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	495c      	ldr	r1, [pc, #368]	; (80011f8 <HAL_I2C_Init+0x274>)
 8001088:	428b      	cmp	r3, r1
 800108a:	d819      	bhi.n	80010c0 <HAL_I2C_Init+0x13c>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1e59      	subs	r1, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fbb1 f3f3 	udiv	r3, r1, r3
 800109a:	1c59      	adds	r1, r3, #1
 800109c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010a0:	400b      	ands	r3, r1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00a      	beq.n	80010bc <HAL_I2C_Init+0x138>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1e59      	subs	r1, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b4:	3301      	adds	r3, #1
 80010b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ba:	e051      	b.n	8001160 <HAL_I2C_Init+0x1dc>
 80010bc:	2304      	movs	r3, #4
 80010be:	e04f      	b.n	8001160 <HAL_I2C_Init+0x1dc>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d111      	bne.n	80010ec <HAL_I2C_Init+0x168>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1e58      	subs	r0, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6859      	ldr	r1, [r3, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	440b      	add	r3, r1
 80010d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	e012      	b.n	8001112 <HAL_I2C_Init+0x18e>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	1e58      	subs	r0, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	0099      	lsls	r1, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001102:	3301      	adds	r3, #1
 8001104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf0c      	ite	eq
 800110c:	2301      	moveq	r3, #1
 800110e:	2300      	movne	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_I2C_Init+0x196>
 8001116:	2301      	movs	r3, #1
 8001118:	e022      	b.n	8001160 <HAL_I2C_Init+0x1dc>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10e      	bne.n	8001140 <HAL_I2C_Init+0x1bc>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	1e58      	subs	r0, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6859      	ldr	r1, [r3, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	440b      	add	r3, r1
 8001130:	fbb0 f3f3 	udiv	r3, r0, r3
 8001134:	3301      	adds	r3, #1
 8001136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800113a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113e:	e00f      	b.n	8001160 <HAL_I2C_Init+0x1dc>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1e58      	subs	r0, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6859      	ldr	r1, [r3, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	0099      	lsls	r1, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	fbb0 f3f3 	udiv	r3, r0, r3
 8001156:	3301      	adds	r3, #1
 8001158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	6809      	ldr	r1, [r1, #0]
 8001164:	4313      	orrs	r3, r2
 8001166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800118e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6911      	ldr	r1, [r2, #16]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68d2      	ldr	r2, [r2, #12]
 800119a:	4311      	orrs	r1, r2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0201 	orr.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2220      	movs	r2, #32
 80011da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	000186a0 	.word	0x000186a0
 80011fc:	001e847f 	.word	0x001e847f
 8001200:	003d08ff 	.word	0x003d08ff
 8001204:	431bde83 	.word	0x431bde83
 8001208:	10624dd3 	.word	0x10624dd3

0800120c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af02      	add	r7, sp, #8
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	461a      	mov	r2, r3
 8001218:	460b      	mov	r3, r1
 800121a:	817b      	strh	r3, [r7, #10]
 800121c:	4613      	mov	r3, r2
 800121e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff fc02 	bl	8000a28 <HAL_GetTick>
 8001224:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b20      	cmp	r3, #32
 8001230:	f040 80e0 	bne.w	80013f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2319      	movs	r3, #25
 800123a:	2201      	movs	r2, #1
 800123c:	4970      	ldr	r1, [pc, #448]	; (8001400 <HAL_I2C_Master_Transmit+0x1f4>)
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 fc92 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800124a:	2302      	movs	r3, #2
 800124c:	e0d3      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_I2C_Master_Transmit+0x50>
 8001258:	2302      	movs	r3, #2
 800125a:	e0cc      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b01      	cmp	r3, #1
 8001270:	d007      	beq.n	8001282 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0201 	orr.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001290:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2221      	movs	r2, #33	; 0x21
 8001296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2210      	movs	r2, #16
 800129e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	893a      	ldrh	r2, [r7, #8]
 80012b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4a50      	ldr	r2, [pc, #320]	; (8001404 <HAL_I2C_Master_Transmit+0x1f8>)
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80012c4:	8979      	ldrh	r1, [r7, #10]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	6a3a      	ldr	r2, [r7, #32]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 fafc 	bl	80018c8 <I2C_MasterRequestWrite>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e08d      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012f0:	e066      	b.n	80013c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	6a39      	ldr	r1, [r7, #32]
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 fd0c 	bl	8001d14 <I2C_WaitOnTXEFlagUntilTimeout>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00d      	beq.n	800131e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	2b04      	cmp	r3, #4
 8001308:	d107      	bne.n	800131a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e06b      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	781a      	ldrb	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001338:	b29b      	uxth	r3, r3
 800133a:	3b01      	subs	r3, #1
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001346:	3b01      	subs	r3, #1
 8001348:	b29a      	uxth	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b04      	cmp	r3, #4
 800135a:	d11b      	bne.n	8001394 <HAL_I2C_Master_Transmit+0x188>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001360:	2b00      	cmp	r3, #0
 8001362:	d017      	beq.n	8001394 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137e:	b29b      	uxth	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138c:	3b01      	subs	r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	6a39      	ldr	r1, [r7, #32]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f000 fcfc 	bl	8001d96 <I2C_WaitOnBTFFlagUntilTimeout>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00d      	beq.n	80013c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d107      	bne.n	80013bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e01a      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d194      	bne.n	80012f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2220      	movs	r2, #32
 80013dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e000      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013f4:	2302      	movs	r3, #2
  }
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	00100002 	.word	0x00100002
 8001404:	ffff0000 	.word	0xffff0000

08001408 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	; 0x30
 800140c:	af02      	add	r7, sp, #8
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	461a      	mov	r2, r3
 8001414:	460b      	mov	r3, r1
 8001416:	817b      	strh	r3, [r7, #10]
 8001418:	4613      	mov	r3, r2
 800141a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff fb02 	bl	8000a28 <HAL_GetTick>
 8001424:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b20      	cmp	r3, #32
 8001430:	f040 823f 	bne.w	80018b2 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2319      	movs	r3, #25
 800143a:	2201      	movs	r2, #1
 800143c:	497f      	ldr	r1, [pc, #508]	; (800163c <HAL_I2C_Master_Receive+0x234>)
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 fb92 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800144a:	2302      	movs	r3, #2
 800144c:	e232      	b.n	80018b4 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_I2C_Master_Receive+0x54>
 8001458:	2302      	movs	r3, #2
 800145a:	e22b      	b.n	80018b4 <HAL_I2C_Master_Receive+0x4ac>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b01      	cmp	r3, #1
 8001470:	d007      	beq.n	8001482 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0201 	orr.w	r2, r2, #1
 8001480:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001490:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2222      	movs	r2, #34	; 0x22
 8001496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2210      	movs	r2, #16
 800149e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	893a      	ldrh	r2, [r7, #8]
 80014b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4a5f      	ldr	r2, [pc, #380]	; (8001640 <HAL_I2C_Master_Receive+0x238>)
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014c4:	8979      	ldrh	r1, [r7, #10]
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 fa7e 	bl	80019cc <I2C_MasterRequestRead>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e1ec      	b.n	80018b4 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d113      	bne.n	800150a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e1c0      	b.n	800188c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150e:	2b01      	cmp	r3, #1
 8001510:	d11e      	bne.n	8001550 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001520:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001522:	b672      	cpsid	i
}
 8001524:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800154a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800154c:	b662      	cpsie	i
}
 800154e:	e035      	b.n	80015bc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001554:	2b02      	cmp	r3, #2
 8001556:	d11e      	bne.n	8001596 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001566:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001590:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001592:	b662      	cpsie	i
}
 8001594:	e012      	b.n	80015bc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80015bc:	e166      	b.n	800188c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	f200 811f 	bhi.w	8001806 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d123      	bne.n	8001618 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 fc1f 	bl	8001e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e167      	b.n	80018b4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160c:	b29b      	uxth	r3, r3
 800160e:	3b01      	subs	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001616:	e139      	b.n	800188c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161c:	2b02      	cmp	r3, #2
 800161e:	d152      	bne.n	80016c6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001626:	2200      	movs	r2, #0
 8001628:	4906      	ldr	r1, [pc, #24]	; (8001644 <HAL_I2C_Master_Receive+0x23c>)
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 fa9c 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e13c      	b.n	80018b4 <HAL_I2C_Master_Receive+0x4ac>
 800163a:	bf00      	nop
 800163c:	00100002 	.word	0x00100002
 8001640:	ffff0000 	.word	0xffff0000
 8001644:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800165a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800168e:	b662      	cpsie	i
}
 8001690:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	3b01      	subs	r3, #1
 80016be:	b29a      	uxth	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016c4:	e0e2      	b.n	800188c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016cc:	2200      	movs	r2, #0
 80016ce:	497b      	ldr	r1, [pc, #492]	; (80018bc <HAL_I2C_Master_Receive+0x4b4>)
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fa49 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0e9      	b.n	80018b4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	3b01      	subs	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	3b01      	subs	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001726:	4b66      	ldr	r3, [pc, #408]	; (80018c0 <HAL_I2C_Master_Receive+0x4b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	4a65      	ldr	r2, [pc, #404]	; (80018c4 <HAL_I2C_Master_Receive+0x4bc>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	0a1a      	lsrs	r2, r3, #8
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	00da      	lsls	r2, r3, #3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	3b01      	subs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d118      	bne.n	800177e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2220      	movs	r2, #32
 8001756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f043 0220 	orr.w	r2, r3, #32
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800176e:	b662      	cpsie	i
}
 8001770:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e09a      	b.n	80018b4 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b04      	cmp	r3, #4
 800178a:	d1d9      	bne.n	8001740 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800179a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80017ce:	b662      	cpsie	i
}
 80017d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001804:	e042      	b.n	800188c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 fb04 	bl	8001e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e04c      	b.n	80018b4 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001836:	3b01      	subs	r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	3b01      	subs	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b04      	cmp	r3, #4
 8001858:	d118      	bne.n	800188c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	f47f ae94 	bne.w	80015be <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80018b2:	2302      	movs	r3, #2
  }
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	00010004 	.word	0x00010004
 80018c0:	20000028 	.word	0x20000028
 80018c4:	14f8b589 	.word	0x14f8b589

080018c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	460b      	mov	r3, r1
 80018d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d006      	beq.n	80018f2 <I2C_MasterRequestWrite+0x2a>
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d003      	beq.n	80018f2 <I2C_MasterRequestWrite+0x2a>
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018f0:	d108      	bne.n	8001904 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e00b      	b.n	800191c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	2b12      	cmp	r3, #18
 800190a:	d107      	bne.n	800191c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800191a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f91d 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00d      	beq.n	8001950 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001942:	d103      	bne.n	800194c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e035      	b.n	80019bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001958:	d108      	bne.n	800196c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800195a:	897b      	ldrh	r3, [r7, #10]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	e01b      	b.n	80019a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800196c:	897b      	ldrh	r3, [r7, #10]
 800196e:	11db      	asrs	r3, r3, #7
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f003 0306 	and.w	r3, r3, #6
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f063 030f 	orn	r3, r3, #15
 800197c:	b2da      	uxtb	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	490e      	ldr	r1, [pc, #56]	; (80019c4 <I2C_MasterRequestWrite+0xfc>)
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 f943 	bl	8001c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e010      	b.n	80019bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800199a:	897b      	ldrh	r3, [r7, #10]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <I2C_MasterRequestWrite+0x100>)
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f933 	bl	8001c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	00010008 	.word	0x00010008
 80019c8:	00010002 	.word	0x00010002

080019cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	460b      	mov	r3, r1
 80019da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d006      	beq.n	8001a06 <I2C_MasterRequestRead+0x3a>
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d003      	beq.n	8001a06 <I2C_MasterRequestRead+0x3a>
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a04:	d108      	bne.n	8001a18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e00b      	b.n	8001a30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	d107      	bne.n	8001a30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 f893 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00d      	beq.n	8001a64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a56:	d103      	bne.n	8001a60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e079      	b.n	8001b58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a6c:	d108      	bne.n	8001a80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a6e:	897b      	ldrh	r3, [r7, #10]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	e05f      	b.n	8001b40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a80:	897b      	ldrh	r3, [r7, #10]
 8001a82:	11db      	asrs	r3, r3, #7
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f003 0306 	and.w	r3, r3, #6
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f063 030f 	orn	r3, r3, #15
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4930      	ldr	r1, [pc, #192]	; (8001b60 <I2C_MasterRequestRead+0x194>)
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f8b9 	bl	8001c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e054      	b.n	8001b58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001aae:	897b      	ldrh	r3, [r7, #10]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4929      	ldr	r1, [pc, #164]	; (8001b64 <I2C_MasterRequestRead+0x198>)
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f8a9 	bl	8001c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e044      	b.n	8001b58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f831 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00d      	beq.n	8001b28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b1a:	d103      	bne.n	8001b24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e017      	b.n	8001b58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	11db      	asrs	r3, r3, #7
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f003 0306 	and.w	r3, r3, #6
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f063 030e 	orn	r3, r3, #14
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <I2C_MasterRequestRead+0x198>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f865 	bl	8001c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	00010008 	.word	0x00010008
 8001b64:	00010002 	.word	0x00010002

08001b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b78:	e025      	b.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b80:	d021      	beq.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b82:	f7fe ff51 	bl	8000a28 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d302      	bcc.n	8001b98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d116      	bne.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f043 0220 	orr.w	r2, r3, #32
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e023      	b.n	8001c0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10d      	bne.n	8001bec <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf0c      	ite	eq
 8001be2:	2301      	moveq	r3, #1
 8001be4:	2300      	movne	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	e00c      	b.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	bf0c      	ite	eq
 8001bfe:	2301      	moveq	r3, #1
 8001c00:	2300      	movne	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d0b6      	beq.n	8001b7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c24:	e051      	b.n	8001cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c34:	d123      	bne.n	8001c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f043 0204 	orr.w	r2, r3, #4
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e046      	b.n	8001d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c84:	d021      	beq.n	8001cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c86:	f7fe fecf 	bl	8000a28 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d302      	bcc.n	8001c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d116      	bne.n	8001cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f043 0220 	orr.w	r2, r3, #32
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e020      	b.n	8001d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d10c      	bne.n	8001cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf14      	ite	ne
 8001ce6:	2301      	movne	r3, #1
 8001ce8:	2300      	moveq	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	e00b      	b.n	8001d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf14      	ite	ne
 8001d00:	2301      	movne	r3, #1
 8001d02:	2300      	moveq	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d18d      	bne.n	8001c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d20:	e02d      	b.n	8001d7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f8ce 	bl	8001ec4 <I2C_IsAcknowledgeFailed>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e02d      	b.n	8001d8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d38:	d021      	beq.n	8001d7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3a:	f7fe fe75 	bl	8000a28 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d302      	bcc.n	8001d50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d116      	bne.n	8001d7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f043 0220 	orr.w	r2, r3, #32
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e007      	b.n	8001d8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d88:	2b80      	cmp	r3, #128	; 0x80
 8001d8a:	d1ca      	bne.n	8001d22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001da2:	e02d      	b.n	8001e00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f88d 	bl	8001ec4 <I2C_IsAcknowledgeFailed>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e02d      	b.n	8001e10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dba:	d021      	beq.n	8001e00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dbc:	f7fe fe34 	bl	8000a28 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d302      	bcc.n	8001dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f043 0220 	orr.w	r2, r3, #32
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e007      	b.n	8001e10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d1ca      	bne.n	8001da4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e24:	e042      	b.n	8001eac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d119      	bne.n	8001e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0210 	mvn.w	r2, #16
 8001e3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e029      	b.n	8001ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e68:	f7fe fdde 	bl	8000a28 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d302      	bcc.n	8001e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d116      	bne.n	8001eac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e007      	b.n	8001ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d1b5      	bne.n	8001e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eda:	d11b      	bne.n	8001f14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ee4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 0204 	orr.w	r2, r3, #4
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e272      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8087 	beq.w	800204e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f40:	4b92      	ldr	r3, [pc, #584]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d00c      	beq.n	8001f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f4c:	4b8f      	ldr	r3, [pc, #572]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d112      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
 8001f58:	4b8c      	ldr	r3, [pc, #560]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d10b      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f66:	4b89      	ldr	r3, [pc, #548]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06c      	beq.n	800204c <HAL_RCC_OscConfig+0x12c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d168      	bne.n	800204c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e24c      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x76>
 8001f88:	4b80      	ldr	r3, [pc, #512]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a7f      	ldr	r2, [pc, #508]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	e02e      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x98>
 8001f9e:	4b7b      	ldr	r3, [pc, #492]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a7a      	ldr	r2, [pc, #488]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b78      	ldr	r3, [pc, #480]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a77      	ldr	r2, [pc, #476]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e01d      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0xbc>
 8001fc2:	4b72      	ldr	r3, [pc, #456]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a71      	ldr	r2, [pc, #452]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b6f      	ldr	r3, [pc, #444]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001fdc:	4b6b      	ldr	r3, [pc, #428]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6a      	ldr	r2, [pc, #424]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a67      	ldr	r2, [pc, #412]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fd14 	bl	8000a28 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe fd10 	bl	8000a28 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e200      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b5d      	ldr	r3, [pc, #372]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0xe4>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fd00 	bl	8000a28 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7fe fcfc 	bl	8000a28 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1ec      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x10c>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d063      	beq.n	8002122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800205a:	4b4c      	ldr	r3, [pc, #304]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002066:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b08      	cmp	r3, #8
 8002070:	d11c      	bne.n	80020ac <HAL_RCC_OscConfig+0x18c>
 8002072:	4b46      	ldr	r3, [pc, #280]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d116      	bne.n	80020ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_RCC_OscConfig+0x176>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e1c0      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4939      	ldr	r1, [pc, #228]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	e03a      	b.n	8002122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7fe fcb5 	bl	8000a28 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c2:	f7fe fcb1 	bl	8000a28 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e1a1      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d4:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4927      	ldr	r1, [pc, #156]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
 80020f4:	e015      	b.n	8002122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe fc94 	bl	8000a28 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002104:	f7fe fc90 	bl	8000a28 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e180      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d03a      	beq.n	80021a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d019      	beq.n	800216a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_RCC_OscConfig+0x274>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7fe fc74 	bl	8000a28 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe fc70 	bl	8000a28 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e160      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f000 fac4 	bl	80026f0 <RCC_Delay>
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_RCC_OscConfig+0x274>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002170:	f7fe fc5a 	bl	8000a28 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002176:	e00f      	b.n	8002198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002178:	f7fe fc56 	bl	8000a28 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d908      	bls.n	8002198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e146      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	42420000 	.word	0x42420000
 8002194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002198:	4b92      	ldr	r3, [pc, #584]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e9      	bne.n	8002178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80a6 	beq.w	80022fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4b8b      	ldr	r3, [pc, #556]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10d      	bne.n	80021de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b88      	ldr	r3, [pc, #544]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a87      	ldr	r2, [pc, #540]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	61d3      	str	r3, [r2, #28]
 80021ce:	4b85      	ldr	r3, [pc, #532]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	4b82      	ldr	r3, [pc, #520]	; (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ea:	4b7f      	ldr	r3, [pc, #508]	; (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7e      	ldr	r2, [pc, #504]	; (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7fe fc17 	bl	8000a28 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7fe fc13 	bl	8000a28 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b64      	cmp	r3, #100	; 0x64
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e103      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x312>
 8002224:	4b6f      	ldr	r3, [pc, #444]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a6e      	ldr	r2, [pc, #440]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	e02d      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x334>
 800223a:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a69      	ldr	r2, [pc, #420]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a66      	ldr	r2, [pc, #408]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	e01c      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d10c      	bne.n	8002276 <HAL_RCC_OscConfig+0x356>
 800225c:	4b61      	ldr	r3, [pc, #388]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a60      	ldr	r2, [pc, #384]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	6213      	str	r3, [r2, #32]
 8002268:	4b5e      	ldr	r3, [pc, #376]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a5d      	ldr	r2, [pc, #372]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e00b      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002276:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a5a      	ldr	r2, [pc, #360]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a57      	ldr	r2, [pc, #348]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d015      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe fbc7 	bl	8000a28 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fbc3 	bl	8000a28 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0b1      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ee      	beq.n	800229e <HAL_RCC_OscConfig+0x37e>
 80022c0:	e014      	b.n	80022ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7fe fbb1 	bl	8000a28 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fbad 	bl	8000a28 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e09b      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ee      	bne.n	80022ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d105      	bne.n	80022fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f2:	4b3c      	ldr	r3, [pc, #240]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a3b      	ldr	r2, [pc, #236]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8087 	beq.w	8002416 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d061      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d146      	bne.n	80023aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b33      	ldr	r3, [pc, #204]	; (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe fb81 	bl	8000a28 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232a:	f7fe fb7d 	bl	8000a28 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e06d      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002350:	d108      	bne.n	8002364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	4921      	ldr	r1, [pc, #132]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a19      	ldr	r1, [r3, #32]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	430b      	orrs	r3, r1
 8002376:	491b      	ldr	r1, [pc, #108]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe fb51 	bl	8000a28 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe fb4d 	bl	8000a28 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e03d      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x46a>
 80023a8:	e035      	b.n	8002416 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7fe fb3a 	bl	8000a28 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fb36 	bl	8000a28 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e026      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x498>
 80023d6:	e01e      	b.n	8002416 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e019      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
 80023ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	429a      	cmp	r2, r3
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0d0      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4965      	ldr	r1, [pc, #404]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800248a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d040      	beq.n	8002544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e073      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4936      	ldr	r1, [pc, #216]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002514:	f7fe fa88 	bl	8000a28 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fa84 	bl	8000a28 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e053      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d210      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4922      	ldr	r1, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1cc>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1d0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe f9e6 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	0800852c 	.word	0x0800852c
 80025f0:	20000028 	.word	0x20000028
 80025f4:	2000002c 	.word	0x2000002c

080025f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b490      	push	{r4, r7}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002600:	1d3c      	adds	r4, r7, #4
 8002602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002608:	f240 2301 	movw	r3, #513	; 0x201
 800260c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002622:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b04      	cmp	r3, #4
 8002630:	d002      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x40>
 8002632:	2b08      	cmp	r3, #8
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x46>
 8002636:	e02b      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800263a:	623b      	str	r3, [r7, #32]
      break;
 800263c:	e02b      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	0c9b      	lsrs	r3, r3, #18
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3328      	adds	r3, #40	; 0x28
 8002648:	443b      	add	r3, r7
 800264a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800264e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d012      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0c5b      	lsrs	r3, r3, #17
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	3328      	adds	r3, #40	; 0x28
 8002666:	443b      	add	r3, r7
 8002668:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800266c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002672:	fb03 f202 	mul.w	r2, r3, r2
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	e004      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	623b      	str	r3, [r7, #32]
      break;
 800268e:	e002      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002692:	623b      	str	r3, [r7, #32]
      break;
 8002694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002696:	6a3b      	ldr	r3, [r7, #32]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3728      	adds	r7, #40	; 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bc90      	pop	{r4, r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	0800851c 	.word	0x0800851c
 80026a8:	40021000 	.word	0x40021000
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	003d0900 	.word	0x003d0900

080026b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	20000028 	.word	0x20000028

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff2 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	0800853c 	.word	0x0800853c

080026f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <RCC_Delay+0x34>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <RCC_Delay+0x38>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a5b      	lsrs	r3, r3, #9
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800270c:	bf00      	nop
  }
  while (Delay --);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e5a      	subs	r2, r3, #1
 8002712:	60fa      	str	r2, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f9      	bne.n	800270c <RCC_Delay+0x1c>
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	20000028 	.word	0x20000028
 8002728:	10624dd3 	.word	0x10624dd3

0800272c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e041      	b.n	80027c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d106      	bne.n	8002758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7fe f86a 	bl	800082c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3304      	adds	r3, #4
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f000 faaa 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e041      	b.n	8002860 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f839 	bl	8002868 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f000 fa5b 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
	...

0800287c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_TIM_PWM_Start+0x24>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e022      	b.n	80028e6 <HAL_TIM_PWM_Start+0x6a>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d109      	bne.n	80028ba <HAL_TIM_PWM_Start+0x3e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	e015      	b.n	80028e6 <HAL_TIM_PWM_Start+0x6a>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d109      	bne.n	80028d4 <HAL_TIM_PWM_Start+0x58>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e008      	b.n	80028e6 <HAL_TIM_PWM_Start+0x6a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e05e      	b.n	80029ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d104      	bne.n	80028fe <HAL_TIM_PWM_Start+0x82>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028fc:	e013      	b.n	8002926 <HAL_TIM_PWM_Start+0xaa>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d104      	bne.n	800290e <HAL_TIM_PWM_Start+0x92>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	e00b      	b.n	8002926 <HAL_TIM_PWM_Start+0xaa>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d104      	bne.n	800291e <HAL_TIM_PWM_Start+0xa2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800291c:	e003      	b.n	8002926 <HAL_TIM_PWM_Start+0xaa>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	6839      	ldr	r1, [r7, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fc48 	bl	80031c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_TIM_PWM_Start+0x138>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d107      	bne.n	800294e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a18      	ldr	r2, [pc, #96]	; (80029b4 <HAL_TIM_PWM_Start+0x138>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_TIM_PWM_Start+0xfa>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d009      	beq.n	8002976 <HAL_TIM_PWM_Start+0xfa>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <HAL_TIM_PWM_Start+0x13c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_TIM_PWM_Start+0xfa>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a12      	ldr	r2, [pc, #72]	; (80029bc <HAL_TIM_PWM_Start+0x140>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d111      	bne.n	800299a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d010      	beq.n	80029aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002998:	e007      	b.n	80029aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800

080029c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e0ac      	b.n	8002b34 <HAL_TIM_PWM_ConfigChannel+0x174>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	f200 809f 	bhi.w	8002b28 <HAL_TIM_PWM_ConfigChannel+0x168>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a25 	.word	0x08002a25
 80029f4:	08002b29 	.word	0x08002b29
 80029f8:	08002b29 	.word	0x08002b29
 80029fc:	08002b29 	.word	0x08002b29
 8002a00:	08002a65 	.word	0x08002a65
 8002a04:	08002b29 	.word	0x08002b29
 8002a08:	08002b29 	.word	0x08002b29
 8002a0c:	08002b29 	.word	0x08002b29
 8002a10:	08002aa7 	.word	0x08002aa7
 8002a14:	08002b29 	.word	0x08002b29
 8002a18:	08002b29 	.word	0x08002b29
 8002a1c:	08002b29 	.word	0x08002b29
 8002a20:	08002ae7 	.word	0x08002ae7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f9ac 	bl	8002d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0208 	orr.w	r2, r2, #8
 8002a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6999      	ldr	r1, [r3, #24]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	619a      	str	r2, [r3, #24]
      break;
 8002a62:	e062      	b.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f9f2 	bl	8002e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6999      	ldr	r1, [r3, #24]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	021a      	lsls	r2, r3, #8
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	619a      	str	r2, [r3, #24]
      break;
 8002aa4:	e041      	b.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fa3b 	bl	8002f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0208 	orr.w	r2, r2, #8
 8002ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0204 	bic.w	r2, r2, #4
 8002ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69d9      	ldr	r1, [r3, #28]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	61da      	str	r2, [r3, #28]
      break;
 8002ae4:	e021      	b.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fa85 	bl	8002ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69d9      	ldr	r1, [r3, #28]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	021a      	lsls	r2, r3, #8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	61da      	str	r2, [r3, #28]
      break;
 8002b26:	e000      	b.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIM_ConfigClockSource+0x18>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e0b3      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x180>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8c:	d03e      	beq.n	8002c0c <HAL_TIM_ConfigClockSource+0xd0>
 8002b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b92:	f200 8087 	bhi.w	8002ca4 <HAL_TIM_ConfigClockSource+0x168>
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	f000 8085 	beq.w	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba2:	d87f      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x168>
 8002ba4:	2b70      	cmp	r3, #112	; 0x70
 8002ba6:	d01a      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0xa2>
 8002ba8:	2b70      	cmp	r3, #112	; 0x70
 8002baa:	d87b      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x168>
 8002bac:	2b60      	cmp	r3, #96	; 0x60
 8002bae:	d050      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x116>
 8002bb0:	2b60      	cmp	r3, #96	; 0x60
 8002bb2:	d877      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x168>
 8002bb4:	2b50      	cmp	r3, #80	; 0x50
 8002bb6:	d03c      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0xf6>
 8002bb8:	2b50      	cmp	r3, #80	; 0x50
 8002bba:	d873      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x168>
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	d058      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x136>
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d86f      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x168>
 8002bc4:	2b30      	cmp	r3, #48	; 0x30
 8002bc6:	d064      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x156>
 8002bc8:	2b30      	cmp	r3, #48	; 0x30
 8002bca:	d86b      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x168>
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d060      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x156>
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d867      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x168>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d05c      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x156>
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d05a      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bdc:	e062      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6899      	ldr	r1, [r3, #8]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f000 faca 	bl	8003186 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	609a      	str	r2, [r3, #8]
      break;
 8002c0a:	e04e      	b.n	8002caa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6899      	ldr	r1, [r3, #8]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f000 fab3 	bl	8003186 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c2e:	609a      	str	r2, [r3, #8]
      break;
 8002c30:	e03b      	b.n	8002caa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f000 fa2a 	bl	8003098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2150      	movs	r1, #80	; 0x50
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fa81 	bl	8003152 <TIM_ITRx_SetConfig>
      break;
 8002c50:	e02b      	b.n	8002caa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f000 fa48 	bl	80030f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2160      	movs	r1, #96	; 0x60
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fa71 	bl	8003152 <TIM_ITRx_SetConfig>
      break;
 8002c70:	e01b      	b.n	8002caa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6859      	ldr	r1, [r3, #4]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f000 fa0a 	bl	8003098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2140      	movs	r1, #64	; 0x40
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fa61 	bl	8003152 <TIM_ITRx_SetConfig>
      break;
 8002c90:	e00b      	b.n	8002caa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f000 fa58 	bl	8003152 <TIM_ITRx_SetConfig>
        break;
 8002ca2:	e002      	b.n	8002caa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ca4:	bf00      	nop
 8002ca6:	e000      	b.n	8002caa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ca8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a29      	ldr	r2, [pc, #164]	; (8002d7c <TIM_Base_SetConfig+0xb8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00b      	beq.n	8002cf4 <TIM_Base_SetConfig+0x30>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d007      	beq.n	8002cf4 <TIM_Base_SetConfig+0x30>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <TIM_Base_SetConfig+0xbc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_Base_SetConfig+0x30>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a25      	ldr	r2, [pc, #148]	; (8002d84 <TIM_Base_SetConfig+0xc0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d108      	bne.n	8002d06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <TIM_Base_SetConfig+0xb8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00b      	beq.n	8002d26 <TIM_Base_SetConfig+0x62>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d007      	beq.n	8002d26 <TIM_Base_SetConfig+0x62>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <TIM_Base_SetConfig+0xbc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <TIM_Base_SetConfig+0x62>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <TIM_Base_SetConfig+0xc0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d108      	bne.n	8002d38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <TIM_Base_SetConfig+0xb8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d103      	bne.n	8002d6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	615a      	str	r2, [r3, #20]
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800

08002d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0201 	bic.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f023 0302 	bic.w	r3, r3, #2
 8002dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <TIM_OC1_SetConfig+0xc8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10c      	bne.n	8002dfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0308 	bic.w	r3, r3, #8
 8002dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <TIM_OC1_SetConfig+0xc8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d111      	bne.n	8002e2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	621a      	str	r2, [r3, #32]
}
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40012c00 	.word	0x40012c00

08002e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f023 0210 	bic.w	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0320 	bic.w	r3, r3, #32
 8002e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <TIM_OC2_SetConfig+0xd0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d10d      	bne.n	8002ed0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <TIM_OC2_SetConfig+0xd0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d113      	bne.n	8002f00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	40012c00 	.word	0x40012c00

08002f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <TIM_OC3_SetConfig+0xd0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10d      	bne.n	8002fa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <TIM_OC3_SetConfig+0xd0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d113      	bne.n	8002fd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	621a      	str	r2, [r3, #32]
}
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40012c00 	.word	0x40012c00

08002ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	031b      	lsls	r3, r3, #12
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <TIM_OC4_SetConfig+0x98>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d109      	bne.n	8003070 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	019b      	lsls	r3, r3, #6
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	621a      	str	r2, [r3, #32]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40012c00 	.word	0x40012c00

08003098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f023 0201 	bic.w	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f023 030a 	bic.w	r3, r3, #10
 80030d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	621a      	str	r2, [r3, #32]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f023 0210 	bic.w	r2, r3, #16
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800311e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	031b      	lsls	r3, r3, #12
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003130:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	621a      	str	r2, [r3, #32]
}
 8003148:	bf00      	nop
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	f043 0307 	orr.w	r3, r3, #7
 8003174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	609a      	str	r2, [r3, #8]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	021a      	lsls	r2, r3, #8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	609a      	str	r2, [r3, #8]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2201      	movs	r2, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a1a      	ldr	r2, [r3, #32]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	621a      	str	r2, [r3, #32]
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003220:	2302      	movs	r3, #2
 8003222:	e046      	b.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a16      	ldr	r2, [pc, #88]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d009      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10c      	bne.n	80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800328c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4313      	orrs	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800

080032c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e03d      	b.n	8003360 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003378:	6839      	ldr	r1, [r7, #0]
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f001 fd97 	bl	8004eae <VL53L0X_get_offset_calibration_data_micro_meter>
 8003380:	4603      	mov	r3, r0
 8003382:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8003384:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	218a      	movs	r1, #138	; 0x8a
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f004 ff38 	bl	8008220 <VL53L0X_WrByte>
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 80033b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b0a4      	sub	sp, #144	; 0x90
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80033ce:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d107      	bne.n	80033e6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2188      	movs	r1, #136	; 0x88
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f004 ff20 	bl	8008220 <VL53L0X_WrByte>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033f4:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4aae      	ldr	r2, [pc, #696]	; (80036b4 <VL53L0X_DataInit+0x2f4>)
 80033fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003406:	f107 0310 	add.w	r3, r7, #16
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 faee 	bl	80039ee <VL53L0X_GetDeviceParameters>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 8003418:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800341c:	2b00      	cmp	r3, #0
 800341e:	d130      	bne.n	8003482 <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 8003420:	2300      	movs	r3, #0
 8003422:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 8003424:	2300      	movs	r3, #0
 8003426:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 8003428:	2300      	movs	r3, #0
 800342a:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 800342c:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 8003430:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 8003432:	f24b 3333 	movw	r3, #45875	; 0xb333
 8003436:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 8003438:	4b9f      	ldr	r3, [pc, #636]	; (80036b8 <VL53L0X_DataInit+0x2f8>)
 800343a:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 800343c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003440:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 8003442:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 8003446:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 8003448:	4b9c      	ldr	r3, [pc, #624]	; (80036bc <VL53L0X_DataInit+0x2fc>)
 800344a:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 800344c:	4b9c      	ldr	r3, [pc, #624]	; (80036c0 <VL53L0X_DataInit+0x300>)
 800344e:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 8003450:	4b9c      	ldr	r3, [pc, #624]	; (80036c4 <VL53L0X_DataInit+0x304>)
 8003452:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 8003454:	4b9c      	ldr	r3, [pc, #624]	; (80036c8 <VL53L0X_DataInit+0x308>)
 8003456:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 8003458:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800345c:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 800345e:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 8003462:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 8003464:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8003468:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 800346a:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 800346e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3308      	adds	r3, #8
 8003476:	f107 0110 	add.w	r1, r7, #16
 800347a:	2278      	movs	r2, #120	; 0x78
 800347c:	4618      	mov	r0, r3
 800347e:	f005 f823 	bl	80084c8 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2264      	movs	r2, #100	; 0x64
 8003486:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003490:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800349a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80034a4:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80034b0:	2201      	movs	r2, #1
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f004 feb3 	bl	8008220 <VL53L0X_WrByte>
 80034ba:	4603      	mov	r3, r0
 80034bc:	461a      	mov	r2, r3
 80034be:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80034c8:	2201      	movs	r2, #1
 80034ca:	21ff      	movs	r1, #255	; 0xff
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f004 fea7 	bl	8008220 <VL53L0X_WrByte>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80034da:	4313      	orrs	r3, r2
 80034dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2100      	movs	r1, #0
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f004 fe9b 	bl	8008220 <VL53L0X_WrByte>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80034f8:	f107 030f 	add.w	r3, r7, #15
 80034fc:	461a      	mov	r2, r3
 80034fe:	2191      	movs	r1, #145	; 0x91
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f004 ff0f 	bl	8008324 <VL53L0X_RdByte>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800350e:	4313      	orrs	r3, r2
 8003510:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800351c:	2201      	movs	r2, #1
 800351e:	2100      	movs	r1, #0
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f004 fe7d 	bl	8008220 <VL53L0X_WrByte>
 8003526:	4603      	mov	r3, r0
 8003528:	461a      	mov	r2, r3
 800352a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800352e:	4313      	orrs	r3, r2
 8003530:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003534:	2200      	movs	r2, #0
 8003536:	21ff      	movs	r1, #255	; 0xff
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f004 fe71 	bl	8008220 <VL53L0X_WrByte>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003546:	4313      	orrs	r3, r2
 8003548:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800354c:	2200      	movs	r2, #0
 800354e:	2180      	movs	r1, #128	; 0x80
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f004 fe65 	bl	8008220 <VL53L0X_WrByte>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800355e:	4313      	orrs	r3, r2
 8003560:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800356a:	e017      	b.n	800359c <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 800356c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003570:	2b00      	cmp	r3, #0
 8003572:	d118      	bne.n	80035a6 <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003578:	b29b      	uxth	r3, r3
 800357a:	2201      	movs	r2, #1
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fd62 	bl	8004048 <VL53L0X_SetLimitCheckEnable>
 8003584:	4603      	mov	r3, r0
 8003586:	461a      	mov	r2, r3
 8003588:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800358c:	4313      	orrs	r3, r2
 800358e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003596:	3301      	adds	r3, #1
 8003598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800359c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035a0:	2b05      	cmp	r3, #5
 80035a2:	dde3      	ble.n	800356c <VL53L0X_DataInit+0x1ac>
 80035a4:	e000      	b.n	80035a8 <VL53L0X_DataInit+0x1e8>
		else
			break;
 80035a6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80035a8:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80035b0:	2200      	movs	r2, #0
 80035b2:	2102      	movs	r1, #2
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fd47 	bl	8004048 <VL53L0X_SetLimitCheckEnable>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80035c0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80035c8:	2200      	movs	r2, #0
 80035ca:	2103      	movs	r1, #3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fd3b 	bl	8004048 <VL53L0X_SetLimitCheckEnable>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80035d8:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d107      	bne.n	80035f0 <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80035e0:	2200      	movs	r2, #0
 80035e2:	2104      	movs	r1, #4
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fd2f 	bl	8004048 <VL53L0X_SetLimitCheckEnable>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80035f0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80035f8:	2200      	movs	r2, #0
 80035fa:	2105      	movs	r1, #5
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fd23 	bl	8004048 <VL53L0X_SetLimitCheckEnable>
 8003602:	4603      	mov	r3, r0
 8003604:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003608:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800360c:	2b00      	cmp	r3, #0
 800360e:	d108      	bne.n	8003622 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003610:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8003614:	2100      	movs	r1, #0
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fdc4 	bl	80041a4 <VL53L0X_SetLimitCheckValue>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003622:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003626:	2b00      	cmp	r3, #0
 8003628:	d108      	bne.n	800363c <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800362a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800362e:	2101      	movs	r1, #1
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fdb7 	bl	80041a4 <VL53L0X_SetLimitCheckValue>
 8003636:	4603      	mov	r3, r0
 8003638:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800363c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003640:	2b00      	cmp	r3, #0
 8003642:	d108      	bne.n	8003656 <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003644:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003648:	2102      	movs	r1, #2
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fdaa 	bl	80041a4 <VL53L0X_SetLimitCheckValue>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003656:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800365e:	2200      	movs	r2, #0
 8003660:	2103      	movs	r1, #3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fd9e 	bl	80041a4 <VL53L0X_SetLimitCheckValue>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800366e:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10f      	bne.n	8003696 <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	22ff      	movs	r2, #255	; 0xff
 800367a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800367e:	22ff      	movs	r2, #255	; 0xff
 8003680:	2101      	movs	r1, #1
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f004 fdcc 	bl	8008220 <VL53L0X_WrByte>
 8003688:	4603      	mov	r3, r0
 800368a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 8003696:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 80036a6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3790      	adds	r7, #144	; 0x90
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	000970a4 	.word	0x000970a4
 80036b8:	044c0000 	.word	0x044c0000
 80036bc:	0003cccc 	.word	0x0003cccc
 80036c0:	02ee0000 	.word	0x02ee0000
 80036c4:	00074ccc 	.word	0x00074ccc
 80036c8:	02260000 	.word	0x02260000

080036cc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b0ac      	sub	sp, #176	; 0xb0
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80036da:	f107 031c 	add.w	r3, r7, #28
 80036de:	2278      	movs	r2, #120	; 0x78
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f004 fefe 	bl	80084e4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800370a:	2101      	movs	r1, #1
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f002 fb20 	bl	8005d52 <VL53L0X_get_info_from_device>
 8003712:	4603      	mov	r3, r0
 8003714:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800371e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003728:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800372c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003730:	2b01      	cmp	r3, #1
 8003732:	d80f      	bhi.n	8003754 <VL53L0X_StaticInit+0x88>
 8003734:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003738:	2b01      	cmp	r3, #1
 800373a:	d103      	bne.n	8003744 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 800373c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003740:	2b20      	cmp	r3, #32
 8003742:	d807      	bhi.n	8003754 <VL53L0X_StaticInit+0x88>
 8003744:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10f      	bne.n	800376c <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 800374c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003750:	2b0c      	cmp	r3, #12
 8003752:	d90b      	bls.n	800376c <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003754:	f107 0218 	add.w	r2, r7, #24
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f001 fd9f 	bl	80052a2 <VL53L0X_perform_ref_spad_management>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800376a:	e00a      	b.n	8003782 <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800376c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003770:	461a      	mov	r2, r3
 8003772:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f001 ff9f 	bl	80056ba <VL53L0X_set_reference_spads>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003782:	4b93      	ldr	r3, [pc, #588]	; (80039d0 <VL53L0X_StaticInit+0x304>)
 8003784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8003788:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800378c:	2b00      	cmp	r3, #0
 800378e:	d111      	bne.n	80037b4 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8003796:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800379a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80037a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037ac:	e002      	b.n	80037b4 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80037ae:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <VL53L0X_StaticInit+0x304>)
 80037b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 80037b4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 80037bc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f003 fe5d 	bl	8007480 <VL53L0X_load_tuning_settings>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80037cc:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80037d4:	2300      	movs	r3, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2304      	movs	r3, #4
 80037da:	2200      	movs	r2, #0
 80037dc:	2100      	movs	r1, #0
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f001 f994 	bl	8004b0c <VL53L0X_SetGpioConfig>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80037ea:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d121      	bne.n	8003836 <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80037f2:	2201      	movs	r2, #1
 80037f4:	21ff      	movs	r1, #255	; 0xff
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f004 fd12 	bl	8008220 <VL53L0X_WrByte>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003802:	f107 031a 	add.w	r3, r7, #26
 8003806:	461a      	mov	r2, r3
 8003808:	2184      	movs	r1, #132	; 0x84
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f004 fdb4 	bl	8008378 <VL53L0X_RdWord>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003818:	4313      	orrs	r3, r2
 800381a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800381e:	2200      	movs	r2, #0
 8003820:	21ff      	movs	r1, #255	; 0xff
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f004 fcfc 	bl	8008220 <VL53L0X_WrByte>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003830:	4313      	orrs	r3, r2
 8003832:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003836:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800383e:	8b7b      	ldrh	r3, [r7, #26]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	461a      	mov	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800384a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003852:	f107 031c 	add.w	r3, r7, #28
 8003856:	4619      	mov	r1, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8c8 	bl	80039ee <VL53L0X_GetDeviceParameters>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8003864:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8003868:	2b00      	cmp	r3, #0
 800386a:	d110      	bne.n	800388e <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800386c:	f107 0319 	add.w	r3, r7, #25
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9ac 	bl	8003bd0 <VL53L0X_GetFractionEnable>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 800387e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003886:	7e7a      	ldrb	r2, [r7, #25]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 800388e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8003892:	2b00      	cmp	r3, #0
 8003894:	d107      	bne.n	80038a6 <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3308      	adds	r3, #8
 800389a:	f107 011c 	add.w	r1, r7, #28
 800389e:	2278      	movs	r2, #120	; 0x78
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 fe11 	bl	80084c8 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80038a6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d111      	bne.n	80038d2 <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 80038ae:	f107 0319 	add.w	r3, r7, #25
 80038b2:	461a      	mov	r2, r3
 80038b4:	2101      	movs	r1, #1
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f004 fd34 	bl	8008324 <VL53L0X_RdByte>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80038c2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80038ca:	7e7a      	ldrb	r2, [r7, #25]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80038d2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d107      	bne.n	80038ea <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80038da:	2200      	movs	r2, #0
 80038dc:	2100      	movs	r1, #0
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9ea 	bl	8003cb8 <VL53L0X_SetSequenceStepEnable>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80038ea:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d107      	bne.n	8003902 <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80038f2:	2200      	movs	r2, #0
 80038f4:	2102      	movs	r1, #2
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9de 	bl	8003cb8 <VL53L0X_SetSequenceStepEnable>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003902:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2203      	movs	r2, #3
 800390e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003912:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 800391a:	f107 0313 	add.w	r3, r7, #19
 800391e:	461a      	mov	r2, r3
 8003920:	2100      	movs	r1, #0
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9b1 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800392e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003936:	7cfa      	ldrb	r2, [r7, #19]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800393e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003946:	f107 0313 	add.w	r3, r7, #19
 800394a:	461a      	mov	r2, r3
 800394c:	2101      	movs	r1, #1
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f99b 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 8003954:	4603      	mov	r3, r0
 8003956:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800395a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003962:	7cfa      	ldrb	r2, [r7, #19]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800396a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	461a      	mov	r2, r3
 8003978:	2103      	movs	r1, #3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f002 ff68 	bl	8006850 <get_sequence_step_timeout>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003986:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003996:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 800399e:	f107 030c 	add.w	r3, r7, #12
 80039a2:	461a      	mov	r2, r3
 80039a4:	2104      	movs	r1, #4
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f002 ff52 	bl	8006850 <get_sequence_step_timeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039b2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d103      	bne.n	80039c2 <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039c2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	37a8      	adds	r7, #168	; 0xa8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000034 	.word	0x20000034

080039d4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80039dc:	239d      	movs	r3, #157	; 0x9d
 80039de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80039e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	4619      	mov	r1, r3
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f8d3 	bl	8003bac <VL53L0X_GetDeviceMode>
 8003a06:	4603      	mov	r3, r0
 8003a08:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d107      	bne.n	8003a22 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fa99 	bl	8003f50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	3310      	adds	r3, #16
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 face 	bl	8003fe0 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003a44:	4603      	mov	r3, r0
 8003a46:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d107      	bne.n	8003a60 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	3314      	adds	r3, #20
 8003a54:	4619      	mov	r1, r3
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fc87 	bl	800336a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d134      	bne.n	8003ad2 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	e02a      	b.n	8003ac4 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d12a      	bne.n	8003acc <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	b299      	uxth	r1, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	461a      	mov	r2, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fbed 	bl	8004268 <VL53L0X_GetLimitCheckValue>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d117      	bne.n	8003ad0 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	b299      	uxth	r1, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	4413      	add	r3, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fb56 	bl	8004160 <VL53L0X_GetLimitCheckEnable>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	ddd1      	ble.n	8003a6e <VL53L0X_GetDeviceParameters+0x80>
 8003aca:	e002      	b.n	8003ad2 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003acc:	bf00      	nop
 8003ace:	e000      	b.n	8003ad2 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003ad0:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	3374      	adds	r3, #116	; 0x74
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fc4f 	bl	8004384 <VL53L0X_GetWrapAroundCheckEnable>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d107      	bne.n	8003b02 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f89b 	bl	8003c34 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003afe:	4603      	mov	r3, r0
 8003b00:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d120      	bne.n	8003b4c <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	e01a      	b.n	8003b46 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3310      	adds	r3, #16
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 8003b1c:	6839      	ldr	r1, [r7, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	330e      	adds	r3, #14
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	3316      	adds	r3, #22
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 8003b34:	6839      	ldr	r1, [r7, #0]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	3301      	adds	r3, #1
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	dde1      	ble.n	8003b10 <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	2b15      	cmp	r3, #21
 8003b6c:	bf8c      	ite	hi
 8003b6e:	2201      	movhi	r2, #1
 8003b70:	2200      	movls	r2, #0
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	2a00      	cmp	r2, #0
 8003b76:	d10e      	bne.n	8003b96 <VL53L0X_SetDeviceMode+0x3e>
 8003b78:	2201      	movs	r2, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <VL53L0X_SetDeviceMode+0x50>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf14      	ite	ne
 8003b84:	2301      	movne	r3, #1
 8003b86:	2300      	moveq	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	721a      	strb	r2, [r3, #8]
		break;
 8003b94:	e001      	b.n	8003b9a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003b96:	23f8      	movs	r3, #248	; 0xf8
 8003b98:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	0030000b 	.word	0x0030000b

08003bac <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7a1a      	ldrb	r2, [r3, #8]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	2109      	movs	r1, #9
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f004 fb9e 	bl	8008324 <VL53L0X_RdByte>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003c1c:	6839      	ldr	r1, [r7, #0]
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f003 faa9 	bl	8007176 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003c24:	4603      	mov	r3, r0
 8003c26:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003c42:	6839      	ldr	r1, [r7, #0]
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f003 fb69 	bl	800731c <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	70fb      	strb	r3, [r7, #3]
 8003c66:	4613      	mov	r3, r2
 8003c68:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003c6e:	78ba      	ldrb	r2, [r7, #2]
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f002 ffbe 	bl	8006bf6 <VL53L0X_set_vcsel_pulse_period>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	460b      	mov	r3, r1
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003c9c:	7afb      	ldrb	r3, [r7, #11]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f003 fa30 	bl	8007108 <VL53L0X_get_vcsel_pulse_period>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003cd4:	f107 030f 	add.w	r3, r7, #15
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2101      	movs	r1, #1
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f004 fb21 	bl	8008324 <VL53L0X_RdByte>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8003cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d15a      	bne.n	8003da8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8003cf2:	78bb      	ldrb	r3, [r7, #2]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d12b      	bne.n	8003d50 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d825      	bhi.n	8003d4a <VL53L0X_SetSequenceStepEnable+0x92>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d19 	.word	0x08003d19
 8003d08:	08003d23 	.word	0x08003d23
 8003d0c:	08003d2d 	.word	0x08003d2d
 8003d10:	08003d37 	.word	0x08003d37
 8003d14:	08003d41 	.word	0x08003d41
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003d18:	7dbb      	ldrb	r3, [r7, #22]
 8003d1a:	f043 0310 	orr.w	r3, r3, #16
 8003d1e:	75bb      	strb	r3, [r7, #22]
				break;
 8003d20:	e043      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003d22:	7dbb      	ldrb	r3, [r7, #22]
 8003d24:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003d28:	75bb      	strb	r3, [r7, #22]
				break;
 8003d2a:	e03e      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003d2c:	7dbb      	ldrb	r3, [r7, #22]
 8003d2e:	f043 0304 	orr.w	r3, r3, #4
 8003d32:	75bb      	strb	r3, [r7, #22]
				break;
 8003d34:	e039      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003d36:	7dbb      	ldrb	r3, [r7, #22]
 8003d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d3c:	75bb      	strb	r3, [r7, #22]
				break;
 8003d3e:	e034      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003d40:	7dbb      	ldrb	r3, [r7, #22]
 8003d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d46:	75bb      	strb	r3, [r7, #22]
				break;
 8003d48:	e02f      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003d4a:	23fc      	movs	r3, #252	; 0xfc
 8003d4c:	75fb      	strb	r3, [r7, #23]
 8003d4e:	e02c      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d825      	bhi.n	8003da2 <VL53L0X_SetSequenceStepEnable+0xea>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d71 	.word	0x08003d71
 8003d60:	08003d7b 	.word	0x08003d7b
 8003d64:	08003d85 	.word	0x08003d85
 8003d68:	08003d8f 	.word	0x08003d8f
 8003d6c:	08003d99 	.word	0x08003d99
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003d70:	7dbb      	ldrb	r3, [r7, #22]
 8003d72:	f023 0310 	bic.w	r3, r3, #16
 8003d76:	75bb      	strb	r3, [r7, #22]
				break;
 8003d78:	e017      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8003d7a:	7dbb      	ldrb	r3, [r7, #22]
 8003d7c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003d80:	75bb      	strb	r3, [r7, #22]
				break;
 8003d82:	e012      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003d84:	7dbb      	ldrb	r3, [r7, #22]
 8003d86:	f023 0304 	bic.w	r3, r3, #4
 8003d8a:	75bb      	strb	r3, [r7, #22]
				break;
 8003d8c:	e00d      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8003d8e:	7dbb      	ldrb	r3, [r7, #22]
 8003d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d94:	75bb      	strb	r3, [r7, #22]
				break;
 8003d96:	e008      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003d98:	7dbb      	ldrb	r3, [r7, #22]
 8003d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9e:	75bb      	strb	r3, [r7, #22]
				break;
 8003da0:	e003      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003da2:	23fc      	movs	r3, #252	; 0xfc
 8003da4:	75fb      	strb	r3, [r7, #23]
 8003da6:	e000      	b.n	8003daa <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8003da8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	7dba      	ldrb	r2, [r7, #22]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d01e      	beq.n	8003df0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d107      	bne.n	8003dca <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8003dba:	7dbb      	ldrb	r3, [r7, #22]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f004 fa2d 	bl	8008220 <VL53L0X_WrByte>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8003dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7dba      	ldrb	r2, [r7, #22]
 8003dd6:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8003dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003de8:	6939      	ldr	r1, [r7, #16]
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ff0f 	bl	8003c0e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	72fb      	strb	r3, [r7, #11]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003e18:	7afb      	ldrb	r3, [r7, #11]
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d836      	bhi.n	8003e8c <sequence_step_enabled+0x90>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <sequence_step_enabled+0x28>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e39 	.word	0x08003e39
 8003e28:	08003e4b 	.word	0x08003e4b
 8003e2c:	08003e5d 	.word	0x08003e5d
 8003e30:	08003e6f 	.word	0x08003e6f
 8003e34:	08003e81 	.word	0x08003e81
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003e38:	7abb      	ldrb	r3, [r7, #10]
 8003e3a:	111b      	asrs	r3, r3, #4
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	701a      	strb	r2, [r3, #0]
		break;
 8003e48:	e022      	b.n	8003e90 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8003e4a:	7abb      	ldrb	r3, [r7, #10]
 8003e4c:	10db      	asrs	r3, r3, #3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	701a      	strb	r2, [r3, #0]
		break;
 8003e5a:	e019      	b.n	8003e90 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003e5c:	7abb      	ldrb	r3, [r7, #10]
 8003e5e:	109b      	asrs	r3, r3, #2
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	701a      	strb	r2, [r3, #0]
		break;
 8003e6c:	e010      	b.n	8003e90 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8003e6e:	7abb      	ldrb	r3, [r7, #10]
 8003e70:	119b      	asrs	r3, r3, #6
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	701a      	strb	r2, [r3, #0]
		break;
 8003e7e:	e007      	b.n	8003e90 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003e80:	7abb      	ldrb	r3, [r7, #10]
 8003e82:	09db      	lsrs	r3, r3, #7
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	701a      	strb	r2, [r3, #0]
		break;
 8003e8a:	e001      	b.n	8003e90 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003e8c:	23fc      	movs	r3, #252	; 0xfc
 8003e8e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop

08003ea0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003eb2:	f107 030e 	add.w	r3, r7, #14
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2101      	movs	r1, #1
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f004 fa32 	bl	8008324 <VL53L0X_RdByte>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8003ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8003ecc:	7bba      	ldrb	r2, [r7, #14]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ff92 	bl	8003dfc <sequence_step_enabled>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d108      	bne.n	8003ef6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8003ee4:	7bba      	ldrb	r2, [r7, #14]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	3302      	adds	r3, #2
 8003eea:	2101      	movs	r1, #1
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff85 	bl	8003dfc <sequence_step_enabled>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d108      	bne.n	8003f10 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8003efe:	7bba      	ldrb	r2, [r7, #14]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	3301      	adds	r3, #1
 8003f04:	2102      	movs	r1, #2
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ff78 	bl	8003dfc <sequence_step_enabled>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d108      	bne.n	8003f2a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8003f18:	7bba      	ldrb	r2, [r7, #14]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	3303      	adds	r3, #3
 8003f1e:	2103      	movs	r1, #3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff6b 	bl	8003dfc <sequence_step_enabled>
 8003f26:	4603      	mov	r3, r0
 8003f28:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d108      	bne.n	8003f44 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8003f32:	7bba      	ldrb	r2, [r7, #14]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	3304      	adds	r3, #4
 8003f38:	2104      	movs	r1, #4
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ff5e 	bl	8003dfc <sequence_step_enabled>
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	461a      	mov	r2, r3
 8003f64:	21f8      	movs	r1, #248	; 0xf8
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f004 fa06 	bl	8008378 <VL53L0X_RdWord>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8003f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d108      	bne.n	8003f8a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8003f78:	f107 0308 	add.w	r3, r7, #8
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2104      	movs	r1, #4
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f004 fa31 	bl	80083e8 <VL53L0X_RdDWord>
 8003f86:	4603      	mov	r3, r0
 8003f88:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10c      	bne.n	8003fac <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8003f92:	89bb      	ldrh	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	89ba      	ldrh	r2, [r7, #12]
 8003f9c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7d1b      	ldrb	r3, [r3, #20]
 8003fca:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	7bba      	ldrb	r2, [r7, #14]
 8003fd0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8003fee:	f107 030e 	add.w	r3, r7, #14
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2120      	movs	r1, #32
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f004 f9be 	bl	8008378 <VL53L0X_RdWord>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004000:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d118      	bne.n	800403a <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	751a      	strb	r2, [r3, #20]
 8004020:	e00b      	b.n	800403a <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800403a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004058:	2300      	movs	r3, #0
 800405a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004068:	887b      	ldrh	r3, [r7, #2]
 800406a:	2b05      	cmp	r3, #5
 800406c:	d902      	bls.n	8004074 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800406e:	23fc      	movs	r3, #252	; 0xfc
 8004070:	75fb      	strb	r3, [r7, #23]
 8004072:	e05b      	b.n	800412c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004074:	787b      	ldrb	r3, [r7, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8004082:	2301      	movs	r3, #1
 8004084:	73bb      	strb	r3, [r7, #14]
 8004086:	e00a      	b.n	800409e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004088:	887b      	ldrh	r3, [r7, #2]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	330a      	adds	r3, #10
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800409e:	887b      	ldrh	r3, [r7, #2]
 80040a0:	2b05      	cmp	r3, #5
 80040a2:	d841      	bhi.n	8004128 <VL53L0X_SetLimitCheckEnable+0xe0>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <VL53L0X_SetLimitCheckEnable+0x64>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040c5 	.word	0x080040c5
 80040b0:	080040cf 	.word	0x080040cf
 80040b4:	080040e5 	.word	0x080040e5
 80040b8:	080040ef 	.word	0x080040ef
 80040bc:	080040f9 	.word	0x080040f9
 80040c0:	08004111 	.word	0x08004111

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	7bfa      	ldrb	r2, [r7, #15]
 80040c8:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80040cc:	e02e      	b.n	800412c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	2144      	movs	r1, #68	; 0x44
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f004 f8c5 	bl	8008268 <VL53L0X_WrWord>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]

			break;
 80040e2:	e023      	b.n	800412c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80040ec:	e01e      	b.n	800412c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80040f6:	e019      	b.n	800412c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80040fe:	7b7b      	ldrb	r3, [r7, #13]
 8004100:	22fe      	movs	r2, #254	; 0xfe
 8004102:	2160      	movs	r1, #96	; 0x60
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f004 f8d9 	bl	80082bc <VL53L0X_UpdateByte>
 800410a:	4603      	mov	r3, r0
 800410c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800410e:	e00d      	b.n	800412c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004110:	7bbb      	ldrb	r3, [r7, #14]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004116:	7b7b      	ldrb	r3, [r7, #13]
 8004118:	22ef      	movs	r2, #239	; 0xef
 800411a:	2160      	movs	r1, #96	; 0x60
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f004 f8cd 	bl	80082bc <VL53L0X_UpdateByte>
 8004122:	4603      	mov	r3, r0
 8004124:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004126:	e001      	b.n	800412c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004128:	23fc      	movs	r3, #252	; 0xfc
 800412a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800412c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10f      	bne.n	8004154 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004134:	787b      	ldrb	r3, [r7, #1]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800413a:	887b      	ldrh	r3, [r7, #2]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2020 	strb.w	r2, [r3, #32]
 8004146:	e005      	b.n	8004154 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	460b      	mov	r3, r1
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004172:	897b      	ldrh	r3, [r7, #10]
 8004174:	2b05      	cmp	r3, #5
 8004176:	d905      	bls.n	8004184 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004178:	23fc      	movs	r3, #252	; 0xfc
 800417a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e008      	b.n	8004196 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004184:	897b      	ldrh	r3, [r7, #10]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800418e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7dba      	ldrb	r2, [r7, #22]
 8004194:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800419a:	4618      	mov	r0, r3
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	460b      	mov	r3, r1
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80041c2:	7dbb      	ldrb	r3, [r7, #22]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d107      	bne.n	80041d8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80041c8:	897b      	ldrh	r3, [r7, #10]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	330a      	adds	r3, #10
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	e040      	b.n	800425a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80041d8:	897b      	ldrh	r3, [r7, #10]
 80041da:	2b05      	cmp	r3, #5
 80041dc:	d830      	bhi.n	8004240 <VL53L0X_SetLimitCheckValue+0x9c>
 80041de:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <VL53L0X_SetLimitCheckValue+0x40>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	080041fd 	.word	0x080041fd
 80041e8:	08004205 	.word	0x08004205
 80041ec:	0800421b 	.word	0x0800421b
 80041f0:	08004223 	.word	0x08004223
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800422b 	.word	0x0800422b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004202:	e01f      	b.n	8004244 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004208:	b29b      	uxth	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	2144      	movs	r1, #68	; 0x44
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f004 f82a 	bl	8008268 <VL53L0X_WrWord>
 8004214:	4603      	mov	r3, r0
 8004216:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004218:	e014      	b.n	8004244 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004220:	e010      	b.n	8004244 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004228:	e00c      	b.n	8004244 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	2164      	movs	r1, #100	; 0x64
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f004 f817 	bl	8008268 <VL53L0X_WrWord>
 800423a:	4603      	mov	r3, r0
 800423c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800423e:	e001      	b.n	8004244 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004240:	23fc      	movs	r3, #252	; 0xfc
 8004242:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004244:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d106      	bne.n	800425a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800424c:	897b      	ldrh	r3, [r7, #10]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	330a      	adds	r3, #10
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800425a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop

08004268 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	460b      	mov	r3, r1
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004276:	2300      	movs	r3, #0
 8004278:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	2b05      	cmp	r3, #5
 8004282:	d847      	bhi.n	8004314 <VL53L0X_GetLimitCheckValue+0xac>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <VL53L0X_GetLimitCheckValue+0x24>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042a5 	.word	0x080042a5
 8004290:	080042b1 	.word	0x080042b1
 8004294:	080042d7 	.word	0x080042d7
 8004298:	080042e3 	.word	0x080042e3
 800429c:	080042ef 	.word	0x080042ef
 80042a0:	080042ef 	.word	0x080042ef

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	77bb      	strb	r3, [r7, #30]
		break;
 80042ae:	e033      	b.n	8004318 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80042b0:	f107 0316 	add.w	r3, r7, #22
 80042b4:	461a      	mov	r2, r3
 80042b6:	2144      	movs	r1, #68	; 0x44
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f004 f85d 	bl	8008378 <VL53L0X_RdWord>
 80042be:	4603      	mov	r3, r0
 80042c0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80042c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80042ca:	8afb      	ldrh	r3, [r7, #22]
 80042cc:	025b      	lsls	r3, r3, #9
 80042ce:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80042d0:	2301      	movs	r3, #1
 80042d2:	77bb      	strb	r3, [r7, #30]
		break;
 80042d4:	e020      	b.n	8004318 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	77bb      	strb	r3, [r7, #30]
		break;
 80042e0:	e01a      	b.n	8004318 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	77bb      	strb	r3, [r7, #30]
		break;
 80042ec:	e014      	b.n	8004318 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80042ee:	f107 0316 	add.w	r3, r7, #22
 80042f2:	461a      	mov	r2, r3
 80042f4:	2164      	movs	r1, #100	; 0x64
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f004 f83e 	bl	8008378 <VL53L0X_RdWord>
 80042fc:	4603      	mov	r3, r0
 80042fe:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004300:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004308:	8afb      	ldrh	r3, [r7, #22]
 800430a:	025b      	lsls	r3, r3, #9
 800430c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	77bb      	strb	r3, [r7, #30]
		break;
 8004312:	e001      	b.n	8004318 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004314:	23fc      	movs	r3, #252	; 0xfc
 8004316:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004318:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d12a      	bne.n	8004376 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004320:	7fbb      	ldrb	r3, [r7, #30]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d124      	bne.n	8004370 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d110      	bne.n	800434e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	330a      	adds	r3, #10
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004340:	897b      	ldrh	r3, [r7, #10]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2020 	strb.w	r2, [r3, #32]
 800434c:	e013      	b.n	8004376 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004354:	897b      	ldrh	r3, [r7, #10]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	330a      	adds	r3, #10
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004362:	897b      	ldrh	r3, [r7, #10]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2020 	strb.w	r2, [r3, #32]
 800436e:	e002      	b.n	8004376 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004376:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop

08004384 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8004392:	f107 030e 	add.w	r3, r7, #14
 8004396:	461a      	mov	r2, r3
 8004398:	2101      	movs	r1, #1
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f003 ffc2 	bl	8008324 <VL53L0X_RdByte>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80043a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10e      	bne.n	80043ca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80043ac:	7bba      	ldrb	r2, [r7, #14]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 80043b4:	7bbb      	ldrb	r3, [r7, #14]
 80043b6:	b25b      	sxtb	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	da03      	bge.n	80043c4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	e002      	b.n	80043ca <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80043ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80043dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80043f4:	f107 030e 	add.w	r3, r7, #14
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fbd6 	bl	8003bac <VL53L0X_GetDeviceMode>
 8004400:	4603      	mov	r3, r0
 8004402:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 8004404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d107      	bne.n	800441c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800440c:	7bbb      	ldrb	r3, [r7, #14]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d104      	bne.n	800441c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f924 	bl	8004660 <VL53L0X_StartMeasurement>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800441c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f001 fbca 	bl	8005bbe <VL53L0X_measurement_poll_for_completion>
 800442a:	4603      	mov	r3, r0
 800442c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800442e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004436:	7bbb      	ldrb	r3, [r7, #14]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d103      	bne.n	8004444 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2203      	movs	r2, #3
 8004440:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8004444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800445c:	2300      	movs	r3, #0
 800445e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8004460:	2301      	movs	r3, #1
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f001 fb6c 	bl	8005b44 <VL53L0X_perform_ref_calibration>
 800446c:	4603      	mov	r3, r0
 800446e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8004470:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004488:	2300      	movs	r3, #0
 800448a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8004492:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 8004494:	7dbb      	ldrb	r3, [r7, #22]
 8004496:	2b03      	cmp	r3, #3
 8004498:	f000 8093 	beq.w	80045c2 <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 800449c:	2b03      	cmp	r3, #3
 800449e:	f300 80d6 	bgt.w	800464e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d002      	beq.n	80044ac <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d047      	beq.n	800453a <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 80044aa:	e0d0      	b.n	800464e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	f107 0210 	add.w	r2, r7, #16
 80044b4:	2101      	movs	r1, #1
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fc4c 	bl	8004d54 <VL53L0X_GetInterruptThresholds>
 80044bc:	4603      	mov	r3, r0
 80044be:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80044c6:	f240 80bd 	bls.w	8004644 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 80044ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 80b8 	bne.w	8004644 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d006      	beq.n	80044e8 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 80044da:	4960      	ldr	r1, [pc, #384]	; (800465c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f002 ffcf 	bl	8007480 <VL53L0X_load_tuning_settings>
 80044e2:	4603      	mov	r3, r0
 80044e4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80044e6:	e0ad      	b.n	8004644 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80044e8:	2204      	movs	r2, #4
 80044ea:	21ff      	movs	r1, #255	; 0xff
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f003 fe97 	bl	8008220 <VL53L0X_WrByte>
 80044f2:	4603      	mov	r3, r0
 80044f4:	461a      	mov	r2, r3
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2170      	movs	r1, #112	; 0x70
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f003 fe8d 	bl	8008220 <VL53L0X_WrByte>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	4313      	orrs	r3, r2
 800450e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004510:	2200      	movs	r2, #0
 8004512:	21ff      	movs	r1, #255	; 0xff
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f003 fe83 	bl	8008220 <VL53L0X_WrByte>
 800451a:	4603      	mov	r3, r0
 800451c:	461a      	mov	r2, r3
 800451e:	7dfb      	ldrb	r3, [r7, #23]
 8004520:	4313      	orrs	r3, r2
 8004522:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004524:	2200      	movs	r2, #0
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f003 fe79 	bl	8008220 <VL53L0X_WrByte>
 800452e:	4603      	mov	r3, r0
 8004530:	461a      	mov	r2, r3
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	4313      	orrs	r3, r2
 8004536:	75fb      	strb	r3, [r7, #23]
		break;
 8004538:	e084      	b.n	8004644 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800453a:	f107 030c 	add.w	r3, r7, #12
 800453e:	f107 0210 	add.w	r2, r7, #16
 8004542:	2101      	movs	r1, #1
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fc05 	bl	8004d54 <VL53L0X_GetInterruptThresholds>
 800454a:	4603      	mov	r3, r0
 800454c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d079      	beq.n	8004648 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 8004554:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d175      	bne.n	8004648 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d006      	beq.n	8004570 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004562:	493e      	ldr	r1, [pc, #248]	; (800465c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f002 ff8b 	bl	8007480 <VL53L0X_load_tuning_settings>
 800456a:	4603      	mov	r3, r0
 800456c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800456e:	e06b      	b.n	8004648 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004570:	2204      	movs	r2, #4
 8004572:	21ff      	movs	r1, #255	; 0xff
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f003 fe53 	bl	8008220 <VL53L0X_WrByte>
 800457a:	4603      	mov	r3, r0
 800457c:	461a      	mov	r2, r3
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	4313      	orrs	r3, r2
 8004582:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004584:	2200      	movs	r2, #0
 8004586:	2170      	movs	r1, #112	; 0x70
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f003 fe49 	bl	8008220 <VL53L0X_WrByte>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	4313      	orrs	r3, r2
 8004596:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004598:	2200      	movs	r2, #0
 800459a:	21ff      	movs	r1, #255	; 0xff
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f003 fe3f 	bl	8008220 <VL53L0X_WrByte>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80045ac:	2200      	movs	r2, #0
 80045ae:	2180      	movs	r1, #128	; 0x80
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f003 fe35 	bl	8008220 <VL53L0X_WrByte>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	4313      	orrs	r3, r2
 80045be:	75fb      	strb	r3, [r7, #23]
		break;
 80045c0:	e042      	b.n	8004648 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80045c2:	f107 030c 	add.w	r3, r7, #12
 80045c6:	f107 0210 	add.w	r2, r7, #16
 80045ca:	2101      	movs	r1, #1
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fbc1 	bl	8004d54 <VL53L0X_GetInterruptThresholds>
 80045d2:	4603      	mov	r3, r0
 80045d4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 80045d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d136      	bne.n	800464c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d006      	beq.n	80045f2 <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 80045e4:	491d      	ldr	r1, [pc, #116]	; (800465c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f002 ff4a 	bl	8007480 <VL53L0X_load_tuning_settings>
 80045ec:	4603      	mov	r3, r0
 80045ee:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80045f0:	e02c      	b.n	800464c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80045f2:	2204      	movs	r2, #4
 80045f4:	21ff      	movs	r1, #255	; 0xff
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f003 fe12 	bl	8008220 <VL53L0X_WrByte>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	4313      	orrs	r3, r2
 8004604:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004606:	2200      	movs	r2, #0
 8004608:	2170      	movs	r1, #112	; 0x70
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f003 fe08 	bl	8008220 <VL53L0X_WrByte>
 8004610:	4603      	mov	r3, r0
 8004612:	461a      	mov	r2, r3
 8004614:	7dfb      	ldrb	r3, [r7, #23]
 8004616:	4313      	orrs	r3, r2
 8004618:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800461a:	2200      	movs	r2, #0
 800461c:	21ff      	movs	r1, #255	; 0xff
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f003 fdfe 	bl	8008220 <VL53L0X_WrByte>
 8004624:	4603      	mov	r3, r0
 8004626:	461a      	mov	r2, r3
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	4313      	orrs	r3, r2
 800462c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800462e:	2200      	movs	r2, #0
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f003 fdf4 	bl	8008220 <VL53L0X_WrByte>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	4313      	orrs	r3, r2
 8004640:	75fb      	strb	r3, [r7, #23]
		break;
 8004642:	e003      	b.n	800464c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 8004644:	bf00      	nop
 8004646:	e002      	b.n	800464e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8004648:	bf00      	nop
 800464a:	e000      	b.n	800464e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 800464c:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800464e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000128 	.word	0x20000128

08004660 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004668:	2300      	movs	r3, #0
 800466a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004670:	f107 030e 	add.w	r3, r7, #14
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fa98 	bl	8003bac <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800467c:	2201      	movs	r2, #1
 800467e:	2180      	movs	r1, #128	; 0x80
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f003 fdcd 	bl	8008220 <VL53L0X_WrByte>
 8004686:	4603      	mov	r3, r0
 8004688:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800468a:	2201      	movs	r2, #1
 800468c:	21ff      	movs	r1, #255	; 0xff
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f003 fdc6 	bl	8008220 <VL53L0X_WrByte>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004698:	2200      	movs	r2, #0
 800469a:	2100      	movs	r1, #0
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f003 fdbf 	bl	8008220 <VL53L0X_WrByte>
 80046a2:	4603      	mov	r3, r0
 80046a4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 80046ac:	461a      	mov	r2, r3
 80046ae:	2191      	movs	r1, #145	; 0x91
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f003 fdb5 	bl	8008220 <VL53L0X_WrByte>
 80046b6:	4603      	mov	r3, r0
 80046b8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80046ba:	2201      	movs	r2, #1
 80046bc:	2100      	movs	r1, #0
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f003 fdae 	bl	8008220 <VL53L0X_WrByte>
 80046c4:	4603      	mov	r3, r0
 80046c6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80046c8:	2200      	movs	r2, #0
 80046ca:	21ff      	movs	r1, #255	; 0xff
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f003 fda7 	bl	8008220 <VL53L0X_WrByte>
 80046d2:	4603      	mov	r3, r0
 80046d4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80046d6:	2200      	movs	r2, #0
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f003 fda0 	bl	8008220 <VL53L0X_WrByte>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80046e4:	7bbb      	ldrb	r3, [r7, #14]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d054      	beq.n	8004794 <VL53L0X_StartMeasurement+0x134>
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	dc6c      	bgt.n	80047c8 <VL53L0X_StartMeasurement+0x168>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <VL53L0X_StartMeasurement+0x98>
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d034      	beq.n	8004760 <VL53L0X_StartMeasurement+0x100>
 80046f6:	e067      	b.n	80047c8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80046f8:	2201      	movs	r2, #1
 80046fa:	2100      	movs	r1, #0
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f003 fd8f 	bl	8008220 <VL53L0X_WrByte>
 8004702:	4603      	mov	r3, r0
 8004704:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800470a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d15d      	bne.n	80047ce <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800471c:	f107 030d 	add.w	r3, r7, #13
 8004720:	461a      	mov	r2, r3
 8004722:	2100      	movs	r1, #0
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f003 fdfd 	bl	8008324 <VL53L0X_RdByte>
 800472a:	4603      	mov	r3, r0
 800472c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	3301      	adds	r3, #1
 8004732:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8004734:	7b7a      	ldrb	r2, [r7, #13]
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	4013      	ands	r3, r2
 800473a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	429a      	cmp	r2, r3
 8004740:	d107      	bne.n	8004752 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8004742:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004750:	d3e1      	bcc.n	8004716 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004758:	d339      	bcc.n	80047ce <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800475a:	23f9      	movs	r3, #249	; 0xf9
 800475c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800475e:	e036      	b.n	80047ce <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004760:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004768:	2101      	movs	r1, #1
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fe86 	bl	800447c <VL53L0X_CheckAndLoadInterruptSettings>
 8004770:	4603      	mov	r3, r0
 8004772:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004774:	2202      	movs	r2, #2
 8004776:	2100      	movs	r1, #0
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f003 fd51 	bl	8008220 <VL53L0X_WrByte>
 800477e:	4603      	mov	r3, r0
 8004780:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004782:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d123      	bne.n	80047d2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2204      	movs	r2, #4
 800478e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8004792:	e01e      	b.n	80047d2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800479c:	2101      	movs	r1, #1
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff fe6c 	bl	800447c <VL53L0X_CheckAndLoadInterruptSettings>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80047a8:	2204      	movs	r2, #4
 80047aa:	2100      	movs	r1, #0
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f003 fd37 	bl	8008220 <VL53L0X_WrByte>
 80047b2:	4603      	mov	r3, r0
 80047b4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80047b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2204      	movs	r2, #4
 80047c2:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 80047c6:	e006      	b.n	80047d6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80047c8:	23f8      	movs	r3, #248	; 0xf8
 80047ca:	75fb      	strb	r3, [r7, #23]
 80047cc:	e004      	b.n	80047d8 <VL53L0X_StartMeasurement+0x178>
		break;
 80047ce:	bf00      	nop
 80047d0:	e002      	b.n	80047d8 <VL53L0X_StartMeasurement+0x178>
		break;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <VL53L0X_StartMeasurement+0x178>
		break;
 80047d6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80047d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80047f8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80047fa:	7bbb      	ldrb	r3, [r7, #14]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d112      	bne.n	8004826 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004800:	f107 0308 	add.w	r3, r7, #8
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fb1a 	bl	8004e40 <VL53L0X_GetInterruptMaskStatus>
 800480c:	4603      	mov	r3, r0
 800480e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b04      	cmp	r3, #4
 8004814:	d103      	bne.n	800481e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e01c      	b.n	8004858 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e018      	b.n	8004858 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004826:	f107 030d 	add.w	r3, r7, #13
 800482a:	461a      	mov	r2, r3
 800482c:	2114      	movs	r1, #20
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f003 fd78 	bl	8008324 <VL53L0X_RdByte>
 8004834:	4603      	mov	r3, r0
 8004836:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8004840:	7b7b      	ldrb	r3, [r7, #13]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	e002      	b.n	8004858 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004864:	b5b0      	push	{r4, r5, r7, lr}
 8004866:	b096      	sub	sp, #88	; 0x58
 8004868:	af02      	add	r7, sp, #8
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800486e:	2300      	movs	r3, #0
 8004870:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004874:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004878:	230c      	movs	r3, #12
 800487a:	2114      	movs	r1, #20
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f003 fca3 	bl	80081c8 <VL53L0X_ReadMulti>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004888:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800488c:	2b00      	cmp	r3, #0
 800488e:	f040 80d1 	bne.w	8004a34 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2200      	movs	r2, #0
 8004896:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 800489e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80048ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	025b      	lsls	r3, r3, #9
 80048d0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 80048d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048dc:	b29b      	uxth	r3, r3
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	4413      	add	r3, r2
 80048ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80048ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048f2:	025b      	lsls	r3, r3, #9
 80048f4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80048fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	b29a      	uxth	r2, r3
 8004904:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004908:	b29b      	uxth	r3, r3
 800490a:	4413      	add	r3, r2
 800490c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004916:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004918:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800491c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8004926:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 800492e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004932:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004938:	d046      	beq.n	80049c8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800493a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800493c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004948:	4a57      	ldr	r2, [pc, #348]	; (8004aa8 <VL53L0X_GetRangingMeasurementData+0x244>)
 800494a:	fb82 1203 	smull	r1, r2, r2, r3
 800494e:	1192      	asrs	r2, r2, #6
 8004950:	17db      	asrs	r3, r3, #31
 8004952:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004954:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	7d1b      	ldrb	r3, [r3, #20]
 8004962:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004966:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800496a:	2b00      	cmp	r3, #0
 800496c:	d02c      	beq.n	80049c8 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800496e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004970:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004974:	fb02 f303 	mul.w	r3, r2, r3
 8004978:	121a      	asrs	r2, r3, #8
					<= 0) {
 800497a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800497c:	429a      	cmp	r2, r3
 800497e:	d10d      	bne.n	800499c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8004980:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8004988:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800498c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004990:	e016      	b.n	80049c0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8004992:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004996:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800499a:	e011      	b.n	80049c0 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800499c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049a2:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80049a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049a8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80049b0:	121b      	asrs	r3, r3, #8
 80049b2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80049b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80049bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80049c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80049c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80049d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80049dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	019b      	lsls	r3, r3, #6
 80049e4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	75da      	strb	r2, [r3, #23]
 80049ea:	e006      	b.n	80049fa <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80049f2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80049fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80049fe:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004a02:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f003 f985 	bl	8007d20 <VL53L0X_get_pal_range_status>
 8004a16:	4603      	mov	r3, r0
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004a24:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004a2c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004a34:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d12f      	bne.n	8004a9c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f107 040c 	add.w	r4, r7, #12
 8004a42:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8004a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004a56:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004a64:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004a6a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004a70:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004a76:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004a7c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004a82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8004a8c:	f107 050c 	add.w	r5, r7, #12
 8004a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a9c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3750      	adds	r7, #80	; 0x50
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa8:	10624dd3 	.word	0x10624dd3

08004aac <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004aba:	2100      	movs	r1, #0
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff f84b 	bl	8003b58 <VL53L0X_SetDeviceMode>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d104      	bne.n	8004ad8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fc8a 	bl	80043e8 <VL53L0X_PerformSingleMeasurement>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff febe 	bl	8004864 <VL53L0X_GetRangingMeasurementData>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004af4:	2100      	movs	r1, #0
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f962 	bl	8004dc0 <VL53L0X_ClearInterruptMask>
 8004afc:	4603      	mov	r3, r0
 8004afe:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	4608      	mov	r0, r1
 8004b16:	4611      	mov	r1, r2
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	70fb      	strb	r3, [r7, #3]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	70bb      	strb	r3, [r7, #2]
 8004b22:	4613      	mov	r3, r2
 8004b24:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004b30:	23f6      	movs	r3, #246	; 0xf6
 8004b32:	73fb      	strb	r3, [r7, #15]
 8004b34:	e107      	b.n	8004d46 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004b36:	78bb      	ldrb	r3, [r7, #2]
 8004b38:	2b14      	cmp	r3, #20
 8004b3a:	d110      	bne.n	8004b5e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004b3c:	7e3b      	ldrb	r3, [r7, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004b42:	2310      	movs	r3, #16
 8004b44:	73bb      	strb	r3, [r7, #14]
 8004b46:	e001      	b.n	8004b4c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004b4c:	7bbb      	ldrb	r3, [r7, #14]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2184      	movs	r1, #132	; 0x84
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f003 fb64 	bl	8008220 <VL53L0X_WrByte>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	73fb      	strb	r3, [r7, #15]
 8004b5c:	e0f3      	b.n	8004d46 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004b5e:	78bb      	ldrb	r3, [r7, #2]
 8004b60:	2b15      	cmp	r3, #21
 8004b62:	f040 8097 	bne.w	8004c94 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004b66:	2201      	movs	r2, #1
 8004b68:	21ff      	movs	r1, #255	; 0xff
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f003 fb58 	bl	8008220 <VL53L0X_WrByte>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461a      	mov	r2, r3
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f003 fb4e 	bl	8008220 <VL53L0X_WrByte>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004b8e:	2200      	movs	r2, #0
 8004b90:	21ff      	movs	r1, #255	; 0xff
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f003 fb44 	bl	8008220 <VL53L0X_WrByte>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	2180      	movs	r1, #128	; 0x80
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f003 fb3a 	bl	8008220 <VL53L0X_WrByte>
 8004bac:	4603      	mov	r3, r0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	2185      	movs	r1, #133	; 0x85
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f003 fb30 	bl	8008220 <VL53L0X_WrByte>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004bca:	2204      	movs	r2, #4
 8004bcc:	21ff      	movs	r1, #255	; 0xff
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f003 fb26 	bl	8008220 <VL53L0X_WrByte>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004bde:	2200      	movs	r2, #0
 8004be0:	21cd      	movs	r1, #205	; 0xcd
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f003 fb1c 	bl	8008220 <VL53L0X_WrByte>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004bf2:	2211      	movs	r2, #17
 8004bf4:	21cc      	movs	r1, #204	; 0xcc
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f003 fb12 	bl	8008220 <VL53L0X_WrByte>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	461a      	mov	r2, r3
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004c06:	2207      	movs	r2, #7
 8004c08:	21ff      	movs	r1, #255	; 0xff
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f003 fb08 	bl	8008220 <VL53L0X_WrByte>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	21be      	movs	r1, #190	; 0xbe
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f003 fafe 	bl	8008220 <VL53L0X_WrByte>
 8004c24:	4603      	mov	r3, r0
 8004c26:	461a      	mov	r2, r3
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004c2e:	2206      	movs	r2, #6
 8004c30:	21ff      	movs	r1, #255	; 0xff
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f003 faf4 	bl	8008220 <VL53L0X_WrByte>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004c42:	2209      	movs	r2, #9
 8004c44:	21cc      	movs	r1, #204	; 0xcc
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f003 faea 	bl	8008220 <VL53L0X_WrByte>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	461a      	mov	r2, r3
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004c56:	2200      	movs	r2, #0
 8004c58:	21ff      	movs	r1, #255	; 0xff
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f003 fae0 	bl	8008220 <VL53L0X_WrByte>
 8004c60:	4603      	mov	r3, r0
 8004c62:	461a      	mov	r2, r3
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	21ff      	movs	r1, #255	; 0xff
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f003 fad6 	bl	8008220 <VL53L0X_WrByte>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2100      	movs	r1, #0
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f003 facc 	bl	8008220 <VL53L0X_WrByte>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	73fb      	strb	r3, [r7, #15]
 8004c92:	e058      	b.n	8004d46 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d121      	bne.n	8004ce0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8004c9c:	787b      	ldrb	r3, [r7, #1]
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d81b      	bhi.n	8004cda <VL53L0X_SetGpioConfig+0x1ce>
 8004ca2:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <VL53L0X_SetGpioConfig+0x19c>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004cbd 	.word	0x08004cbd
 8004cac:	08004cc3 	.word	0x08004cc3
 8004cb0:	08004cc9 	.word	0x08004cc9
 8004cb4:	08004ccf 	.word	0x08004ccf
 8004cb8:	08004cd5 	.word	0x08004cd5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	73bb      	strb	r3, [r7, #14]
				break;
 8004cc0:	e00f      	b.n	8004ce2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	73bb      	strb	r3, [r7, #14]
				break;
 8004cc6:	e00c      	b.n	8004ce2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	73bb      	strb	r3, [r7, #14]
				break;
 8004ccc:	e009      	b.n	8004ce2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	73bb      	strb	r3, [r7, #14]
				break;
 8004cd2:	e006      	b.n	8004ce2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	73bb      	strb	r3, [r7, #14]
				break;
 8004cd8:	e003      	b.n	8004ce2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8004cda:	23f5      	movs	r3, #245	; 0xf5
 8004cdc:	73fb      	strb	r3, [r7, #15]
 8004cde:	e000      	b.n	8004ce2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8004ce0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8004ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d107      	bne.n	8004cfa <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8004cea:	7bbb      	ldrb	r3, [r7, #14]
 8004cec:	461a      	mov	r2, r3
 8004cee:	210a      	movs	r1, #10
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f003 fa95 	bl	8008220 <VL53L0X_WrByte>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10f      	bne.n	8004d22 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004d02:	7e3b      	ldrb	r3, [r7, #24]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	73bb      	strb	r3, [r7, #14]
 8004d0c:	e001      	b.n	8004d12 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8004d0e:	2310      	movs	r3, #16
 8004d10:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004d12:	7bbb      	ldrb	r3, [r7, #14]
 8004d14:	22ef      	movs	r2, #239	; 0xef
 8004d16:	2184      	movs	r1, #132	; 0x84
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f003 facf 	bl	80082bc <VL53L0X_UpdateByte>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d103      	bne.n	8004d32 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	787a      	ldrb	r2, [r7, #1]
 8004d2e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f83f 	bl	8004dc0 <VL53L0X_ClearInterruptMask>
 8004d42:	4603      	mov	r3, r0
 8004d44:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop

08004d54 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	460b      	mov	r3, r1
 8004d62:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8004d68:	f107 0314 	add.w	r3, r7, #20
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	210e      	movs	r1, #14
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f003 fb01 	bl	8008378 <VL53L0X_RdWord>
 8004d76:	4603      	mov	r3, r0
 8004d78:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004d7a:	8abb      	ldrh	r3, [r7, #20]
 8004d7c:	045b      	lsls	r3, r3, #17
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <VL53L0X_GetInterruptThresholds+0x68>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10f      	bne.n	8004db0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004d90:	f107 0314 	add.w	r3, r7, #20
 8004d94:	461a      	mov	r2, r3
 8004d96:	210c      	movs	r1, #12
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f003 faed 	bl	8008378 <VL53L0X_RdWord>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004da2:	8abb      	ldrh	r3, [r7, #20]
 8004da4:	045b      	lsls	r3, r3, #17
 8004da6:	461a      	mov	r2, r3
 8004da8:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <VL53L0X_GetInterruptThresholds+0x68>)
 8004daa:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	1ffe0000 	.word	0x1ffe0000

08004dc0 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	210b      	movs	r1, #11
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f003 fa22 	bl	8008220 <VL53L0X_WrByte>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004de0:	2200      	movs	r2, #0
 8004de2:	210b      	movs	r1, #11
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f003 fa1b 	bl	8008220 <VL53L0X_WrByte>
 8004dea:	4603      	mov	r3, r0
 8004dec:	461a      	mov	r2, r3
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004df4:	f107 030d 	add.w	r3, r7, #13
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2113      	movs	r1, #19
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f003 fa91 	bl	8008324 <VL53L0X_RdByte>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461a      	mov	r2, r3
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004e0c:	7bbb      	ldrb	r3, [r7, #14]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004e12:	7b7b      	ldrb	r3, [r7, #13]
 8004e14:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d006      	beq.n	8004e2a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004e1c:	7bbb      	ldrb	r3, [r7, #14]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d803      	bhi.n	8004e2a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0d3      	beq.n	8004dd2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004e2a:	7bbb      	ldrb	r3, [r7, #14]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004e30:	23f4      	movs	r3, #244	; 0xf4
 8004e32:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 8004e4e:	f107 030e 	add.w	r3, r7, #14
 8004e52:	461a      	mov	r2, r3
 8004e54:	2113      	movs	r1, #19
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f003 fa64 	bl	8008324 <VL53L0X_RdByte>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 8004e60:	7bbb      	ldrb	r3, [r7, #14]
 8004e62:	f003 0207 	and.w	r2, r3, #7
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004e6a:	7bbb      	ldrb	r3, [r7, #14]
 8004e6c:	f003 0318 	and.w	r3, r3, #24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004e74:	23fa      	movs	r3, #250	; 0xfa
 8004e76:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fa02 	bl	80052a2 <VL53L0X_perform_ref_spad_management>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004ebc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004ec0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ec6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004ec8:	f107 0308 	add.w	r3, r7, #8
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2128      	movs	r1, #40	; 0x28
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f003 fa51 	bl	8008378 <VL53L0X_RdWord>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8004eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d11e      	bne.n	8004f20 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004ee2:	893b      	ldrh	r3, [r7, #8]
 8004ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004eec:	893b      	ldrh	r3, [r7, #8]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	dd0b      	ble.n	8004f10 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8004ef8:	893a      	ldrh	r2, [r7, #8]
 8004efa:	897b      	ldrh	r3, [r7, #10]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	b21b      	sxth	r3, r3
 8004f02:	461a      	mov	r2, r3
					* 250;
 8004f04:	23fa      	movs	r3, #250	; 0xfa
 8004f06:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e007      	b.n	8004f20 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004f10:	893b      	ldrh	r3, [r7, #8]
 8004f12:	b21b      	sxth	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	23fa      	movs	r3, #250	; 0xfa
 8004f18:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b08b      	sub	sp, #44	; 0x2c
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f48:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f5c:	69b9      	ldr	r1, [r7, #24]
 8004f5e:	fb01 f202 	mul.w	r2, r1, r2
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6a:	e030      	b.n	8004fce <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	4413      	add	r3, r2
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d11e      	bne.n	8004fc0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 8004f82:	7ffa      	ldrb	r2, [r7, #31]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	fa42 f303 	asr.w	r3, r2, r3
 8004f8a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004f90:	e016      	b.n	8004fc0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00b      	beq.n	8004fb4 <get_next_good_spad+0x88>
				success = 1;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	fb03 f202 	mul.w	r2, r3, r2
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	4413      	add	r3, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	601a      	str	r2, [r3, #0]
				break;
 8004fb2:	e009      	b.n	8004fc8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004fb4:	7ffb      	ldrb	r3, [r7, #31]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004fc0:	6a3a      	ldr	r2, [r7, #32]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d3e4      	bcc.n	8004f92 <get_next_good_spad+0x66>
				coarseIndex++) {
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	3301      	adds	r3, #1
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d202      	bcs.n	8004fdc <get_next_good_spad+0xb0>
 8004fd6:	7fbb      	ldrb	r3, [r7, #30]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0c7      	beq.n	8004f6c <get_next_good_spad+0x40>
		}
	}
}
 8004fdc:	bf00      	nop
 8004fde:	372c      	adds	r7, #44	; 0x2c
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr
	...

08004fe8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8004ffa:	4a07      	ldr	r2, [pc, #28]	; (8005018 <is_aperture+0x30>)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <is_aperture+0x22>
		isAperture = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	200002e0 	.word	0x200002e0

0800501c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	; 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800502c:	2308      	movs	r3, #8
 800502e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005042:	69b9      	ldr	r1, [r7, #24]
 8005044:	fb01 f202 	mul.w	r2, r1, r2
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	d302      	bcc.n	800505a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005054:	23ce      	movs	r3, #206	; 0xce
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e010      	b.n	800507c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	b25a      	sxtb	r2, r3
 8005064:	2101      	movs	r1, #1
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	fa01 f303 	lsl.w	r3, r1, r3
 800506c:	b25b      	sxtb	r3, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	b259      	sxtb	r1, r3
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	b2ca      	uxtb	r2, r1
 800507a:	701a      	strb	r2, [r3, #0]

	return status;
 800507c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3724      	adds	r7, #36	; 0x24
 8005084:	46bd      	mov	sp, r7
 8005086:	bc80      	pop	{r7}
 8005088:	4770      	bx	lr

0800508a <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005094:	2306      	movs	r3, #6
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	21b0      	movs	r1, #176	; 0xb0
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f003 f864 	bl	8008168 <VL53L0X_WriteMulti>
 80050a0:	4603      	mov	r3, r0
 80050a2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80050a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80050ba:	2306      	movs	r3, #6
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	21b0      	movs	r1, #176	; 0xb0
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f003 f881 	bl	80081c8 <VL53L0X_ReadMulti>
 80050c6:	4603      	mov	r3, r0
 80050c8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80050ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b08c      	sub	sp, #48	; 0x30
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
 80050e2:	460b      	mov	r3, r1
 80050e4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80050ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ee:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80050f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f2:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80050f4:	2300      	movs	r3, #0
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f8:	e02b      	b.n	8005152 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80050fa:	f107 031c 	add.w	r3, r7, #28
 80050fe:	6a3a      	ldr	r2, [r7, #32]
 8005100:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff ff12 	bl	8004f2c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800510e:	d103      	bne.n	8005118 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005110:	23ce      	movs	r3, #206	; 0xce
 8005112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005116:	e020      	b.n	800515a <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	461a      	mov	r2, r3
 800511c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511e:	4413      	add	r3, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff61 	bl	8004fe8 <is_aperture>
 8005126:	4603      	mov	r3, r0
 8005128:	461a      	mov	r2, r3
 800512a:	7afb      	ldrb	r3, [r7, #11]
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005130:	23ce      	movs	r3, #206	; 0xce
 8005132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005136:	e010      	b.n	800515a <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800513c:	6a3a      	ldr	r2, [r7, #32]
 800513e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005140:	6838      	ldr	r0, [r7, #0]
 8005142:	f7ff ff6b 	bl	800501c <enable_spad_bit>
		currentSpad++;
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	3301      	adds	r3, #1
 800514a:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	3301      	adds	r3, #1
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
 8005152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005156:	429a      	cmp	r2, r3
 8005158:	d3cf      	bcc.n	80050fa <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800515a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005160:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8005168:	6839      	ldr	r1, [r7, #0]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff ff8d 	bl	800508a <set_ref_spad_map>
 8005170:	4603      	mov	r3, r0
 8005172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005176:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800517a:	2b00      	cmp	r3, #0
 800517c:	d121      	bne.n	80051c2 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800517e:	f107 0314 	add.w	r3, r7, #20
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff ff93 	bl	80050b0 <get_ref_spad_map>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005194:	e011      	b.n	80051ba <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	4413      	add	r3, r2
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	f107 0114 	add.w	r1, r7, #20
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	440b      	add	r3, r1
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d003      	beq.n	80051b4 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80051ac:	23ce      	movs	r3, #206	; 0xce
 80051ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80051b2:	e006      	b.n	80051c2 <enable_ref_spads+0xec>
			}
			i++;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	3301      	adds	r3, #1
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	429a      	cmp	r2, r3
 80051c0:	d3e9      	bcc.n	8005196 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80051c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3730      	adds	r7, #48	; 0x30
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b08a      	sub	sp, #40	; 0x28
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80051d8:	2300      	movs	r3, #0
 80051da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80051ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80051ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d107      	bne.n	8005206 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80051f6:	22c0      	movs	r2, #192	; 0xc0
 80051f8:	2101      	movs	r1, #1
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f003 f810 	bl	8008220 <VL53L0X_WrByte>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005206:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800520a:	2b00      	cmp	r3, #0
 800520c:	d108      	bne.n	8005220 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800520e:	f107 0308 	add.w	r3, r7, #8
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fc49 	bl	8004aac <VL53L0X_PerformSingleRangingMeasurement>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005220:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005224:	2b00      	cmp	r3, #0
 8005226:	d107      	bne.n	8005238 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005228:	2201      	movs	r2, #1
 800522a:	21ff      	movs	r1, #255	; 0xff
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f002 fff7 	bl	8008220 <VL53L0X_WrByte>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800523c:	2b00      	cmp	r3, #0
 800523e:	d107      	bne.n	8005250 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	21b6      	movs	r1, #182	; 0xb6
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f003 f897 	bl	8008378 <VL53L0X_RdWord>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005250:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005254:	2b00      	cmp	r3, #0
 8005256:	d107      	bne.n	8005268 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005258:	2200      	movs	r2, #0
 800525a:	21ff      	movs	r1, #255	; 0xff
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f002 ffdf 	bl	8008220 <VL53L0X_WrByte>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8005268:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800526c:	2b00      	cmp	r3, #0
 800526e:	d112      	bne.n	8005296 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005274:	461a      	mov	r2, r3
 8005276:	2101      	movs	r1, #1
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f002 ffd1 	bl	8008220 <VL53L0X_WrByte>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005284:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005292:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 8005296:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800529a:	4618      	mov	r0, r3
 800529c:	3728      	adds	r7, #40	; 0x28
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80052a2:	b590      	push	{r4, r7, lr}
 80052a4:	b09d      	sub	sp, #116	; 0x74
 80052a6:	af06      	add	r7, sp, #24
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80052b4:	23b4      	movs	r3, #180	; 0xb4
 80052b6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80052ba:	2303      	movs	r3, #3
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80052be:	232c      	movs	r3, #44	; 0x2c
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80052ce:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80052d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80052dc:	2306      	movs	r3, #6
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8005306:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005308:	2300      	movs	r3, #0
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48
 800530c:	e009      	b.n	8005322 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005312:	4413      	add	r3, r2
 8005314:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005318:	2200      	movs	r2, #0
 800531a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800531c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531e:	3301      	adds	r3, #1
 8005320:	64bb      	str	r3, [r7, #72]	; 0x48
 8005322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	429a      	cmp	r2, r3
 8005328:	d3f1      	bcc.n	800530e <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800532a:	2201      	movs	r2, #1
 800532c:	21ff      	movs	r1, #255	; 0xff
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f002 ff76 	bl	8008220 <VL53L0X_WrByte>
 8005334:	4603      	mov	r3, r0
 8005336:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800533a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800533e:	2b00      	cmp	r3, #0
 8005340:	d107      	bne.n	8005352 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005342:	2200      	movs	r2, #0
 8005344:	214f      	movs	r1, #79	; 0x4f
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f002 ff6a 	bl	8008220 <VL53L0X_WrByte>
 800534c:	4603      	mov	r3, r0
 800534e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005352:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005356:	2b00      	cmp	r3, #0
 8005358:	d107      	bne.n	800536a <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800535a:	222c      	movs	r2, #44	; 0x2c
 800535c:	214e      	movs	r1, #78	; 0x4e
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f002 ff5e 	bl	8008220 <VL53L0X_WrByte>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800536a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800536e:	2b00      	cmp	r3, #0
 8005370:	d107      	bne.n	8005382 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005372:	2200      	movs	r2, #0
 8005374:	21ff      	movs	r1, #255	; 0xff
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f002 ff52 	bl	8008220 <VL53L0X_WrByte>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005382:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005386:	2b00      	cmp	r3, #0
 8005388:	d109      	bne.n	800539e <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800538a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800538e:	461a      	mov	r2, r3
 8005390:	21b6      	movs	r1, #182	; 0xb6
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f002 ff44 	bl	8008220 <VL53L0X_WrByte>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800539e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80053a6:	2200      	movs	r2, #0
 80053a8:	2180      	movs	r1, #128	; 0x80
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f002 ff38 	bl	8008220 <VL53L0X_WrByte>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80053b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80053be:	f107 0210 	add.w	r2, r7, #16
 80053c2:	f107 0111 	add.w	r1, r7, #17
 80053c6:	2300      	movs	r3, #0
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fbbb 	bl	8005b44 <VL53L0X_perform_ref_calibration>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80053d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d121      	bne.n	8005420 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80053e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e2:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80053e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ea:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 80053f8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80053fc:	f107 0218 	add.w	r2, r7, #24
 8005400:	9204      	str	r2, [sp, #16]
 8005402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005404:	9203      	str	r2, [sp, #12]
 8005406:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005408:	9202      	str	r2, [sp, #8]
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	4623      	mov	r3, r4
 8005412:	4602      	mov	r2, r0
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff fe5e 	bl	80050d6 <enable_ref_spads>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005420:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005424:	2b00      	cmp	r3, #0
 8005426:	d174      	bne.n	8005512 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800542c:	f107 0312 	add.w	r3, r7, #18
 8005430:	4619      	mov	r1, r3
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fecb 	bl	80051ce <perform_ref_signal_measurement>
 8005438:	4603      	mov	r3, r0
 800543a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800543e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005442:	2b00      	cmp	r3, #0
 8005444:	d161      	bne.n	800550a <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005446:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005448:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800544a:	429a      	cmp	r2, r3
 800544c:	d25d      	bcs.n	800550a <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 800544e:	2300      	movs	r3, #0
 8005450:	64bb      	str	r3, [r7, #72]	; 0x48
 8005452:	e009      	b.n	8005468 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005458:	4413      	add	r3, r2
 800545a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005464:	3301      	adds	r3, #1
 8005466:	64bb      	str	r3, [r7, #72]	; 0x48
 8005468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	429a      	cmp	r2, r3
 800546e:	d3f1      	bcc.n	8005454 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005470:	e002      	b.n	8005478 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005474:	3301      	adds	r3, #1
 8005476:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8005478:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800547c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547e:	4413      	add	r3, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fdb1 	bl	8004fe8 <is_aperture>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d103      	bne.n	8005494 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800548c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	429a      	cmp	r2, r3
 8005492:	d3ee      	bcc.n	8005472 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8005494:	2301      	movs	r3, #1
 8005496:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8005498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549a:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 80054a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80054ac:	f107 0218 	add.w	r2, r7, #24
 80054b0:	9204      	str	r2, [sp, #16]
 80054b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b4:	9203      	str	r2, [sp, #12]
 80054b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054b8:	9202      	str	r2, [sp, #8]
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	4623      	mov	r3, r4
 80054c2:	4602      	mov	r2, r0
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7ff fe06 	bl	80050d6 <enable_ref_spads>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80054d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d11b      	bne.n	8005510 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80054dc:	f107 0312 	add.w	r3, r7, #18
 80054e0:	4619      	mov	r1, r3
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff fe73 	bl	80051ce <perform_ref_signal_measurement>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80054ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10c      	bne.n	8005510 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80054f6:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80054f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d208      	bcs.n	8005510 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005508:	e002      	b.n	8005510 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550e:	e000      	b.n	8005512 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005510:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005512:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005516:	2b00      	cmp	r3, #0
 8005518:	f040 80af 	bne.w	800567a <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800551c:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800551e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005520:	429a      	cmp	r2, r3
 8005522:	f240 80aa 	bls.w	800567a <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8005536:	f107 031c 	add.w	r3, r7, #28
 800553a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553c:	4618      	mov	r0, r3
 800553e:	f002 ffc3 	bl	80084c8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005542:	8a7b      	ldrh	r3, [r7, #18]
 8005544:	461a      	mov	r2, r3
 8005546:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	bfb8      	it	lt
 800554e:	425b      	neglt	r3, r3
 8005550:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8005558:	e086      	b.n	8005668 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 8005560:	f107 0314 	add.w	r3, r7, #20
 8005564:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005568:	f7ff fce0 	bl	8004f2c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005572:	d103      	bne.n	800557c <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005574:	23ce      	movs	r3, #206	; 0xce
 8005576:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800557a:	e07e      	b.n	800567a <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800557c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4413      	add	r3, r2
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff fd2f 	bl	8004fe8 <is_aperture>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8005594:	2301      	movs	r3, #1
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800559a:	e06e      	b.n	800567a <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800559c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559e:	3301      	adds	r3, #1
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 80055ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fd33 	bl	800501c <enable_spad_bit>
 80055b6:	4603      	mov	r3, r0
 80055b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80055bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10c      	bne.n	80055de <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80055c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c6:	3301      	adds	r3, #1
 80055c8:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 80055d0:	4619      	mov	r1, r3
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff fd59 	bl	800508a <set_ref_spad_map>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80055de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d146      	bne.n	8005674 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80055e6:	f107 0312 	add.w	r3, r7, #18
 80055ea:	4619      	mov	r1, r3
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff fdee 	bl	80051ce <perform_ref_signal_measurement>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80055f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d13b      	bne.n	8005678 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8005600:	8a7b      	ldrh	r3, [r7, #18]
 8005602:	461a      	mov	r2, r3
 8005604:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	bfb8      	it	lt
 800560c:	425b      	neglt	r3, r3
 800560e:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8005610:	8a7b      	ldrh	r3, [r7, #18]
 8005612:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005614:	429a      	cmp	r2, r3
 8005616:	d21c      	bcs.n	8005652 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8005618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561c:	429a      	cmp	r2, r3
 800561e:	d914      	bls.n	800564a <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 8005620:	f107 031c 	add.w	r3, r7, #28
 8005624:	4619      	mov	r1, r3
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff fd2f 	bl	800508a <set_ref_spad_map>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 8005638:	f107 011c 	add.w	r1, r7, #28
 800563c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563e:	4618      	mov	r0, r3
 8005640:	f002 ff42 	bl	80084c8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005646:	3b01      	subs	r3, #1
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005650:	e00a      	b.n	8005668 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 800565c:	f107 031c 	add.w	r3, r7, #28
 8005660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005662:	4618      	mov	r0, r3
 8005664:	f002 ff30 	bl	80084c8 <memcpy>
		while (!complete) {
 8005668:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800566c:	2b00      	cmp	r3, #0
 800566e:	f43f af74 	beq.w	800555a <VL53L0X_perform_ref_spad_management+0x2b8>
 8005672:	e002      	b.n	800567a <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005674:	bf00      	nop
 8005676:	e000      	b.n	800567a <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005678:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800567a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800567e:	2b00      	cmp	r3, #0
 8005680:	d115      	bne.n	80056ae <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005686:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800568e:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	781a      	ldrb	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80056ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	375c      	adds	r7, #92	; 0x5c
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd90      	pop	{r4, r7, pc}

080056ba <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80056ba:	b590      	push	{r4, r7, lr}
 80056bc:	b093      	sub	sp, #76	; 0x4c
 80056be:	af06      	add	r7, sp, #24
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	4613      	mov	r3, r2
 80056c6:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80056d2:	23b4      	movs	r3, #180	; 0xb4
 80056d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80056d8:	2306      	movs	r3, #6
 80056da:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80056dc:	232c      	movs	r3, #44	; 0x2c
 80056de:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80056e0:	2201      	movs	r2, #1
 80056e2:	21ff      	movs	r1, #255	; 0xff
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f002 fd9b 	bl	8008220 <VL53L0X_WrByte>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80056f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80056f8:	2200      	movs	r2, #0
 80056fa:	214f      	movs	r1, #79	; 0x4f
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f002 fd8f 	bl	8008220 <VL53L0X_WrByte>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005708:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800570c:	2b00      	cmp	r3, #0
 800570e:	d107      	bne.n	8005720 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005710:	222c      	movs	r2, #44	; 0x2c
 8005712:	214e      	movs	r1, #78	; 0x4e
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f002 fd83 	bl	8008220 <VL53L0X_WrByte>
 800571a:	4603      	mov	r3, r0
 800571c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005720:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005724:	2b00      	cmp	r3, #0
 8005726:	d107      	bne.n	8005738 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005728:	2200      	movs	r2, #0
 800572a:	21ff      	movs	r1, #255	; 0xff
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f002 fd77 	bl	8008220 <VL53L0X_WrByte>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005738:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8005740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005744:	461a      	mov	r2, r3
 8005746:	21b6      	movs	r1, #182	; 0xb6
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f002 fd69 	bl	8008220 <VL53L0X_WrByte>
 800574e:	4603      	mov	r3, r0
 8005750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8005754:	2300      	movs	r3, #0
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
 8005758:	e009      	b.n	800576e <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	4413      	add	r3, r2
 8005760:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	3301      	adds	r3, #1
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
 800576e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	429a      	cmp	r2, r3
 8005774:	d3f1      	bcc.n	800575a <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d011      	beq.n	80057a0 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800577c:	e002      	b.n	8005784 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	3301      	adds	r3, #1
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005784:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	4413      	add	r3, r2
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fc2b 	bl	8004fe8 <is_aperture>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <VL53L0X_set_reference_spads+0xe6>
 8005798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	429a      	cmp	r2, r3
 800579e:	d3ee      	bcc.n	800577e <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 80057ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057b0:	79f9      	ldrb	r1, [r7, #7]
 80057b2:	f107 0214 	add.w	r2, r7, #20
 80057b6:	9204      	str	r2, [sp, #16]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	9203      	str	r2, [sp, #12]
 80057bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057be:	9202      	str	r2, [sp, #8]
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	4623      	mov	r3, r4
 80057c8:	4602      	mov	r2, r0
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff fc83 	bl	80050d6 <enable_ref_spads>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80057d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10c      	bne.n	80057f8 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	79fa      	ldrb	r2, [r7, #7]
 80057f4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80057f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3734      	adds	r7, #52	; 0x34
 8005800:	46bd      	mov	sp, r7
 8005802:	bd90      	pop	{r4, r7, pc}

08005804 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005810:	2300      	movs	r3, #0
 8005812:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	2100      	movs	r1, #0
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f002 fcf9 	bl	8008220 <VL53L0X_WrByte>
 800582e:	4603      	mov	r3, r0
 8005830:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d104      	bne.n	8005844 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f9bf 	bl	8005bbe <VL53L0X_measurement_poll_for_completion>
 8005840:	4603      	mov	r3, r0
 8005842:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d105      	bne.n	8005858 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800584c:	2100      	movs	r1, #0
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fab6 	bl	8004dc0 <VL53L0X_ClearInterruptMask>
 8005854:	4603      	mov	r3, r0
 8005856:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d106      	bne.n	800586e <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005860:	2200      	movs	r2, #0
 8005862:	2100      	movs	r1, #0
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f002 fcdb 	bl	8008220 <VL53L0X_WrByte>
 800586a:	4603      	mov	r3, r0
 800586c:	73fb      	strb	r3, [r7, #15]

	return Status;
 800586e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	4608      	mov	r0, r1
 8005884:	4611      	mov	r1, r2
 8005886:	461a      	mov	r2, r3
 8005888:	4603      	mov	r3, r0
 800588a:	70fb      	strb	r3, [r7, #3]
 800588c:	460b      	mov	r3, r1
 800588e:	70bb      	strb	r3, [r7, #2]
 8005890:	4613      	mov	r3, r2
 8005892:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005894:	2300      	movs	r3, #0
 8005896:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800589c:	2201      	movs	r2, #1
 800589e:	21ff      	movs	r1, #255	; 0xff
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f002 fcbd 	bl	8008220 <VL53L0X_WrByte>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80058b0:	2200      	movs	r2, #0
 80058b2:	2100      	movs	r1, #0
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f002 fcb3 	bl	8008220 <VL53L0X_WrByte>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80058c4:	2200      	movs	r2, #0
 80058c6:	21ff      	movs	r1, #255	; 0xff
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f002 fca9 	bl	8008220 <VL53L0X_WrByte>
 80058ce:	4603      	mov	r3, r0
 80058d0:	461a      	mov	r2, r3
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01e      	beq.n	800591c <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80058de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	21cb      	movs	r1, #203	; 0xcb
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f002 fd1a 	bl	8008324 <VL53L0X_RdByte>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80058fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d02a      	beq.n	8005958 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005902:	f107 030e 	add.w	r3, r7, #14
 8005906:	461a      	mov	r2, r3
 8005908:	21ee      	movs	r1, #238	; 0xee
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f002 fd0a 	bl	8008324 <VL53L0X_RdByte>
 8005910:	4603      	mov	r3, r0
 8005912:	461a      	mov	r2, r3
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	4313      	orrs	r3, r2
 8005918:	73fb      	strb	r3, [r7, #15]
 800591a:	e01d      	b.n	8005958 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800591c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005924:	78bb      	ldrb	r3, [r7, #2]
 8005926:	461a      	mov	r2, r3
 8005928:	21cb      	movs	r1, #203	; 0xcb
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f002 fc78 	bl	8008220 <VL53L0X_WrByte>
 8005930:	4603      	mov	r3, r0
 8005932:	461a      	mov	r2, r3
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	4313      	orrs	r3, r2
 8005938:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800593a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005942:	787b      	ldrb	r3, [r7, #1]
 8005944:	2280      	movs	r2, #128	; 0x80
 8005946:	21ee      	movs	r1, #238	; 0xee
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f002 fcb7 	bl	80082bc <VL53L0X_UpdateByte>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	4313      	orrs	r3, r2
 8005956:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005958:	2201      	movs	r2, #1
 800595a:	21ff      	movs	r1, #255	; 0xff
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f002 fc5f 	bl	8008220 <VL53L0X_WrByte>
 8005962:	4603      	mov	r3, r0
 8005964:	461a      	mov	r2, r3
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	4313      	orrs	r3, r2
 800596a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800596c:	2201      	movs	r2, #1
 800596e:	2100      	movs	r1, #0
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f002 fc55 	bl	8008220 <VL53L0X_WrByte>
 8005976:	4603      	mov	r3, r0
 8005978:	461a      	mov	r2, r3
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	4313      	orrs	r3, r2
 800597e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005980:	2200      	movs	r2, #0
 8005982:	21ff      	movs	r1, #255	; 0xff
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f002 fc4b 	bl	8008220 <VL53L0X_WrByte>
 800598a:	4603      	mov	r3, r0
 800598c:	461a      	mov	r2, r3
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	4313      	orrs	r3, r2
 8005992:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	f023 0310 	bic.w	r3, r3, #16
 800599a:	b2da      	uxtb	r2, r3
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	701a      	strb	r2, [r3, #0]

	return Status;
 80059a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af04      	add	r7, sp, #16
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	4611      	mov	r1, r2
 80059b8:	461a      	mov	r2, r3
 80059ba:	460b      	mov	r3, r1
 80059bc:	71fb      	strb	r3, [r7, #7]
 80059be:	4613      	mov	r3, r2
 80059c0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80059d6:	79bb      	ldrb	r3, [r7, #6]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80059e2:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80059e4:	2201      	movs	r2, #1
 80059e6:	2101      	movs	r1, #1
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f002 fc19 	bl	8008220 <VL53L0X_WrByte>
 80059ee:	4603      	mov	r3, r0
 80059f0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80059f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80059fa:	2140      	movs	r1, #64	; 0x40
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff ff01 	bl	8005804 <VL53L0X_perform_single_ref_calibration>
 8005a02:	4603      	mov	r3, r0
 8005a04:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d115      	bne.n	8005a3a <VL53L0X_perform_vhv_calibration+0x8e>
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d112      	bne.n	8005a3a <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005a14:	7d39      	ldrb	r1, [r7, #20]
 8005a16:	7d7a      	ldrb	r2, [r7, #21]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	9303      	str	r3, [sp, #12]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	9302      	str	r3, [sp, #8]
 8005a20:	f107 0313 	add.w	r3, r7, #19
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff ff23 	bl	800587a <VL53L0X_ref_calibration_io>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]
 8005a38:	e002      	b.n	8005a40 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d112      	bne.n	8005a6e <VL53L0X_perform_vhv_calibration+0xc2>
 8005a48:	79bb      	ldrb	r3, [r7, #6]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00f      	beq.n	8005a6e <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005a4e:	7dbb      	ldrb	r3, [r7, #22]
 8005a50:	461a      	mov	r2, r3
 8005a52:	2101      	movs	r1, #1
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f002 fbe3 	bl	8008220 <VL53L0X_WrByte>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	7dba      	ldrb	r2, [r7, #22]
 8005a6a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8005a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b08a      	sub	sp, #40	; 0x28
 8005a7e:	af04      	add	r7, sp, #16
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	4611      	mov	r1, r2
 8005a86:	461a      	mov	r2, r3
 8005a88:	460b      	mov	r3, r1
 8005a8a:	71fb      	strb	r3, [r7, #7]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005aa0:	79bb      	ldrb	r3, [r7, #6]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8005aac:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005aae:	2202      	movs	r2, #2
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f002 fbb4 	bl	8008220 <VL53L0X_WrByte>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d105      	bne.n	8005ad0 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff fe9c 	bl	8005804 <VL53L0X_perform_single_ref_calibration>
 8005acc:	4603      	mov	r3, r0
 8005ace:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d115      	bne.n	8005b04 <VL53L0X_perform_phase_calibration+0x8a>
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d112      	bne.n	8005b04 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005ade:	7d39      	ldrb	r1, [r7, #20]
 8005ae0:	7d7a      	ldrb	r2, [r7, #21]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	9302      	str	r3, [sp, #8]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	f107 0313 	add.w	r3, r7, #19
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	460b      	mov	r3, r1
 8005af6:	2101      	movs	r1, #1
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff febe 	bl	800587a <VL53L0X_ref_calibration_io>
 8005afe:	4603      	mov	r3, r0
 8005b00:	75fb      	strb	r3, [r7, #23]
 8005b02:	e002      	b.n	8005b0a <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d112      	bne.n	8005b38 <VL53L0X_perform_phase_calibration+0xbe>
 8005b12:	79bb      	ldrb	r3, [r7, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00f      	beq.n	8005b38 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005b18:	7dbb      	ldrb	r3, [r7, #22]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f002 fb7e 	bl	8008220 <VL53L0X_WrByte>
 8005b24:	4603      	mov	r3, r0
 8005b26:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	7dba      	ldrb	r2, [r7, #22]
 8005b34:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8005b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8005b60:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	2300      	movs	r3, #0
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff ff1f 	bl	80059ac <VL53L0X_perform_vhv_calibration>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d107      	bne.n	8005b8a <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005b7a:	78fa      	ldrb	r2, [r7, #3]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff ff7a 	bl	8005a7a <VL53L0X_perform_phase_calibration>
 8005b86:	4603      	mov	r3, r0
 8005b88:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10f      	bne.n	8005bb2 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005b92:	7dbb      	ldrb	r3, [r7, #22]
 8005b94:	461a      	mov	r2, r3
 8005b96:	2101      	movs	r1, #1
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f002 fb41 	bl	8008220 <VL53L0X_WrByte>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d103      	bne.n	8005bb2 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	7dba      	ldrb	r2, [r7, #22]
 8005bae:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8005bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005bd2:	f107 030f 	add.w	r3, r7, #15
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fe fe03 	bl	80047e4 <VL53L0X_GetMeasurementDataReady>
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d110      	bne.n	8005c0c <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d00f      	beq.n	8005c10 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005bfc:	d302      	bcc.n	8005c04 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005bfe:	23f9      	movs	r3, #249	; 0xf9
 8005c00:	75fb      	strb	r3, [r7, #23]
			break;
 8005c02:	e006      	b.n	8005c12 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f002 fc2b 	bl	8008460 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005c0a:	e7e2      	b.n	8005bd2 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005c0c:	bf00      	nop
 8005c0e:	e000      	b.n	8005c12 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8005c10:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	4603      	mov	r3, r0
 8005c26:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	4603      	mov	r3, r0
 8005c4a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr

08005c66 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c76:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005c78:	e002      	b.n	8005c80 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	089b      	lsrs	r3, r3, #2
 8005c7e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d8f8      	bhi.n	8005c7a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005c88:	e017      	b.n	8005cba <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4413      	add	r3, r2
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d30b      	bcc.n	8005cae <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	4413      	add	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e002      	b.n	8005cb4 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	089b      	lsrs	r3, r3, #2
 8005cb8:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e4      	bne.n	8005c8a <VL53L0X_isqrt+0x24>
	}

	return res;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2183      	movs	r1, #131	; 0x83
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f002 fa9f 	bl	8008220 <VL53L0X_WrByte>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8005cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11e      	bne.n	8005d32 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005cf8:	f107 030f 	add.w	r3, r7, #15
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2183      	movs	r1, #131	; 0x83
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f002 fb0f 	bl	8008324 <VL53L0X_RdByte>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <VL53L0X_device_read_strobe+0x5a>
 8005d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d106      	bne.n	8005d26 <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d24:	d3e8      	bcc.n	8005cf8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d2c:	d301      	bcc.n	8005d32 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005d2e:	23f9      	movs	r3, #249	; 0xf9
 8005d30:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005d32:	2201      	movs	r2, #1
 8005d34:	2183      	movs	r1, #131	; 0x83
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f002 fa72 	bl	8008220 <VL53L0X_WrByte>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	461a      	mov	r2, r3
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005d46:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b098      	sub	sp, #96	; 0x60
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005d82:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005d86:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005d9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 8005d9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005da2:	2b07      	cmp	r3, #7
 8005da4:	f000 8408 	beq.w	80065b8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005da8:	2201      	movs	r2, #1
 8005daa:	2180      	movs	r1, #128	; 0x80
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f002 fa37 	bl	8008220 <VL53L0X_WrByte>
 8005db2:	4603      	mov	r3, r0
 8005db4:	461a      	mov	r2, r3
 8005db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	21ff      	movs	r1, #255	; 0xff
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f002 fa2b 	bl	8008220 <VL53L0X_WrByte>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2100      	movs	r1, #0
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f002 fa1f 	bl	8008220 <VL53L0X_WrByte>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461a      	mov	r2, r3
 8005de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005df0:	2206      	movs	r2, #6
 8005df2:	21ff      	movs	r1, #255	; 0xff
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f002 fa13 	bl	8008220 <VL53L0X_WrByte>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005e08:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2183      	movs	r1, #131	; 0x83
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f002 fa87 	bl	8008324 <VL53L0X_RdByte>
 8005e16:	4603      	mov	r3, r0
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005e24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e28:	f043 0304 	orr.w	r3, r3, #4
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2183      	movs	r1, #131	; 0x83
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f002 f9f4 	bl	8008220 <VL53L0X_WrByte>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005e46:	2207      	movs	r2, #7
 8005e48:	21ff      	movs	r1, #255	; 0xff
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f002 f9e8 	bl	8008220 <VL53L0X_WrByte>
 8005e50:	4603      	mov	r3, r0
 8005e52:	461a      	mov	r2, r3
 8005e54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005e5e:	2201      	movs	r2, #1
 8005e60:	2181      	movs	r1, #129	; 0x81
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f002 f9dc 	bl	8008220 <VL53L0X_WrByte>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f002 faf2 	bl	8008460 <VL53L0X_PollingDelay>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	2180      	movs	r1, #128	; 0x80
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f002 f9c6 	bl	8008220 <VL53L0X_WrByte>
 8005e94:	4603      	mov	r3, r0
 8005e96:	461a      	mov	r2, r3
 8005e98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8098 	beq.w	8005fde <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005eae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005eb2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f040 8091 	bne.w	8005fde <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005ebc:	226b      	movs	r2, #107	; 0x6b
 8005ebe:	2194      	movs	r1, #148	; 0x94
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f002 f9ad 	bl	8008220 <VL53L0X_WrByte>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff fef9 	bl	8005ccc <VL53L0X_device_read_strobe>
 8005eda:	4603      	mov	r3, r0
 8005edc:	461a      	mov	r2, r3
 8005ede:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005ee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005eec:	461a      	mov	r2, r3
 8005eee:	2190      	movs	r1, #144	; 0x90
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f002 fa79 	bl	80083e8 <VL53L0X_RdDWord>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	0a1b      	lsrs	r3, r3, #8
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	0bdb      	lsrs	r3, r3, #15
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005f20:	2224      	movs	r2, #36	; 0x24
 8005f22:	2194      	movs	r1, #148	; 0x94
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f002 f97b 	bl	8008220 <VL53L0X_WrByte>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff fec7 	bl	8005ccc <VL53L0X_device_read_strobe>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f50:	461a      	mov	r2, r3
 8005f52:	2190      	movs	r1, #144	; 0x90
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f002 fa47 	bl	80083e8 <VL53L0X_RdDWord>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	0e1b      	lsrs	r3, r3, #24
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	0c1b      	lsrs	r3, r3, #16
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	0a1b      	lsrs	r3, r3, #8
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005f86:	2225      	movs	r2, #37	; 0x25
 8005f88:	2194      	movs	r1, #148	; 0x94
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f002 f948 	bl	8008220 <VL53L0X_WrByte>
 8005f90:	4603      	mov	r3, r0
 8005f92:	461a      	mov	r2, r3
 8005f94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff fe94 	bl	8005ccc <VL53L0X_device_read_strobe>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	2190      	movs	r1, #144	; 0x90
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f002 fa14 	bl	80083e8 <VL53L0X_RdDWord>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	0e1b      	lsrs	r3, r3, #24
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	0c1b      	lsrs	r3, r3, #16
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8189 	beq.w	80062fc <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005fea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005fee:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 8182 	bne.w	80062fc <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	2194      	movs	r1, #148	; 0x94
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f002 f90f 	bl	8008220 <VL53L0X_WrByte>
 8006002:	4603      	mov	r3, r0
 8006004:	461a      	mov	r2, r3
 8006006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800600a:	4313      	orrs	r3, r2
 800600c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff fe5b 	bl	8005ccc <VL53L0X_device_read_strobe>
 8006016:	4603      	mov	r3, r0
 8006018:	461a      	mov	r2, r3
 800601a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800601e:	4313      	orrs	r3, r2
 8006020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006024:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006028:	461a      	mov	r2, r3
 800602a:	2190      	movs	r1, #144	; 0x90
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f002 f979 	bl	8008324 <VL53L0X_RdByte>
 8006032:	4603      	mov	r3, r0
 8006034:	461a      	mov	r2, r3
 8006036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800603a:	4313      	orrs	r3, r2
 800603c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006040:	227b      	movs	r2, #123	; 0x7b
 8006042:	2194      	movs	r1, #148	; 0x94
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f002 f8eb 	bl	8008220 <VL53L0X_WrByte>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006052:	4313      	orrs	r3, r2
 8006054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7ff fe37 	bl	8005ccc <VL53L0X_device_read_strobe>
 800605e:	4603      	mov	r3, r0
 8006060:	461a      	mov	r2, r3
 8006062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006066:	4313      	orrs	r3, r2
 8006068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800606c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8006070:	461a      	mov	r2, r3
 8006072:	2190      	movs	r1, #144	; 0x90
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f002 f955 	bl	8008324 <VL53L0X_RdByte>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006082:	4313      	orrs	r3, r2
 8006084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006088:	2277      	movs	r2, #119	; 0x77
 800608a:	2194      	movs	r1, #148	; 0x94
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f002 f8c7 	bl	8008220 <VL53L0X_WrByte>
 8006092:	4603      	mov	r3, r0
 8006094:	461a      	mov	r2, r3
 8006096:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800609a:	4313      	orrs	r3, r2
 800609c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fe13 	bl	8005ccc <VL53L0X_device_read_strobe>
 80060a6:	4603      	mov	r3, r0
 80060a8:	461a      	mov	r2, r3
 80060aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80060b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060b8:	461a      	mov	r2, r3
 80060ba:	2190      	movs	r1, #144	; 0x90
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f002 f993 	bl	80083e8 <VL53L0X_RdDWord>
 80060c2:	4603      	mov	r3, r0
 80060c4:	461a      	mov	r2, r3
 80060c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	0e5b      	lsrs	r3, r3, #25
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	0c9b      	lsrs	r3, r3, #18
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	0adb      	lsrs	r3, r3, #11
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006104:	b2db      	uxtb	r3, r3
 8006106:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	b2db      	uxtb	r3, r3
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	b2db      	uxtb	r3, r3
 8006110:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800611a:	2278      	movs	r2, #120	; 0x78
 800611c:	2194      	movs	r1, #148	; 0x94
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f002 f87e 	bl	8008220 <VL53L0X_WrByte>
 8006124:	4603      	mov	r3, r0
 8006126:	461a      	mov	r2, r3
 8006128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800612c:	4313      	orrs	r3, r2
 800612e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fdca 	bl	8005ccc <VL53L0X_device_read_strobe>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006140:	4313      	orrs	r3, r2
 8006142:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800614a:	461a      	mov	r2, r3
 800614c:	2190      	movs	r1, #144	; 0x90
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f002 f94a 	bl	80083e8 <VL53L0X_RdDWord>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800615c:	4313      	orrs	r3, r2
 800615e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	0f5b      	lsrs	r3, r3, #29
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800616c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800616e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006172:	4413      	add	r3, r2
 8006174:	b2db      	uxtb	r3, r3
 8006176:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	0d9b      	lsrs	r3, r3, #22
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006182:	b2db      	uxtb	r3, r3
 8006184:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	0bdb      	lsrs	r3, r3, #15
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006190:	b2db      	uxtb	r3, r3
 8006192:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	b2db      	uxtb	r3, r3
 800619a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	085b      	lsrs	r3, r3, #1
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	019b      	lsls	r3, r3, #6
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80061c2:	2279      	movs	r2, #121	; 0x79
 80061c4:	2194      	movs	r1, #148	; 0x94
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f002 f82a 	bl	8008220 <VL53L0X_WrByte>
 80061cc:	4603      	mov	r3, r0
 80061ce:	461a      	mov	r2, r3
 80061d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff fd76 	bl	8005ccc <VL53L0X_device_read_strobe>
 80061e0:	4603      	mov	r3, r0
 80061e2:	461a      	mov	r2, r3
 80061e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80061ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061f2:	461a      	mov	r2, r3
 80061f4:	2190      	movs	r1, #144	; 0x90
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f002 f8f6 	bl	80083e8 <VL53L0X_RdDWord>
 80061fc:	4603      	mov	r3, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006204:	4313      	orrs	r3, r2
 8006206:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	0e9b      	lsrs	r3, r3, #26
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006214:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800621a:	4413      	add	r3, r2
 800621c:	b2db      	uxtb	r3, r3
 800621e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	0cdb      	lsrs	r3, r3, #19
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800622a:	b2db      	uxtb	r3, r3
 800622c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	0b1b      	lsrs	r3, r3, #12
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006238:	b2db      	uxtb	r3, r3
 800623a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	b2db      	uxtb	r3, r3
 8006242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006246:	b2db      	uxtb	r3, r3
 8006248:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	b2db      	uxtb	r3, r3
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006256:	b2db      	uxtb	r3, r3
 8006258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800625c:	227a      	movs	r2, #122	; 0x7a
 800625e:	2194      	movs	r1, #148	; 0x94
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 ffdd 	bl	8008220 <VL53L0X_WrByte>
 8006266:	4603      	mov	r3, r0
 8006268:	461a      	mov	r2, r3
 800626a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800626e:	4313      	orrs	r3, r2
 8006270:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff fd29 	bl	8005ccc <VL53L0X_device_read_strobe>
 800627a:	4603      	mov	r3, r0
 800627c:	461a      	mov	r2, r3
 800627e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006282:	4313      	orrs	r3, r2
 8006284:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006288:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800628c:	461a      	mov	r2, r3
 800628e:	2190      	movs	r1, #144	; 0x90
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f002 f8a9 	bl	80083e8 <VL53L0X_RdDWord>
 8006296:	4603      	mov	r3, r0
 8006298:	461a      	mov	r2, r3
 800629a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800629e:	4313      	orrs	r3, r2
 80062a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	0f9b      	lsrs	r3, r3, #30
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ae:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80062b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062b4:	4413      	add	r3, r2
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	0ddb      	lsrs	r3, r3, #23
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	0a5b      	lsrs	r3, r3, #9
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 80f1 	beq.w	80064ea <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006308:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800630c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006310:	2b00      	cmp	r3, #0
 8006312:	f040 80ea 	bne.w	80064ea <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006316:	227b      	movs	r2, #123	; 0x7b
 8006318:	2194      	movs	r1, #148	; 0x94
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 ff80 	bl	8008220 <VL53L0X_WrByte>
 8006320:	4603      	mov	r3, r0
 8006322:	461a      	mov	r2, r3
 8006324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006328:	4313      	orrs	r3, r2
 800632a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff fccc 	bl	8005ccc <VL53L0X_device_read_strobe>
 8006334:	4603      	mov	r3, r0
 8006336:	461a      	mov	r2, r3
 8006338:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800633c:	4313      	orrs	r3, r2
 800633e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006346:	461a      	mov	r2, r3
 8006348:	2190      	movs	r1, #144	; 0x90
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f002 f84c 	bl	80083e8 <VL53L0X_RdDWord>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
 8006354:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006358:	4313      	orrs	r3, r2
 800635a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800635e:	227c      	movs	r2, #124	; 0x7c
 8006360:	2194      	movs	r1, #148	; 0x94
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 ff5c 	bl	8008220 <VL53L0X_WrByte>
 8006368:	4603      	mov	r3, r0
 800636a:	461a      	mov	r2, r3
 800636c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006370:	4313      	orrs	r3, r2
 8006372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff fca8 	bl	8005ccc <VL53L0X_device_read_strobe>
 800637c:	4603      	mov	r3, r0
 800637e:	461a      	mov	r2, r3
 8006380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006384:	4313      	orrs	r3, r2
 8006386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800638a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800638e:	461a      	mov	r2, r3
 8006390:	2190      	movs	r1, #144	; 0x90
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f002 f828 	bl	80083e8 <VL53L0X_RdDWord>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80063a6:	2273      	movs	r2, #115	; 0x73
 80063a8:	2194      	movs	r1, #148	; 0x94
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 ff38 	bl	8008220 <VL53L0X_WrByte>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fc84 	bl	8005ccc <VL53L0X_device_read_strobe>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063d6:	461a      	mov	r2, r3
 80063d8:	2190      	movs	r1, #144	; 0x90
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f002 f804 	bl	80083e8 <VL53L0X_RdDWord>
 80063e0:	4603      	mov	r3, r0
 80063e2:	461a      	mov	r2, r3
 80063e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80063f6:	2274      	movs	r2, #116	; 0x74
 80063f8:	2194      	movs	r1, #148	; 0x94
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 ff10 	bl	8008220 <VL53L0X_WrByte>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006408:	4313      	orrs	r3, r2
 800640a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff fc5c 	bl	8005ccc <VL53L0X_device_read_strobe>
 8006414:	4603      	mov	r3, r0
 8006416:	461a      	mov	r2, r3
 8006418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800641c:	4313      	orrs	r3, r2
 800641e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006426:	461a      	mov	r2, r3
 8006428:	2190      	movs	r1, #144	; 0x90
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 ffdc 	bl	80083e8 <VL53L0X_RdDWord>
 8006430:	4603      	mov	r3, r0
 8006432:	461a      	mov	r2, r3
 8006434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006438:	4313      	orrs	r3, r2
 800643a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006444:	4313      	orrs	r3, r2
 8006446:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006448:	2275      	movs	r2, #117	; 0x75
 800644a:	2194      	movs	r1, #148	; 0x94
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 fee7 	bl	8008220 <VL53L0X_WrByte>
 8006452:	4603      	mov	r3, r0
 8006454:	461a      	mov	r2, r3
 8006456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800645a:	4313      	orrs	r3, r2
 800645c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff fc33 	bl	8005ccc <VL53L0X_device_read_strobe>
 8006466:	4603      	mov	r3, r0
 8006468:	461a      	mov	r2, r3
 800646a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800646e:	4313      	orrs	r3, r2
 8006470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006478:	461a      	mov	r2, r3
 800647a:	2190      	movs	r1, #144	; 0x90
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 ffb3 	bl	80083e8 <VL53L0X_RdDWord>
 8006482:	4603      	mov	r3, r0
 8006484:	461a      	mov	r2, r3
 8006486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800648a:	4313      	orrs	r3, r2
 800648c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006494:	b29b      	uxth	r3, r3
 8006496:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006498:	2276      	movs	r2, #118	; 0x76
 800649a:	2194      	movs	r1, #148	; 0x94
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 febf 	bl	8008220 <VL53L0X_WrByte>
 80064a2:	4603      	mov	r3, r0
 80064a4:	461a      	mov	r2, r3
 80064a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff fc0b 	bl	8005ccc <VL53L0X_device_read_strobe>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461a      	mov	r2, r3
 80064ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064be:	4313      	orrs	r3, r2
 80064c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064c8:	461a      	mov	r2, r3
 80064ca:	2190      	movs	r1, #144	; 0x90
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 ff8b 	bl	80083e8 <VL53L0X_RdDWord>
 80064d2:	4603      	mov	r3, r0
 80064d4:	461a      	mov	r2, r3
 80064d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064da:	4313      	orrs	r3, r2
 80064dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80064e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80064e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064e6:	4313      	orrs	r3, r2
 80064e8:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80064ea:	2200      	movs	r2, #0
 80064ec:	2181      	movs	r1, #129	; 0x81
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fe96 	bl	8008220 <VL53L0X_WrByte>
 80064f4:	4603      	mov	r3, r0
 80064f6:	461a      	mov	r2, r3
 80064f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006502:	2206      	movs	r2, #6
 8006504:	21ff      	movs	r1, #255	; 0xff
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 fe8a 	bl	8008220 <VL53L0X_WrByte>
 800650c:	4603      	mov	r3, r0
 800650e:	461a      	mov	r2, r3
 8006510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006514:	4313      	orrs	r3, r2
 8006516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800651a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800651e:	461a      	mov	r2, r3
 8006520:	2183      	movs	r1, #131	; 0x83
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 fefe 	bl	8008324 <VL53L0X_RdByte>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006530:	4313      	orrs	r3, r2
 8006532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006536:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800653a:	f023 0304 	bic.w	r3, r3, #4
 800653e:	b2db      	uxtb	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	2183      	movs	r1, #131	; 0x83
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fe6b 	bl	8008220 <VL53L0X_WrByte>
 800654a:	4603      	mov	r3, r0
 800654c:	461a      	mov	r2, r3
 800654e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006552:	4313      	orrs	r3, r2
 8006554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006558:	2201      	movs	r2, #1
 800655a:	21ff      	movs	r1, #255	; 0xff
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 fe5f 	bl	8008220 <VL53L0X_WrByte>
 8006562:	4603      	mov	r3, r0
 8006564:	461a      	mov	r2, r3
 8006566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800656a:	4313      	orrs	r3, r2
 800656c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006570:	2201      	movs	r2, #1
 8006572:	2100      	movs	r1, #0
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fe53 	bl	8008220 <VL53L0X_WrByte>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006582:	4313      	orrs	r3, r2
 8006584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006588:	2200      	movs	r2, #0
 800658a:	21ff      	movs	r1, #255	; 0xff
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fe47 	bl	8008220 <VL53L0X_WrByte>
 8006592:	4603      	mov	r3, r0
 8006594:	461a      	mov	r2, r3
 8006596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800659a:	4313      	orrs	r3, r2
 800659c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80065a0:	2200      	movs	r2, #0
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 fe3b 	bl	8008220 <VL53L0X_WrByte>
 80065aa:	4603      	mov	r3, r0
 80065ac:	461a      	mov	r2, r3
 80065ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80065b8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 8090 	bne.w	80066e2 <VL53L0X_get_info_from_device+0x990>
 80065c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065c6:	2b07      	cmp	r3, #7
 80065c8:	f000 808b 	beq.w	80066e2 <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d024      	beq.n	8006620 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80065d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065da:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d11e      	bne.n	8006620 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80065e8:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80065f2:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80065f6:	2300      	movs	r3, #0
 80065f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065fa:	e00e      	b.n	800661a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80065fc:	f107 0208 	add.w	r2, r7, #8
 8006600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006602:	4413      	add	r3, r2
 8006604:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660a:	4413      	add	r3, r2
 800660c:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8006610:	460a      	mov	r2, r1
 8006612:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006616:	3301      	adds	r3, #1
 8006618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800661a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661c:	2b05      	cmp	r3, #5
 800661e:	dded      	ble.n	80065fc <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d019      	beq.n	800665e <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800662a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800662e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006632:	2b00      	cmp	r3, #0
 8006634:	d113      	bne.n	800665e <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006636:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006640:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f203 131f 	addw	r3, r3, #287	; 0x11f
 8006650:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006652:	f107 0310 	add.w	r3, r7, #16
 8006656:	4619      	mov	r1, r3
 8006658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800665a:	f001 ff4b 	bl	80084f4 <strcpy>

		}

		if (((option & 4) == 4) &&
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d030      	beq.n	80066ca <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006668:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800666c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006670:	2b00      	cmp	r3, #0
 8006672:	d12a      	bne.n	80066ca <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800667c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006686:	025b      	lsls	r3, r3, #9
 8006688:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800668e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800669a:	2b00      	cmp	r3, #0
 800669c:	d011      	beq.n	80066c2 <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 800669e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80066a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066ac:	fb02 f303 	mul.w	r3, r2, r3
 80066b0:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 80066b2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 80066b6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80066ba:	425b      	negs	r3, r3
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80066c2:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80066ca:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80066d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80066e2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3760      	adds	r7, #96	; 0x60
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b087      	sub	sp, #28
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 80066fa:	f240 6277 	movw	r2, #1655	; 0x677
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8006706:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800670a:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800671c:	68bb      	ldr	r3, [r7, #8]
}
 800671e:	4618      	mov	r0, r3
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d017      	beq.n	8006772 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3b01      	subs	r3, #1
 8006746:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006748:	e005      	b.n	8006756 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006750:	89fb      	ldrh	r3, [r7, #14]
 8006752:	3301      	adds	r3, #1
 8006754:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f4      	bne.n	800674a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006760:	89fb      	ldrh	r3, [r7, #14]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	b29b      	uxth	r3, r3
 800676a:	b2db      	uxtb	r3, r3
 800676c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800676e:	4413      	add	r3, r2
 8006770:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006772:	8afb      	ldrh	r3, [r7, #22]

}
 8006774:	4618      	mov	r0, r3
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr

0800677e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800677e:	b480      	push	{r7}
 8006780:	b085      	sub	sp, #20
 8006782:	af00      	add	r7, sp, #0
 8006784:	4603      	mov	r3, r0
 8006786:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800678c:	88fb      	ldrh	r3, [r7, #6]
 800678e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006790:	88fa      	ldrh	r2, [r7, #6]
 8006792:	0a12      	lsrs	r2, r2, #8
 8006794:	b292      	uxth	r2, r2
 8006796:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006798:	3301      	adds	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800679c:	68fb      	ldr	r3, [r7, #12]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr

080067a8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	4613      	mov	r3, r2
 80067b4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	4619      	mov	r1, r3
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff ff95 	bl	80066ee <VL53L0X_calc_macro_period_ps>
 80067c4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80067cc:	4a0a      	ldr	r2, [pc, #40]	; (80067f8 <VL53L0X_calc_timeout_mclks+0x50>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	099b      	lsrs	r3, r3, #6
 80067d4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067dc:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	441a      	add	r2, r3
	timeout_period_mclks =
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ec:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 80067ee:	69fb      	ldr	r3, [r7, #28]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3720      	adds	r7, #32
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	10624dd3 	.word	0x10624dd3

080067fc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
 8006808:	4613      	mov	r3, r2
 800680a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006810:	787b      	ldrb	r3, [r7, #1]
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff ff6a 	bl	80066ee <VL53L0X_calc_macro_period_ps>
 800681a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006822:	4a0a      	ldr	r2, [pc, #40]	; (800684c <VL53L0X_calc_timeout_us+0x50>)
 8006824:	fba2 2303 	umull	r2, r3, r2, r3
 8006828:	099b      	lsrs	r3, r3, #6
 800682a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800682c:	887b      	ldrh	r3, [r7, #2]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	fb02 f303 	mul.w	r3, r2, r3
 8006834:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006838:	4a04      	ldr	r2, [pc, #16]	; (800684c <VL53L0X_calc_timeout_us+0x50>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	099b      	lsrs	r3, r3, #6
 8006840:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006842:	697b      	ldr	r3, [r7, #20]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	10624dd3 	.word	0x10624dd3

08006850 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08c      	sub	sp, #48	; 0x30
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	460b      	mov	r3, r1
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800685e:	2300      	movs	r3, #0
 8006860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006864:	2300      	movs	r3, #0
 8006866:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006876:	7afb      	ldrb	r3, [r7, #11]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <get_sequence_step_timeout+0x38>
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d002      	beq.n	8006888 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006882:	7afb      	ldrb	r3, [r7, #11]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d128      	bne.n	80068da <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006888:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800688c:	461a      	mov	r2, r3
 800688e:	2100      	movs	r1, #0
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7fd f9fa 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 8006896:	4603      	mov	r3, r0
 8006898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800689c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80068a4:	f107 0320 	add.w	r3, r7, #32
 80068a8:	461a      	mov	r2, r3
 80068aa:	2146      	movs	r1, #70	; 0x46
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f001 fd39 	bl	8008324 <VL53L0X_RdByte>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80068b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff ff5d 	bl	800677e <VL53L0X_decode_timeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80068c8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80068cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068ce:	4619      	mov	r1, r3
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff ff93 	bl	80067fc <VL53L0X_calc_timeout_us>
 80068d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80068d8:	e092      	b.n	8006a00 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80068da:	7afb      	ldrb	r3, [r7, #11]
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d135      	bne.n	800694c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80068e0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80068e4:	461a      	mov	r2, r3
 80068e6:	2100      	movs	r1, #0
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f7fd f9ce 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80068f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f040 8081 	bne.w	8006a00 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80068fe:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006902:	461a      	mov	r2, r3
 8006904:	2100      	movs	r1, #0
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7fd f9bf 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006912:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800691a:	f107 031e 	add.w	r3, r7, #30
 800691e:	461a      	mov	r2, r3
 8006920:	2151      	movs	r1, #81	; 0x51
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f001 fd28 	bl	8008378 <VL53L0X_RdWord>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800692e:	8bfb      	ldrh	r3, [r7, #30]
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff ff24 	bl	800677e <VL53L0X_decode_timeout>
 8006936:	4603      	mov	r3, r0
 8006938:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800693a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800693e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006940:	4619      	mov	r1, r3
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff ff5a 	bl	80067fc <VL53L0X_calc_timeout_us>
 8006948:	62b8      	str	r0, [r7, #40]	; 0x28
 800694a:	e059      	b.n	8006a00 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	2b04      	cmp	r3, #4
 8006950:	d156      	bne.n	8006a00 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006952:	f107 0314 	add.w	r3, r7, #20
 8006956:	4619      	mov	r1, r3
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7fd faa1 	bl	8003ea0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01d      	beq.n	80069a4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006968:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800696c:	461a      	mov	r2, r3
 800696e:	2100      	movs	r1, #0
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7fd f98a 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 8006976:	4603      	mov	r3, r0
 8006978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800697c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10f      	bne.n	80069a4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006984:	f107 031e 	add.w	r3, r7, #30
 8006988:	461a      	mov	r2, r3
 800698a:	2151      	movs	r1, #81	; 0x51
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f001 fcf3 	bl	8008378 <VL53L0X_RdWord>
 8006992:	4603      	mov	r3, r0
 8006994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006998:	8bfb      	ldrh	r3, [r7, #30]
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff feef 	bl	800677e <VL53L0X_decode_timeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80069a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d109      	bne.n	80069c0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80069ac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80069b0:	461a      	mov	r2, r3
 80069b2:	2101      	movs	r1, #1
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7fd f968 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80069c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10f      	bne.n	80069e8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80069c8:	f107 031c 	add.w	r3, r7, #28
 80069cc:	461a      	mov	r2, r3
 80069ce:	2171      	movs	r1, #113	; 0x71
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f001 fcd1 	bl	8008378 <VL53L0X_RdWord>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80069dc:	8bbb      	ldrh	r3, [r7, #28]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fecd 	bl	800677e <VL53L0X_decode_timeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80069e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80069f0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80069f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f6:	4619      	mov	r1, r3
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff feff 	bl	80067fc <VL53L0X_calc_timeout_us>
 80069fe:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a04:	601a      	str	r2, [r3, #0]

	return Status;
 8006a06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3730      	adds	r7, #48	; 0x30
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b08a      	sub	sp, #40	; 0x28
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	607a      	str	r2, [r7, #4]
 8006a1e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006a26:	7afb      	ldrb	r3, [r7, #11]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <set_sequence_step_timeout+0x26>
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d002      	beq.n	8006a38 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006a32:	7afb      	ldrb	r3, [r7, #11]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d138      	bne.n	8006aaa <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a38:	f107 031b 	add.w	r3, r7, #27
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2100      	movs	r1, #0
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7fd f922 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006a4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d11a      	bne.n	8006a8a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006a54:	7efb      	ldrb	r3, [r7, #27]
 8006a56:	461a      	mov	r2, r3
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f7ff fea4 	bl	80067a8 <VL53L0X_calc_timeout_mclks>
 8006a60:	4603      	mov	r3, r0
 8006a62:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006a64:	8bbb      	ldrh	r3, [r7, #28]
 8006a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a6a:	d903      	bls.n	8006a74 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006a6c:	23ff      	movs	r3, #255	; 0xff
 8006a6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a72:	e004      	b.n	8006a7e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006a74:	8bbb      	ldrh	r3, [r7, #28]
 8006a76:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006a8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f040 80ab 	bne.w	8006bea <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006a94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2146      	movs	r1, #70	; 0x46
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f001 fbbf 	bl	8008220 <VL53L0X_WrByte>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006aa8:	e09f      	b.n	8006bea <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d135      	bne.n	8006b1c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d11b      	bne.n	8006af0 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ab8:	f107 031b 	add.w	r3, r7, #27
 8006abc:	461a      	mov	r2, r3
 8006abe:	2100      	movs	r1, #0
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f7fd f8e2 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006acc:	7efb      	ldrb	r3, [r7, #27]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fe68 	bl	80067a8 <VL53L0X_calc_timeout_mclks>
 8006ad8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006ada:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006adc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff fe22 	bl	8006728 <VL53L0X_encode_timeout>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006ae8:	8b3a      	ldrh	r2, [r7, #24]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006af0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d108      	bne.n	8006b0a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006af8:	8b3b      	ldrh	r3, [r7, #24]
 8006afa:	461a      	mov	r2, r3
 8006afc:	2151      	movs	r1, #81	; 0x51
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f001 fbb2 	bl	8008268 <VL53L0X_WrWord>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006b0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d16b      	bne.n	8006bea <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8006b1a:	e066      	b.n	8006bea <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d160      	bne.n	8006be4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006b22:	f107 0310 	add.w	r3, r7, #16
 8006b26:	4619      	mov	r1, r3
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7fd f9b9 	bl	8003ea0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006b32:	7cfb      	ldrb	r3, [r7, #19]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01d      	beq.n	8006b74 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b38:	f107 031b 	add.w	r3, r7, #27
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	2100      	movs	r1, #0
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7fd f8a2 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 8006b4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10f      	bne.n	8006b74 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006b54:	f107 0318 	add.w	r3, r7, #24
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2151      	movs	r1, #81	; 0x51
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f001 fc0b 	bl	8008378 <VL53L0X_RdWord>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006b68:	8b3b      	ldrh	r3, [r7, #24]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fe07 	bl	800677e <VL53L0X_decode_timeout>
 8006b70:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006b72:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d109      	bne.n	8006b90 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b7c:	f107 031b 	add.w	r3, r7, #27
 8006b80:	461a      	mov	r2, r3
 8006b82:	2101      	movs	r1, #1
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7fd f880 	bl	8003c8a <VL53L0X_GetVcselPulsePeriod>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006b90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d128      	bne.n	8006bea <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006b98:	7efb      	ldrb	r3, [r7, #27]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff fe02 	bl	80067a8 <VL53L0X_calc_timeout_mclks>
 8006ba4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba8:	6a3a      	ldr	r2, [r7, #32]
 8006baa:	4413      	add	r3, r2
 8006bac:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006bae:	6a38      	ldr	r0, [r7, #32]
 8006bb0:	f7ff fdba 	bl	8006728 <VL53L0X_encode_timeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8006bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d108      	bne.n	8006bd2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006bc0:	8bfb      	ldrh	r3, [r7, #30]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2171      	movs	r1, #113	; 0x71
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f001 fb4e 	bl	8008268 <VL53L0X_WrWord>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006bd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d107      	bne.n	8006bea <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8006be2:	e002      	b.n	8006bea <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006be4:	23fc      	movs	r3, #252	; 0xfc
 8006be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006bea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3728      	adds	r7, #40	; 0x28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b08a      	sub	sp, #40	; 0x28
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	70fb      	strb	r3, [r7, #3]
 8006c02:	4613      	mov	r3, r2
 8006c04:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006c0c:	230c      	movs	r3, #12
 8006c0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8006c12:	2312      	movs	r3, #18
 8006c14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006c18:	2308      	movs	r3, #8
 8006c1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006c1e:	230e      	movs	r3, #14
 8006c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006c28:	78bb      	ldrb	r3, [r7, #2]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c34:	23fc      	movs	r3, #252	; 0xfc
 8006c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c3a:	e020      	b.n	8006c7e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10d      	bne.n	8006c5e <VL53L0X_set_vcsel_pulse_period+0x68>
 8006c42:	78ba      	ldrb	r2, [r7, #2]
 8006c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d304      	bcc.n	8006c56 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006c4c:	78ba      	ldrb	r2, [r7, #2]
 8006c4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d903      	bls.n	8006c5e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c56:	23fc      	movs	r3, #252	; 0xfc
 8006c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c5c:	e00f      	b.n	8006c7e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d10c      	bne.n	8006c7e <VL53L0X_set_vcsel_pulse_period+0x88>
 8006c64:	78ba      	ldrb	r2, [r7, #2]
 8006c66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d304      	bcc.n	8006c78 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006c6e:	78ba      	ldrb	r2, [r7, #2]
 8006c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d902      	bls.n	8006c7e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c78:	23fc      	movs	r3, #252	; 0xfc
 8006c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006c7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006c86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c8a:	e239      	b.n	8007100 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d150      	bne.n	8006d34 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006c92:	78bb      	ldrb	r3, [r7, #2]
 8006c94:	2b0c      	cmp	r3, #12
 8006c96:	d110      	bne.n	8006cba <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006c98:	2218      	movs	r2, #24
 8006c9a:	2157      	movs	r1, #87	; 0x57
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 fabf 	bl	8008220 <VL53L0X_WrByte>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006ca8:	2208      	movs	r2, #8
 8006caa:	2156      	movs	r1, #86	; 0x56
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fab7 	bl	8008220 <VL53L0X_WrByte>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cb8:	e17f      	b.n	8006fba <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006cba:	78bb      	ldrb	r3, [r7, #2]
 8006cbc:	2b0e      	cmp	r3, #14
 8006cbe:	d110      	bne.n	8006ce2 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006cc0:	2230      	movs	r2, #48	; 0x30
 8006cc2:	2157      	movs	r1, #87	; 0x57
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 faab 	bl	8008220 <VL53L0X_WrByte>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	2156      	movs	r1, #86	; 0x56
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 faa3 	bl	8008220 <VL53L0X_WrByte>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ce0:	e16b      	b.n	8006fba <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006ce2:	78bb      	ldrb	r3, [r7, #2]
 8006ce4:	2b10      	cmp	r3, #16
 8006ce6:	d110      	bne.n	8006d0a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006ce8:	2240      	movs	r2, #64	; 0x40
 8006cea:	2157      	movs	r1, #87	; 0x57
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fa97 	bl	8008220 <VL53L0X_WrByte>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	2156      	movs	r1, #86	; 0x56
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fa8f 	bl	8008220 <VL53L0X_WrByte>
 8006d02:	4603      	mov	r3, r0
 8006d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d08:	e157      	b.n	8006fba <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006d0a:	78bb      	ldrb	r3, [r7, #2]
 8006d0c:	2b12      	cmp	r3, #18
 8006d0e:	f040 8154 	bne.w	8006fba <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006d12:	2250      	movs	r2, #80	; 0x50
 8006d14:	2157      	movs	r1, #87	; 0x57
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 fa82 	bl	8008220 <VL53L0X_WrByte>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8006d22:	2208      	movs	r2, #8
 8006d24:	2156      	movs	r1, #86	; 0x56
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fa7a 	bl	8008220 <VL53L0X_WrByte>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d32:	e142      	b.n	8006fba <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	f040 813f 	bne.w	8006fba <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006d3c:	78bb      	ldrb	r3, [r7, #2]
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d14c      	bne.n	8006ddc <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8006d42:	2210      	movs	r2, #16
 8006d44:	2148      	movs	r1, #72	; 0x48
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fa6a 	bl	8008220 <VL53L0X_WrByte>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8006d52:	2208      	movs	r2, #8
 8006d54:	2147      	movs	r1, #71	; 0x47
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fa62 	bl	8008220 <VL53L0X_WrByte>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006d62:	2202      	movs	r2, #2
 8006d64:	2132      	movs	r1, #50	; 0x32
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fa5a 	bl	8008220 <VL53L0X_WrByte>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006d7a:	220c      	movs	r2, #12
 8006d7c:	2130      	movs	r1, #48	; 0x30
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 fa4e 	bl	8008220 <VL53L0X_WrByte>
 8006d84:	4603      	mov	r3, r0
 8006d86:	461a      	mov	r2, r3
 8006d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006d92:	2201      	movs	r2, #1
 8006d94:	21ff      	movs	r1, #255	; 0xff
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fa42 	bl	8008220 <VL53L0X_WrByte>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006daa:	2230      	movs	r2, #48	; 0x30
 8006dac:	2130      	movs	r1, #48	; 0x30
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 fa36 	bl	8008220 <VL53L0X_WrByte>
 8006db4:	4603      	mov	r3, r0
 8006db6:	461a      	mov	r2, r3
 8006db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	21ff      	movs	r1, #255	; 0xff
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 fa2a 	bl	8008220 <VL53L0X_WrByte>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006dda:	e0ee      	b.n	8006fba <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006ddc:	78bb      	ldrb	r3, [r7, #2]
 8006dde:	2b0a      	cmp	r3, #10
 8006de0:	d14c      	bne.n	8006e7c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8006de2:	2228      	movs	r2, #40	; 0x28
 8006de4:	2148      	movs	r1, #72	; 0x48
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fa1a 	bl	8008220 <VL53L0X_WrByte>
 8006dec:	4603      	mov	r3, r0
 8006dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8006df2:	2208      	movs	r2, #8
 8006df4:	2147      	movs	r1, #71	; 0x47
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 fa12 	bl	8008220 <VL53L0X_WrByte>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006e02:	2203      	movs	r2, #3
 8006e04:	2132      	movs	r1, #50	; 0x32
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fa0a 	bl	8008220 <VL53L0X_WrByte>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006e1a:	2209      	movs	r2, #9
 8006e1c:	2130      	movs	r1, #48	; 0x30
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 f9fe 	bl	8008220 <VL53L0X_WrByte>
 8006e24:	4603      	mov	r3, r0
 8006e26:	461a      	mov	r2, r3
 8006e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006e32:	2201      	movs	r2, #1
 8006e34:	21ff      	movs	r1, #255	; 0xff
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 f9f2 	bl	8008220 <VL53L0X_WrByte>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	2130      	movs	r1, #48	; 0x30
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 f9e6 	bl	8008220 <VL53L0X_WrByte>
 8006e54:	4603      	mov	r3, r0
 8006e56:	461a      	mov	r2, r3
 8006e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006e62:	2200      	movs	r2, #0
 8006e64:	21ff      	movs	r1, #255	; 0xff
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 f9da 	bl	8008220 <VL53L0X_WrByte>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e74:	4313      	orrs	r3, r2
 8006e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e7a:	e09e      	b.n	8006fba <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006e7c:	78bb      	ldrb	r3, [r7, #2]
 8006e7e:	2b0c      	cmp	r3, #12
 8006e80:	d14c      	bne.n	8006f1c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006e82:	2238      	movs	r2, #56	; 0x38
 8006e84:	2148      	movs	r1, #72	; 0x48
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 f9ca 	bl	8008220 <VL53L0X_WrByte>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8006e92:	2208      	movs	r2, #8
 8006e94:	2147      	movs	r1, #71	; 0x47
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 f9c2 	bl	8008220 <VL53L0X_WrByte>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006ea2:	2203      	movs	r2, #3
 8006ea4:	2132      	movs	r1, #50	; 0x32
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 f9ba 	bl	8008220 <VL53L0X_WrByte>
 8006eac:	4603      	mov	r3, r0
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006eba:	2208      	movs	r2, #8
 8006ebc:	2130      	movs	r1, #48	; 0x30
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 f9ae 	bl	8008220 <VL53L0X_WrByte>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	21ff      	movs	r1, #255	; 0xff
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 f9a2 	bl	8008220 <VL53L0X_WrByte>
 8006edc:	4603      	mov	r3, r0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006eea:	2220      	movs	r2, #32
 8006eec:	2130      	movs	r1, #48	; 0x30
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 f996 	bl	8008220 <VL53L0X_WrByte>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006f02:	2200      	movs	r2, #0
 8006f04:	21ff      	movs	r1, #255	; 0xff
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 f98a 	bl	8008220 <VL53L0X_WrByte>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f1a:	e04e      	b.n	8006fba <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006f1c:	78bb      	ldrb	r3, [r7, #2]
 8006f1e:	2b0e      	cmp	r3, #14
 8006f20:	d14b      	bne.n	8006fba <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006f22:	2248      	movs	r2, #72	; 0x48
 8006f24:	2148      	movs	r1, #72	; 0x48
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 f97a 	bl	8008220 <VL53L0X_WrByte>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8006f32:	2208      	movs	r2, #8
 8006f34:	2147      	movs	r1, #71	; 0x47
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 f972 	bl	8008220 <VL53L0X_WrByte>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006f42:	2203      	movs	r2, #3
 8006f44:	2132      	movs	r1, #50	; 0x32
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 f96a 	bl	8008220 <VL53L0X_WrByte>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f54:	4313      	orrs	r3, r2
 8006f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006f5a:	2207      	movs	r2, #7
 8006f5c:	2130      	movs	r1, #48	; 0x30
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 f95e 	bl	8008220 <VL53L0X_WrByte>
 8006f64:	4603      	mov	r3, r0
 8006f66:	461a      	mov	r2, r3
 8006f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006f72:	2201      	movs	r2, #1
 8006f74:	21ff      	movs	r1, #255	; 0xff
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 f952 	bl	8008220 <VL53L0X_WrByte>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f84:	4313      	orrs	r3, r2
 8006f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	2130      	movs	r1, #48	; 0x30
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 f946 	bl	8008220 <VL53L0X_WrByte>
 8006f94:	4603      	mov	r3, r0
 8006f96:	461a      	mov	r2, r3
 8006f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	21ff      	movs	r1, #255	; 0xff
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 f93a 	bl	8008220 <VL53L0X_WrByte>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006fba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d17f      	bne.n	80070c2 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8006fc2:	78bb      	ldrb	r3, [r7, #2]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe fe3c 	bl	8005c42 <VL53L0X_encode_vcsel_period>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d045      	beq.n	8007066 <VL53L0X_set_vcsel_pulse_period+0x470>
 8006fda:	e06e      	b.n	80070ba <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006fdc:	f107 0314 	add.w	r3, r7, #20
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2103      	movs	r1, #3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff fc33 	bl	8006850 <get_sequence_step_timeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006ff0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d109      	bne.n	800700c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8006ff8:	f107 0310 	add.w	r3, r7, #16
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	2102      	movs	r1, #2
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff fc25 	bl	8006850 <get_sequence_step_timeout>
 8007006:	4603      	mov	r3, r0
 8007008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800700c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007014:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007018:	461a      	mov	r2, r3
 800701a:	2150      	movs	r1, #80	; 0x50
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f8ff 	bl	8008220 <VL53L0X_WrByte>
 8007022:	4603      	mov	r3, r0
 8007024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007028:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800702c:	2b00      	cmp	r3, #0
 800702e:	d108      	bne.n	8007042 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	461a      	mov	r2, r3
 8007034:	2103      	movs	r1, #3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fceb 	bl	8006a12 <set_sequence_step_timeout>
 800703c:	4603      	mov	r3, r0
 800703e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007046:	2b00      	cmp	r3, #0
 8007048:	d108      	bne.n	800705c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	461a      	mov	r2, r3
 800704e:	2102      	movs	r1, #2
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff fcde 	bl	8006a12 <set_sequence_step_timeout>
 8007056:	4603      	mov	r3, r0
 8007058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	78ba      	ldrb	r2, [r7, #2]
 8007060:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007064:	e02e      	b.n	80070c4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007066:	f107 0318 	add.w	r3, r7, #24
 800706a:	461a      	mov	r2, r3
 800706c:	2104      	movs	r1, #4
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff fbee 	bl	8006850 <get_sequence_step_timeout>
 8007074:	4603      	mov	r3, r0
 8007076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800707a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8007082:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007086:	461a      	mov	r2, r3
 8007088:	2170      	movs	r1, #112	; 0x70
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 f8c8 	bl	8008220 <VL53L0X_WrByte>
 8007090:	4603      	mov	r3, r0
 8007092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007096:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800709a:	2b00      	cmp	r3, #0
 800709c:	d108      	bne.n	80070b0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	461a      	mov	r2, r3
 80070a2:	2104      	movs	r1, #4
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff fcb4 	bl	8006a12 <set_sequence_step_timeout>
 80070aa:	4603      	mov	r3, r0
 80070ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	78ba      	ldrb	r2, [r7, #2]
 80070b4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80070b8:	e004      	b.n	80070c4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80070ba:	23fc      	movs	r3, #252	; 0xfc
 80070bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070c0:	e000      	b.n	80070c4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80070c2:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80070c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d109      	bne.n	80070e0 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80070d2:	69f9      	ldr	r1, [r7, #28]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fc fd9a 	bl	8003c0e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80070da:	4603      	mov	r3, r0
 80070dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80070e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80070e8:	f107 010f 	add.w	r1, r7, #15
 80070ec:	2301      	movs	r3, #1
 80070ee:	2200      	movs	r2, #0
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7fe fcc2 	bl	8005a7a <VL53L0X_perform_phase_calibration>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80070fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007100:	4618      	mov	r0, r3
 8007102:	3728      	adds	r7, #40	; 0x28
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	460b      	mov	r3, r1
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007116:	2300      	movs	r3, #0
 8007118:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800711a:	7afb      	ldrb	r3, [r7, #11]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007120:	2b01      	cmp	r3, #1
 8007122:	d00a      	beq.n	800713a <VL53L0X_get_vcsel_pulse_period+0x32>
 8007124:	e013      	b.n	800714e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007126:	f107 0316 	add.w	r3, r7, #22
 800712a:	461a      	mov	r2, r3
 800712c:	2150      	movs	r1, #80	; 0x50
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 f8f8 	bl	8008324 <VL53L0X_RdByte>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007138:	e00b      	b.n	8007152 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800713a:	f107 0316 	add.w	r3, r7, #22
 800713e:	461a      	mov	r2, r3
 8007140:	2170      	movs	r1, #112	; 0x70
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f001 f8ee 	bl	8008324 <VL53L0X_RdByte>
 8007148:	4603      	mov	r3, r0
 800714a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800714c:	e001      	b.n	8007152 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800714e:	23fc      	movs	r3, #252	; 0xfc
 8007150:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007152:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d107      	bne.n	800716a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800715a:	7dbb      	ldrb	r3, [r7, #22]
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fd5e 	bl	8005c1e <VL53L0X_decode_vcsel_period>
 8007162:	4603      	mov	r3, r0
 8007164:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	701a      	strb	r2, [r3, #0]

	return Status;
 800716a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b090      	sub	sp, #64	; 0x40
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007180:	2300      	movs	r3, #0
 8007182:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007186:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800718a:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800718c:	f240 7376 	movw	r3, #1910	; 0x776
 8007190:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 8007192:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007196:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007198:	f44f 7325 	mov.w	r3, #660	; 0x294
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 800719e:	f240 234e 	movw	r3, #590	; 0x24e
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 80071a4:	f240 23b2 	movw	r3, #690	; 0x2b2
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80071aa:	f44f 7325 	mov.w	r3, #660	; 0x294
 80071ae:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80071b0:	f240 2326 	movw	r3, #550	; 0x226
 80071b4:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80071be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80071ca:	f107 0310 	add.w	r3, r7, #16
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7fc fe65 	bl	8003ea0 <VL53L0X_GetSequenceStepEnables>
 80071d6:	4603      	mov	r3, r0
 80071d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 80071dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d15b      	bne.n	800729c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 80071e4:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d105      	bne.n	80071f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80071ea:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 80071f0:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d052      	beq.n	800729c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	461a      	mov	r2, r3
 80071fc:	2102      	movs	r1, #2
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff fb26 	bl	8006850 <get_sequence_step_timeout>
 8007204:	4603      	mov	r3, r0
 8007206:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 800720a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 8007212:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007216:	e07d      	b.n	8007314 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007218:	7c3b      	ldrb	r3, [r7, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00f      	beq.n	800723e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800721e:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007222:	4413      	add	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722a:	429a      	cmp	r2, r3
 800722c:	d204      	bcs.n	8007238 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800722e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	63bb      	str	r3, [r7, #56]	; 0x38
 8007236:	e002      	b.n	800723e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007238:	23fc      	movs	r3, #252	; 0xfc
 800723a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800723e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 8007246:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800724a:	e063      	b.n	8007314 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800724c:	7cbb      	ldrb	r3, [r7, #18]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d011      	beq.n	8007276 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	4413      	add	r3, r2
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	429a      	cmp	r2, r3
 8007262:	d204      	bcs.n	800726e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	63bb      	str	r3, [r7, #56]	; 0x38
 800726c:	e016      	b.n	800729c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800726e:	23fc      	movs	r3, #252	; 0xfc
 8007270:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007274:	e012      	b.n	800729c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007276:	7c7b      	ldrb	r3, [r7, #17]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00f      	beq.n	800729c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007280:	4413      	add	r3, r2
 8007282:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	429a      	cmp	r2, r3
 800728a:	d204      	bcs.n	8007296 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800728c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	63bb      	str	r3, [r7, #56]	; 0x38
 8007294:	e002      	b.n	800729c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007296:	23fc      	movs	r3, #252	; 0xfc
 8007298:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800729c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 80072a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80072a8:	e034      	b.n	8007314 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80072aa:	7cfb      	ldrb	r3, [r7, #19]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d019      	beq.n	80072e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80072b0:	f107 0308 	add.w	r3, r7, #8
 80072b4:	461a      	mov	r2, r3
 80072b6:	2103      	movs	r1, #3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff fac9 	bl	8006850 <get_sequence_step_timeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	6a3a      	ldr	r2, [r7, #32]
 80072c8:	4413      	add	r3, r2
 80072ca:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d204      	bcs.n	80072de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80072d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	63bb      	str	r3, [r7, #56]	; 0x38
 80072dc:	e002      	b.n	80072e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072de:	23fc      	movs	r3, #252	; 0xfc
 80072e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80072e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d111      	bne.n	8007310 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 80072ec:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 80072f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80072fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072fc:	2104      	movs	r1, #4
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fb87 	bl	8006a12 <set_sequence_step_timeout>
 8007304:	4603      	mov	r3, r0
 8007306:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007310:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007314:	4618      	mov	r0, r3
 8007316:	3740      	adds	r7, #64	; 0x40
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b090      	sub	sp, #64	; 0x40
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007326:	2300      	movs	r3, #0
 8007328:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800732c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007330:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007332:	f240 7376 	movw	r3, #1910	; 0x776
 8007336:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007338:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800733e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007342:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007344:	f240 234e 	movw	r3, #590	; 0x24e
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800734a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007350:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007356:	f240 2326 	movw	r3, #550	; 0x226
 800735a:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007364:	441a      	add	r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800736a:	f107 0318 	add.w	r3, r7, #24
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7fc fd95 	bl	8003ea0 <VL53L0X_GetSequenceStepEnables>
 8007376:	4603      	mov	r3, r0
 8007378:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800737c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007384:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007388:	e075      	b.n	8007476 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800738a:	7e3b      	ldrb	r3, [r7, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d105      	bne.n	800739c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007390:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007392:	2b00      	cmp	r3, #0
 8007394:	d102      	bne.n	800739c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007396:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007398:	2b00      	cmp	r3, #0
 800739a:	d030      	beq.n	80073fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800739c:	f107 0310 	add.w	r3, r7, #16
 80073a0:	461a      	mov	r2, r3
 80073a2:	2102      	movs	r1, #2
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7ff fa53 	bl	8006850 <get_sequence_step_timeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80073b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d122      	bne.n	80073fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80073b8:	7e3b      	ldrb	r3, [r7, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d007      	beq.n	80073ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80073c2:	6939      	ldr	r1, [r7, #16]
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80073c8:	441a      	add	r2, r3
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80073ce:	7ebb      	ldrb	r3, [r7, #26]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d009      	beq.n	80073e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80073d8:	6939      	ldr	r1, [r7, #16]
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	440b      	add	r3, r1
 80073de:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80073e0:	441a      	add	r2, r3
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	e00a      	b.n	80073fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80073e8:	7e7b      	ldrb	r3, [r7, #25]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80073f2:	6939      	ldr	r1, [r7, #16]
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80073f8:	441a      	add	r2, r3
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007402:	2b00      	cmp	r3, #0
 8007404:	d114      	bne.n	8007430 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007406:	7efb      	ldrb	r3, [r7, #27]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d011      	beq.n	8007430 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800740c:	f107 030c 	add.w	r3, r7, #12
 8007410:	461a      	mov	r2, r3
 8007412:	2103      	movs	r1, #3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff fa1b 	bl	8006850 <get_sequence_step_timeout>
 800741a:	4603      	mov	r3, r0
 800741c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007424:	68f9      	ldr	r1, [r7, #12]
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800742a:	441a      	add	r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007430:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007434:	2b00      	cmp	r3, #0
 8007436:	d114      	bne.n	8007462 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007438:	7f3b      	ldrb	r3, [r7, #28]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d011      	beq.n	8007462 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800743e:	f107 0314 	add.w	r3, r7, #20
 8007442:	461a      	mov	r2, r3
 8007444:	2104      	movs	r1, #4
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fa02 	bl	8006850 <get_sequence_step_timeout>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007456:	6979      	ldr	r1, [r7, #20]
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800745c:	441a      	add	r2, r3
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007462:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007466:	2b00      	cmp	r3, #0
 8007468:	d103      	bne.n	8007472 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007472:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007476:	4618      	mov	r0, r3
 8007478:	3740      	adds	r7, #64	; 0x40
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800748a:	2300      	movs	r3, #0
 800748c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007492:	e0c6      	b.n	8007622 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	4413      	add	r3, r2
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	3301      	adds	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80074a4:	7cfb      	ldrb	r3, [r7, #19]
 80074a6:	2bff      	cmp	r3, #255	; 0xff
 80074a8:	f040 808d 	bne.w	80075c6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	4413      	add	r3, r2
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	747b      	strb	r3, [r7, #17]
			Index++;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	3301      	adds	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80074bc:	7c7b      	ldrb	r3, [r7, #17]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d87e      	bhi.n	80075c0 <VL53L0X_load_tuning_settings+0x140>
 80074c2:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <VL53L0X_load_tuning_settings+0x48>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074d9 	.word	0x080074d9
 80074cc:	08007513 	.word	0x08007513
 80074d0:	0800754d 	.word	0x0800754d
 80074d4:	08007587 	.word	0x08007587
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	4413      	add	r3, r2
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	743b      	strb	r3, [r7, #16]
				Index++;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	3301      	adds	r3, #1
 80074e6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	4413      	add	r3, r2
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	3301      	adds	r3, #1
 80074f6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80074f8:	7c3b      	ldrb	r3, [r7, #16]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	b29a      	uxth	r2, r3
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	b29b      	uxth	r3, r3
 8007504:	4413      	add	r3, r2
 8007506:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	89ba      	ldrh	r2, [r7, #12]
 800750c:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 8007510:	e087      	b.n	8007622 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	4413      	add	r3, r2
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	743b      	strb	r3, [r7, #16]
				Index++;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	3301      	adds	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	4413      	add	r3, r2
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	3301      	adds	r3, #1
 8007530:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007532:	7c3b      	ldrb	r3, [r7, #16]
 8007534:	b29b      	uxth	r3, r3
 8007536:	021b      	lsls	r3, r3, #8
 8007538:	b29a      	uxth	r2, r3
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	b29b      	uxth	r3, r3
 800753e:	4413      	add	r3, r2
 8007540:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	89ba      	ldrh	r2, [r7, #12]
 8007546:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 800754a:	e06a      	b.n	8007622 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	4413      	add	r3, r2
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	743b      	strb	r3, [r7, #16]
				Index++;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	3301      	adds	r3, #1
 800755a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	4413      	add	r3, r2
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	3301      	adds	r3, #1
 800756a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800756c:	7c3b      	ldrb	r3, [r7, #16]
 800756e:	b29b      	uxth	r3, r3
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	b29a      	uxth	r2, r3
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	b29b      	uxth	r3, r3
 8007578:	4413      	add	r3, r2
 800757a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	89ba      	ldrh	r2, [r7, #12]
 8007580:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 8007584:	e04d      	b.n	8007622 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	4413      	add	r3, r2
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	743b      	strb	r3, [r7, #16]
				Index++;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	3301      	adds	r3, #1
 8007594:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	4413      	add	r3, r2
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	73fb      	strb	r3, [r7, #15]
				Index++;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	3301      	adds	r3, #1
 80075a4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80075a6:	7c3b      	ldrb	r3, [r7, #16]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	4413      	add	r3, r2
 80075b4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	89ba      	ldrh	r2, [r7, #12]
 80075ba:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 80075be:	e030      	b.n	8007622 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075c0:	23fc      	movs	r3, #252	; 0xfc
 80075c2:	77fb      	strb	r3, [r7, #31]
 80075c4:	e02d      	b.n	8007622 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80075c6:	7cfb      	ldrb	r3, [r7, #19]
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d828      	bhi.n	800761e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	4413      	add	r3, r2
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	74bb      	strb	r3, [r7, #18]
			Index++;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	3301      	adds	r3, #1
 80075da:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80075dc:	2300      	movs	r3, #0
 80075de:	61bb      	str	r3, [r7, #24]
 80075e0:	e00f      	b.n	8007602 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	4413      	add	r3, r2
 80075e8:	7819      	ldrb	r1, [r3, #0]
 80075ea:	f107 0208 	add.w	r2, r7, #8
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	4413      	add	r3, r2
 80075f2:	460a      	mov	r2, r1
 80075f4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	3301      	adds	r3, #1
 80075fa:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	3301      	adds	r3, #1
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	7cfb      	ldrb	r3, [r7, #19]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	429a      	cmp	r2, r3
 8007608:	dbeb      	blt.n	80075e2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800760a:	7cfb      	ldrb	r3, [r7, #19]
 800760c:	f107 0208 	add.w	r2, r7, #8
 8007610:	7cb9      	ldrb	r1, [r7, #18]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fda8 	bl	8008168 <VL53L0X_WriteMulti>
 8007618:	4603      	mov	r3, r0
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e001      	b.n	8007622 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800761e:	23fc      	movs	r3, #252	; 0xfc
 8007620:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	4413      	add	r3, r2
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <VL53L0X_load_tuning_settings+0x1b8>
 800762e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007632:	2b00      	cmp	r3, #0
 8007634:	f43f af2e 	beq.w	8007494 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007638:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007650:	2300      	movs	r3, #0
 8007652:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800765a:	f107 0313 	add.w	r3, r7, #19
 800765e:	4619      	mov	r1, r3
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7fc fca9 	bl	8003fb8 <VL53L0X_GetXTalkCompensationEnable>
 8007666:	4603      	mov	r3, r0
 8007668:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800766a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d111      	bne.n	8007696 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007672:	7cfb      	ldrb	r3, [r7, #19]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00e      	beq.n	8007696 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	8a9b      	ldrh	r3, [r3, #20]
 8007682:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	3380      	adds	r3, #128	; 0x80
 8007690:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007696:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3720      	adds	r7, #32
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b086      	sub	sp, #24
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80076ba:	f107 0310 	add.w	r3, r7, #16
 80076be:	461a      	mov	r2, r3
 80076c0:	68b9      	ldr	r1, [r7, #8]
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7ff ffbe 	bl	8007644 <VL53L0X_get_total_xtalk_rate>
 80076c8:	4603      	mov	r3, r0
 80076ca:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80076cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d105      	bne.n	80076e0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	441a      	add	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	601a      	str	r2, [r3, #0]

	return Status;
 80076e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 80076ec:	b084      	sub	sp, #16
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	f107 0c18 	add.w	ip, r7, #24
 80076f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076fc:	2300      	movs	r3, #0
 80076fe:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 800770c:	2300      	movs	r3, #0
 800770e:	607b      	str	r3, [r7, #4]
 8007710:	e00d      	b.n	800772e <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f107 0218 	add.w	r2, r7, #24
 8007718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800771c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800771e:	429a      	cmp	r2, r3
 8007720:	d802      	bhi.n	8007728 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60bb      	str	r3, [r7, #8]
			break;
 8007726:	e006      	b.n	8007736 <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3301      	adds	r3, #1
 800772c:	607b      	str	r3, [r7, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007732:	429a      	cmp	r2, r3
 8007734:	d8ed      	bhi.n	8007712 <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 8007736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	429a      	cmp	r2, r3
 800773c:	d105      	bne.n	800774a <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 800773e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007740:	3b01      	subs	r3, #1
 8007742:	60bb      	str	r3, [r7, #8]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	e008      	b.n	800775c <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d102      	bne.n	8007756 <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	e002      	b.n	800775c <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3b01      	subs	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007760:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007766:	601a      	str	r2, [r3, #0]

	return Status;
 8007768:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	b004      	add	sp, #16
 8007776:	4770      	bx	lr

08007778 <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 8007778:	b5b0      	push	{r4, r5, r7, lr}
 800777a:	b0ba      	sub	sp, #232	; 0xe8
 800777c:	af0e      	add	r7, sp, #56	; 0x38
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007784:	2300      	movs	r3, #0
 8007786:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007792:	f107 031c 	add.w	r3, r7, #28
 8007796:	4619      	mov	r1, r3
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f7fc f928 	bl	80039ee <VL53L0X_GetDeviceParameters>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 80077a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d803      	bhi.n	80077b4 <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 80077ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077b2:	e07c      	b.n	80078ae <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 80077b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d304      	bcc.n	80077c6 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 80077bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077c4:	e073      	b.n	80078ae <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 80077c6:	f107 0314 	add.w	r3, r7, #20
 80077ca:	930d      	str	r3, [sp, #52]	; 0x34
 80077cc:	f107 0318 	add.w	r3, r7, #24
 80077d0:	930c      	str	r3, [sp, #48]	; 0x30
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80077d6:	2307      	movs	r3, #7
 80077d8:	930a      	str	r3, [sp, #40]	; 0x28
 80077da:	466d      	mov	r5, sp
 80077dc:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80077e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80077ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80077f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80077f6:	f7ff ff79 	bl	80076ec <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d109      	bne.n	8007816 <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	3314      	adds	r3, #20
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	33b0      	adds	r3, #176	; 0xb0
 800780a:	443b      	add	r3, r7
 800780c:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8007810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007814:	e04b      	b.n	80078ae <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	330e      	adds	r3, #14
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	33b0      	adds	r3, #176	; 0xb0
 800781e:	443b      	add	r3, r7
 8007820:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8007824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	330e      	adds	r3, #14
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	33b0      	adds	r3, #176	; 0xb0
 8007830:	443b      	add	r3, r7
 8007832:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8007836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	3314      	adds	r3, #20
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	33b0      	adds	r3, #176	; 0xb0
 8007842:	443b      	add	r3, r7
 8007844:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8007848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	3314      	adds	r3, #20
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	33b0      	adds	r3, #176	; 0xb0
 8007854:	443b      	add	r3, r7
 8007856:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800785a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 800785e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007866:	429a      	cmp	r2, r3
 8007868:	d01d      	beq.n	80078a6 <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 800786a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800786e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007872:	1ad2      	subs	r2, r2, r3
 8007874:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007878:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800787c:	1acb      	subs	r3, r1, r3
 800787e:	0a1b      	lsrs	r3, r3, #8
 8007880:	fbb2 f3f3 	udiv	r3, r2, r3
 8007884:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 8007888:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 8007890:	0a1b      	lsrs	r3, r3, #8
 8007892:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007896:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 800789a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800789e:	4413      	add	r3, r2
 80078a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078a4:	e003      	b.n	80078ae <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 80078a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 80078ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078b2:	0c1a      	lsrs	r2, r3, #16
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80078b8:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 80078bc:	4618      	mov	r0, r3
 80078be:	37b0      	adds	r7, #176	; 0xb0
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bdb0      	pop	{r4, r5, r7, pc}

080078c4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b0b0      	sub	sp, #192	; 0xc0
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80078d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80078d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80078d8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80078dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 80078e0:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80078e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80078e8:	f241 235c 	movw	r3, #4700	; 0x125c
 80078ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80078f0:	4b98      	ldr	r3, [pc, #608]	; (8007b54 <VL53L0X_calc_sigma_estimate+0x290>)
 80078f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80078f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80078fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80078fe:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007902:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007906:	fbb2 f3f3 	udiv	r3, r2, r3
 800790a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800790e:	4b92      	ldr	r3, [pc, #584]	; (8007b58 <VL53L0X_calc_sigma_estimate+0x294>)
 8007910:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007916:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007918:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800791c:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 800791e:	f240 6377 	movw	r3, #1655	; 0x677
 8007922:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007924:	2300      	movs	r3, #0
 8007926:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007938:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 8007940:	f107 0314 	add.w	r3, r7, #20
 8007944:	461a      	mov	r2, r3
 8007946:	68b9      	ldr	r1, [r7, #8]
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7ff feaa 	bl	80076a2 <VL53L0X_get_total_signal_rate>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007954:	f107 0318 	add.w	r3, r7, #24
 8007958:	461a      	mov	r2, r3
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f7ff fe71 	bl	8007644 <VL53L0X_get_total_xtalk_rate>
 8007962:	4603      	mov	r3, r0
 8007964:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800796e:	fb02 f303 	mul.w	r3, r2, r3
 8007972:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007976:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800797a:	0c1b      	lsrs	r3, r3, #16
 800797c:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007984:	fb02 f303 	mul.w	r3, r2, r3
 8007988:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800798c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007992:	429a      	cmp	r2, r3
 8007994:	d902      	bls.n	800799c <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007998:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800799c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d160      	bne.n	8007a66 <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80079aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80079b4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80079b8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80079bc:	461a      	mov	r2, r3
 80079be:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f7fe fef0 	bl	80067a8 <VL53L0X_calc_timeout_mclks>
 80079c8:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80079d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80079da:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80079de:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80079e2:	461a      	mov	r2, r3
 80079e4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f7fe fedd 	bl	80067a8 <VL53L0X_calc_timeout_mclks>
 80079ee:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80079f0:	2303      	movs	r3, #3
 80079f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 80079f6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80079fa:	2b08      	cmp	r3, #8
 80079fc:	d102      	bne.n	8007a04 <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 80079fe:	2302      	movs	r3, #2
 8007a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007a04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a08:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007a0a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
 8007a12:	02db      	lsls	r3, r3, #11
 8007a14:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a1c:	4a4f      	ldr	r2, [pc, #316]	; (8007b5c <VL53L0X_calc_sigma_estimate+0x298>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	099b      	lsrs	r3, r3, #6
 8007a24:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 8007a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a2a:	fb02 f303 	mul.w	r3, r2, r3
 8007a2e:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a32:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a36:	4a49      	ldr	r2, [pc, #292]	; (8007b5c <VL53L0X_calc_sigma_estimate+0x298>)
 8007a38:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3c:	099b      	lsrs	r3, r3, #6
 8007a3e:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	3380      	adds	r3, #128	; 0x80
 8007a44:	0a1b      	lsrs	r3, r3, #8
 8007a46:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4c:	fb02 f303 	mul.w	r3, r2, r3
 8007a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a58:	3380      	adds	r3, #128	; 0x80
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007a66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 8007a6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a72:	e14a      	b.n	8007d0a <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 8007a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d109      	bne.n	8007a8e <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a80:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a88:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007a8c:	e13b      	b.n	8007d06 <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 8007a8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 8007a96:	2301      	movs	r3, #1
 8007a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aa0:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aa4:	041a      	lsls	r2, r3, #16
 8007aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007ab0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d903      	bls.n	8007ac4 <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007abc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007ac4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ac8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007acc:	fb02 f303 	mul.w	r3, r2, r3
 8007ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007ad4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007ad8:	4613      	mov	r3, r2
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	4413      	add	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fe f8c0 	bl	8005c66 <VL53L0X_isqrt>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	891b      	ldrh	r3, [r3, #8]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007af4:	fb02 f303 	mul.w	r3, r2, r3
 8007af8:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007afc:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b02:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007b04:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007b06:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007b0a:	4a14      	ldr	r2, [pc, #80]	; (8007b5c <VL53L0X_calc_sigma_estimate+0x298>)
 8007b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b10:	099b      	lsrs	r3, r3, #6
 8007b12:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8007b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b16:	041b      	lsls	r3, r3, #16
 8007b18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b1c:	4a0f      	ldr	r2, [pc, #60]	; (8007b5c <VL53L0X_calc_sigma_estimate+0x298>)
 8007b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b22:	099b      	lsrs	r3, r3, #6
 8007b24:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 8007b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007b2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bfb8      	it	lt
 8007b38:	425b      	neglt	r3, r3
 8007b3a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	021b      	lsls	r3, r3, #8
 8007b40:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	7e1b      	ldrb	r3, [r3, #24]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 8007b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b52:	e032      	b.n	8007bba <VL53L0X_calc_sigma_estimate+0x2f6>
 8007b54:	028f87ae 	.word	0x028f87ae
 8007b58:	0006999a 	.word	0x0006999a
 8007b5c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 8007b60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b78:	fb02 f303 	mul.w	r3, r2, r3
 8007b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007b80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b86:	4413      	add	r3, r2
 8007b88:	0c1b      	lsrs	r3, r3, #16
 8007b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8007b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b92:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 8007b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b9e:	085b      	lsrs	r3, r3, #1
 8007ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8007ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ba8:	fb03 f303 	mul.w	r3, r3, r3
 8007bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8007bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bb4:	0b9b      	lsrs	r3, r3, #14
 8007bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bc0:	fb02 f303 	mul.w	r3, r2, r3
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007bcc:	0c1b      	lsrs	r3, r3, #16
 8007bce:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd2:	fb03 f303 	mul.w	r3, r3, r3
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 8007bd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007bdc:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	fb03 f303 	mul.w	r3, r3, r3
 8007bee:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	4413      	add	r3, r2
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bfa:	f7fe f834 	bl	8005c66 <VL53L0X_isqrt>
 8007bfe:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	041b      	lsls	r3, r3, #16
 8007c04:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	3332      	adds	r3, #50	; 0x32
 8007c0a:	4a42      	ldr	r2, [pc, #264]	; (8007d14 <VL53L0X_calc_sigma_estimate+0x450>)
 8007c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c10:	095a      	lsrs	r2, r3, #5
 8007c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c20:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8007c24:	fb02 f303 	mul.w	r3, r2, r3
 8007c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007c2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c30:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007c34:	3308      	adds	r3, #8
 8007c36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8007c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c3e:	4a36      	ldr	r2, [pc, #216]	; (8007d18 <VL53L0X_calc_sigma_estimate+0x454>)
 8007c40:	fba2 2303 	umull	r2, r3, r2, r3
 8007c44:	0b5b      	lsrs	r3, r3, #13
 8007c46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d903      	bls.n	8007c5e <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 8007c5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8007c6c:	4a2b      	ldr	r2, [pc, #172]	; (8007d1c <VL53L0X_calc_sigma_estimate+0x458>)
 8007c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c72:	099b      	lsrs	r3, r3, #6
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8007c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c7e:	441a      	add	r2, r3
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fd ffed 	bl	8005c66 <VL53L0X_isqrt>
 8007c8c:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007c9a:	4a20      	ldr	r2, [pc, #128]	; (8007d1c <VL53L0X_calc_sigma_estimate+0x458>)
 8007c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca0:	099b      	lsrs	r3, r3, #6
 8007ca2:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ca8:	fb03 f303 	mul.w	r3, r3, r3
 8007cac:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	fb03 f303 	mul.w	r3, r3, r3
 8007cb4:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	4413      	add	r3, r2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fd ffd2 	bl	8005c66 <VL53L0X_isqrt>
 8007cc2:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007cd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d009      	beq.n	8007cec <VL53L0X_calc_sigma_estimate+0x428>
 8007cd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d005      	beq.n	8007cec <VL53L0X_calc_sigma_estimate+0x428>
 8007ce0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d903      	bls.n	8007cf4 <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 8007cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007cfa:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	37c0      	adds	r7, #192	; 0xc0
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	51eb851f 	.word	0x51eb851f
 8007d18:	d1b71759 	.word	0xd1b71759
 8007d1c:	10624dd3 	.word	0x10624dd3

08007d20 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b090      	sub	sp, #64	; 0x40
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	607a      	str	r2, [r7, #4]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	72fb      	strb	r3, [r7, #11]
 8007d30:	4613      	mov	r3, r2
 8007d32:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d34:	2300      	movs	r3, #0
 8007d36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	10db      	asrs	r3, r3, #3
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007d80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d017      	beq.n	8007db8 <VL53L0X_get_pal_range_status+0x98>
 8007d88:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d8c:	2b05      	cmp	r3, #5
 8007d8e:	d013      	beq.n	8007db8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007d90:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d94:	2b07      	cmp	r3, #7
 8007d96:	d00f      	beq.n	8007db8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007d98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d9c:	2b0c      	cmp	r3, #12
 8007d9e:	d00b      	beq.n	8007db8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007da0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007da4:	2b0d      	cmp	r3, #13
 8007da6:	d007      	beq.n	8007db8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007da8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007dac:	2b0e      	cmp	r3, #14
 8007dae:	d003      	beq.n	8007db8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007db0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007db4:	2b0f      	cmp	r3, #15
 8007db6:	d103      	bne.n	8007dc0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007dbe:	e002      	b.n	8007dc6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007dc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007dce:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7fc f9c2 	bl	8004160 <VL53L0X_GetLimitCheckEnable>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d03c      	beq.n	8007e64 <VL53L0X_get_pal_range_status+0x144>
 8007dea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d138      	bne.n	8007e64 <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df6:	461a      	mov	r2, r3
 8007df8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff fd62 	bl	80078c4 <VL53L0X_calc_sigma_estimate>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 8007e06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10a      	bne.n	8007e24 <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 8007e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f107 0210 	add.w	r2, r7, #16
 8007e16:	4619      	mov	r1, r3
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff fcad 	bl	8007778 <VL53L0X_calc_dmax>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007e24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d103      	bne.n	8007e34 <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e32:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007e34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d113      	bne.n	8007e64 <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007e3c:	f107 0320 	add.w	r3, r7, #32
 8007e40:	461a      	mov	r2, r3
 8007e42:	2100      	movs	r1, #0
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f7fc fa0f 	bl	8004268 <VL53L0X_GetLimitCheckValue>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d006      	beq.n	8007e64 <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 8007e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e58:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d902      	bls.n	8007e64 <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007e64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d109      	bne.n	8007e80 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007e6c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007e70:	461a      	mov	r2, r3
 8007e72:	2102      	movs	r1, #2
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7fc f973 	bl	8004160 <VL53L0X_GetLimitCheckEnable>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007e80:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d044      	beq.n	8007f12 <VL53L0X_get_pal_range_status+0x1f2>
 8007e88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d140      	bne.n	8007f12 <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007e90:	f107 031c 	add.w	r3, r7, #28
 8007e94:	461a      	mov	r2, r3
 8007e96:	2102      	movs	r1, #2
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7fc f9e5 	bl	8004268 <VL53L0X_GetLimitCheckValue>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007ea4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d107      	bne.n	8007ebc <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007eac:	2201      	movs	r2, #1
 8007eae:	21ff      	movs	r1, #255	; 0xff
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f9b5 	bl	8008220 <VL53L0X_WrByte>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007ebc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 8007ec4:	f107 0316 	add.w	r3, r7, #22
 8007ec8:	461a      	mov	r2, r3
 8007eca:	21b6      	movs	r1, #182	; 0xb6
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fa53 	bl	8008378 <VL53L0X_RdWord>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007ed8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d107      	bne.n	8007ef0 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	21ff      	movs	r1, #255	; 0xff
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 f99b 	bl	8008220 <VL53L0X_WrByte>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007ef0:	8afb      	ldrh	r3, [r7, #22]
 8007ef2:	025b      	lsls	r3, r3, #9
 8007ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007efa:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d006      	beq.n	8007f12 <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007f04:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d902      	bls.n	8007f12 <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007f12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f1e:	461a      	mov	r2, r3
 8007f20:	2103      	movs	r1, #3
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7fc f91c 	bl	8004160 <VL53L0X_GetLimitCheckEnable>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d023      	beq.n	8007f7e <VL53L0X_get_pal_range_status+0x25e>
 8007f36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d11f      	bne.n	8007f7e <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007f3e:	893b      	ldrh	r3, [r7, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d102      	bne.n	8007f4a <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	637b      	str	r3, [r7, #52]	; 0x34
 8007f48:	e005      	b.n	8007f56 <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	021a      	lsls	r2, r3, #8
 8007f4e:	893b      	ldrh	r3, [r7, #8]
 8007f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f54:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007f56:	f107 0318 	add.w	r3, r7, #24
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	2103      	movs	r1, #3
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f7fc f982 	bl	8004268 <VL53L0X_GetLimitCheckValue>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d006      	beq.n	8007f7e <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8007f70:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8007f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d202      	bcs.n	8007f7e <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d14a      	bne.n	800801c <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 8007f86:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d103      	bne.n	8007f96 <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 8007f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f90:	22ff      	movs	r2, #255	; 0xff
 8007f92:	701a      	strb	r2, [r3, #0]
 8007f94:	e042      	b.n	800801c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007f96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d007      	beq.n	8007fae <VL53L0X_get_pal_range_status+0x28e>
 8007f9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d003      	beq.n	8007fae <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 8007fa6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d103      	bne.n	8007fb6 <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb0:	2205      	movs	r2, #5
 8007fb2:	701a      	strb	r2, [r3, #0]
 8007fb4:	e032      	b.n	800801c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007fb6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fba:	2b06      	cmp	r3, #6
 8007fbc:	d003      	beq.n	8007fc6 <VL53L0X_get_pal_range_status+0x2a6>
 8007fbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fc2:	2b09      	cmp	r3, #9
 8007fc4:	d103      	bne.n	8007fce <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc8:	2204      	movs	r2, #4
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	e026      	b.n	800801c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007fce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d007      	beq.n	8007fe6 <VL53L0X_get_pal_range_status+0x2c6>
 8007fd6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fda:	2b0a      	cmp	r3, #10
 8007fdc:	d003      	beq.n	8007fe6 <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 8007fde:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d103      	bne.n	8007fee <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe8:	2203      	movs	r2, #3
 8007fea:	701a      	strb	r2, [r3, #0]
 8007fec:	e016      	b.n	800801c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007fee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d003      	beq.n	8007ffe <VL53L0X_get_pal_range_status+0x2de>
 8007ff6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d103      	bne.n	8008006 <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008000:	2202      	movs	r2, #2
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	e00a      	b.n	800801c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 8008006:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800800a:	2b01      	cmp	r3, #1
 800800c:	d103      	bne.n	8008016 <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800800e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008010:	2201      	movs	r2, #1
 8008012:	701a      	strb	r2, [r3, #0]
 8008014:	e002      	b.n	800801c <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008018:	2200      	movs	r2, #0
 800801a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800801c:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008020:	461a      	mov	r2, r3
 8008022:	2101      	movs	r1, #1
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7fc f89b 	bl	8004160 <VL53L0X_GetLimitCheckEnable>
 800802a:	4603      	mov	r3, r0
 800802c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008030:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008034:	2b00      	cmp	r3, #0
 8008036:	d14f      	bne.n	80080d8 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008038:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <VL53L0X_get_pal_range_status+0x328>
 8008040:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008044:	2b01      	cmp	r3, #1
 8008046:	d103      	bne.n	8008050 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 8008048:	2301      	movs	r3, #1
 800804a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804e:	e002      	b.n	8008056 <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800805c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008060:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008064:	2b04      	cmp	r3, #4
 8008066:	d003      	beq.n	8008070 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008068:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008076:	e002      	b.n	800807e <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008084:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008088:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <VL53L0X_get_pal_range_status+0x378>
 8008090:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008094:	2b01      	cmp	r3, #1
 8008096:	d103      	bne.n	80080a0 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008098:	2301      	movs	r3, #1
 800809a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809e:	e002      	b.n	80080a6 <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80080ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80080b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <VL53L0X_get_pal_range_status+0x3a0>
 80080b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d103      	bne.n	80080c8 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080c6:	e002      	b.n	80080ce <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80080d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80080dc:	4618      	mov	r0, r3
 80080de:	3740      	adds	r7, #64	; 0x40
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	330a      	adds	r3, #10
 80080f4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8008102:	b299      	uxth	r1, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	b29a      	uxth	r2, r3
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	4613      	mov	r3, r2
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	f7f9 f87c 	bl	800120c <HAL_I2C_Master_Transmit>
 8008114:	4603      	mov	r3, r0
 8008116:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008118:	693b      	ldr	r3, [r7, #16]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008122:	b580      	push	{r7, lr}
 8008124:	b088      	sub	sp, #32
 8008126:	af02      	add	r7, sp, #8
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	330a      	adds	r3, #10
 8008132:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8008140:	f043 0301 	orr.w	r3, r3, #1
 8008144:	b2db      	uxtb	r3, r3
 8008146:	b299      	uxth	r1, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	b29a      	uxth	r2, r3
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	4613      	mov	r3, r2
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	f7f9 f958 	bl	8001408 <HAL_I2C_Master_Receive>
 8008158:	4603      	mov	r3, r0
 800815a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800815c:	693b      	ldr	r3, [r7, #16]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	607a      	str	r2, [r7, #4]
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	460b      	mov	r3, r1
 8008176:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008178:	2300      	movs	r3, #0
 800817a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b3f      	cmp	r3, #63	; 0x3f
 8008180:	d902      	bls.n	8008188 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008182:	f06f 0303 	mvn.w	r3, #3
 8008186:	e016      	b.n	80081b6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008188:	4a0d      	ldr	r2, [pc, #52]	; (80081c0 <VL53L0X_WriteMulti+0x58>)
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	480c      	ldr	r0, [pc, #48]	; (80081c4 <VL53L0X_WriteMulti+0x5c>)
 8008194:	f000 f998 	bl	80084c8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	3301      	adds	r3, #1
 800819c:	461a      	mov	r2, r3
 800819e:	4908      	ldr	r1, [pc, #32]	; (80081c0 <VL53L0X_WriteMulti+0x58>)
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff ff9f 	bl	80080e4 <_I2CWrite>
 80081a6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80081ae:	23ec      	movs	r3, #236	; 0xec
 80081b0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80081b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000aa8 	.word	0x20000aa8
 80081c4:	20000aa9 	.word	0x20000aa9

080081c8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	607a      	str	r2, [r7, #4]
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	460b      	mov	r3, r1
 80081d6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081d8:	2300      	movs	r3, #0
 80081da:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80081dc:	f107 030b 	add.w	r3, r7, #11
 80081e0:	2201      	movs	r2, #1
 80081e2:	4619      	mov	r1, r3
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f7ff ff7d 	bl	80080e4 <_I2CWrite>
 80081ea:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80081f2:	23ec      	movs	r3, #236	; 0xec
 80081f4:	75fb      	strb	r3, [r7, #23]
        goto done;
 80081f6:	e00c      	b.n	8008212 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f7ff ff90 	bl	8008122 <_I2CRead>
 8008202:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800820a:	23ec      	movs	r3, #236	; 0xec
 800820c:	75fb      	strb	r3, [r7, #23]
 800820e:	e000      	b.n	8008212 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008210:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008212:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
 800822c:	4613      	mov	r3, r2
 800822e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008230:	2300      	movs	r3, #0
 8008232:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008234:	4a0b      	ldr	r2, [pc, #44]	; (8008264 <VL53L0X_WrByte+0x44>)
 8008236:	78fb      	ldrb	r3, [r7, #3]
 8008238:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800823a:	4a0a      	ldr	r2, [pc, #40]	; (8008264 <VL53L0X_WrByte+0x44>)
 800823c:	78bb      	ldrb	r3, [r7, #2]
 800823e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008240:	2202      	movs	r2, #2
 8008242:	4908      	ldr	r1, [pc, #32]	; (8008264 <VL53L0X_WrByte+0x44>)
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff ff4d 	bl	80080e4 <_I2CWrite>
 800824a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008252:	23ec      	movs	r3, #236	; 0xec
 8008254:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20000aa8 	.word	0x20000aa8

08008268 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
 8008274:	4613      	mov	r3, r2
 8008276:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800827c:	4a0e      	ldr	r2, [pc, #56]	; (80082b8 <VL53L0X_WrWord+0x50>)
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008282:	883b      	ldrh	r3, [r7, #0]
 8008284:	0a1b      	lsrs	r3, r3, #8
 8008286:	b29b      	uxth	r3, r3
 8008288:	b2da      	uxtb	r2, r3
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <VL53L0X_WrWord+0x50>)
 800828c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800828e:	883b      	ldrh	r3, [r7, #0]
 8008290:	b2da      	uxtb	r2, r3
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <VL53L0X_WrWord+0x50>)
 8008294:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008296:	2203      	movs	r2, #3
 8008298:	4907      	ldr	r1, [pc, #28]	; (80082b8 <VL53L0X_WrWord+0x50>)
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7ff ff22 	bl	80080e4 <_I2CWrite>
 80082a0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80082a8:	23ec      	movs	r3, #236	; 0xec
 80082aa:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80082ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000aa8 	.word	0x20000aa8

080082bc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	461a      	mov	r2, r3
 80082ca:	4603      	mov	r3, r0
 80082cc:	70fb      	strb	r3, [r7, #3]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70bb      	strb	r3, [r7, #2]
 80082d2:	4613      	mov	r3, r2
 80082d4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80082da:	f107 020e 	add.w	r2, r7, #14
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f81e 	bl	8008324 <VL53L0X_RdByte>
 80082e8:	4603      	mov	r3, r0
 80082ea:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80082ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d110      	bne.n	8008316 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80082f4:	7bba      	ldrb	r2, [r7, #14]
 80082f6:	78bb      	ldrb	r3, [r7, #2]
 80082f8:	4013      	ands	r3, r2
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	787b      	ldrb	r3, [r7, #1]
 80082fe:	4313      	orrs	r3, r2
 8008300:	b2db      	uxtb	r3, r3
 8008302:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008304:	7bba      	ldrb	r2, [r7, #14]
 8008306:	78fb      	ldrb	r3, [r7, #3]
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff ff88 	bl	8008220 <VL53L0X_WrByte>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]
 8008314:	e000      	b.n	8008318 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008316:	bf00      	nop
done:
    return Status;
 8008318:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	460b      	mov	r3, r1
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008332:	2300      	movs	r3, #0
 8008334:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008336:	f107 030b 	add.w	r3, r7, #11
 800833a:	2201      	movs	r2, #1
 800833c:	4619      	mov	r1, r3
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff fed0 	bl	80080e4 <_I2CWrite>
 8008344:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800834c:	23ec      	movs	r3, #236	; 0xec
 800834e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008350:	e00c      	b.n	800836c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008352:	2201      	movs	r2, #1
 8008354:	6879      	ldr	r1, [r7, #4]
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fee3 	bl	8008122 <_I2CRead>
 800835c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008364:	23ec      	movs	r3, #236	; 0xec
 8008366:	75fb      	strb	r3, [r7, #23]
 8008368:	e000      	b.n	800836c <VL53L0X_RdByte+0x48>
    }
done:
 800836a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800836c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	460b      	mov	r3, r1
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800838a:	f107 030b 	add.w	r3, r7, #11
 800838e:	2201      	movs	r2, #1
 8008390:	4619      	mov	r1, r3
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff fea6 	bl	80080e4 <_I2CWrite>
 8008398:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80083a0:	23ec      	movs	r3, #236	; 0xec
 80083a2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80083a4:	e017      	b.n	80083d6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80083a6:	2202      	movs	r2, #2
 80083a8:	490e      	ldr	r1, [pc, #56]	; (80083e4 <VL53L0X_RdWord+0x6c>)
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff feb9 	bl	8008122 <_I2CRead>
 80083b0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80083b8:	23ec      	movs	r3, #236	; 0xec
 80083ba:	75fb      	strb	r3, [r7, #23]
        goto done;
 80083bc:	e00b      	b.n	80083d6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80083be:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <VL53L0X_RdWord+0x6c>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	021b      	lsls	r3, r3, #8
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <VL53L0X_RdWord+0x6c>)
 80083ca:	785b      	ldrb	r3, [r3, #1]
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	4413      	add	r3, r2
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80083d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20000aa8 	.word	0x20000aa8

080083e8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	460b      	mov	r3, r1
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80083fa:	f107 030b 	add.w	r3, r7, #11
 80083fe:	2201      	movs	r2, #1
 8008400:	4619      	mov	r1, r3
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f7ff fe6e 	bl	80080e4 <_I2CWrite>
 8008408:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008410:	23ec      	movs	r3, #236	; 0xec
 8008412:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008414:	e01b      	b.n	800844e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008416:	2204      	movs	r2, #4
 8008418:	4910      	ldr	r1, [pc, #64]	; (800845c <VL53L0X_RdDWord+0x74>)
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f7ff fe81 	bl	8008122 <_I2CRead>
 8008420:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008428:	23ec      	movs	r3, #236	; 0xec
 800842a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800842c:	e00f      	b.n	800844e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800842e:	4b0b      	ldr	r3, [pc, #44]	; (800845c <VL53L0X_RdDWord+0x74>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	061a      	lsls	r2, r3, #24
 8008434:	4b09      	ldr	r3, [pc, #36]	; (800845c <VL53L0X_RdDWord+0x74>)
 8008436:	785b      	ldrb	r3, [r3, #1]
 8008438:	041b      	lsls	r3, r3, #16
 800843a:	441a      	add	r2, r3
 800843c:	4b07      	ldr	r3, [pc, #28]	; (800845c <VL53L0X_RdDWord+0x74>)
 800843e:	789b      	ldrb	r3, [r3, #2]
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	4413      	add	r3, r2
 8008444:	4a05      	ldr	r2, [pc, #20]	; (800845c <VL53L0X_RdDWord+0x74>)
 8008446:	78d2      	ldrb	r2, [r2, #3]
 8008448:	441a      	add	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800844e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20000aa8 	.word	0x20000aa8

08008460 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008468:	2300      	movs	r3, #0
 800846a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800846c:	2002      	movs	r0, #2
 800846e:	f7f8 fae5 	bl	8000a3c <HAL_Delay>
    return status;
 8008472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <__libc_init_array>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	2600      	movs	r6, #0
 8008484:	4d0c      	ldr	r5, [pc, #48]	; (80084b8 <__libc_init_array+0x38>)
 8008486:	4c0d      	ldr	r4, [pc, #52]	; (80084bc <__libc_init_array+0x3c>)
 8008488:	1b64      	subs	r4, r4, r5
 800848a:	10a4      	asrs	r4, r4, #2
 800848c:	42a6      	cmp	r6, r4
 800848e:	d109      	bne.n	80084a4 <__libc_init_array+0x24>
 8008490:	f000 f838 	bl	8008504 <_init>
 8008494:	2600      	movs	r6, #0
 8008496:	4d0a      	ldr	r5, [pc, #40]	; (80084c0 <__libc_init_array+0x40>)
 8008498:	4c0a      	ldr	r4, [pc, #40]	; (80084c4 <__libc_init_array+0x44>)
 800849a:	1b64      	subs	r4, r4, r5
 800849c:	10a4      	asrs	r4, r4, #2
 800849e:	42a6      	cmp	r6, r4
 80084a0:	d105      	bne.n	80084ae <__libc_init_array+0x2e>
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a8:	4798      	blx	r3
 80084aa:	3601      	adds	r6, #1
 80084ac:	e7ee      	b.n	800848c <__libc_init_array+0xc>
 80084ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b2:	4798      	blx	r3
 80084b4:	3601      	adds	r6, #1
 80084b6:	e7f2      	b.n	800849e <__libc_init_array+0x1e>
 80084b8:	08008544 	.word	0x08008544
 80084bc:	08008544 	.word	0x08008544
 80084c0:	08008544 	.word	0x08008544
 80084c4:	08008548 	.word	0x08008548

080084c8 <memcpy>:
 80084c8:	440a      	add	r2, r1
 80084ca:	4291      	cmp	r1, r2
 80084cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80084d0:	d100      	bne.n	80084d4 <memcpy+0xc>
 80084d2:	4770      	bx	lr
 80084d4:	b510      	push	{r4, lr}
 80084d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084da:	4291      	cmp	r1, r2
 80084dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e0:	d1f9      	bne.n	80084d6 <memcpy+0xe>
 80084e2:	bd10      	pop	{r4, pc}

080084e4 <memset>:
 80084e4:	4603      	mov	r3, r0
 80084e6:	4402      	add	r2, r0
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d100      	bne.n	80084ee <memset+0xa>
 80084ec:	4770      	bx	lr
 80084ee:	f803 1b01 	strb.w	r1, [r3], #1
 80084f2:	e7f9      	b.n	80084e8 <memset+0x4>

080084f4 <strcpy>:
 80084f4:	4603      	mov	r3, r0
 80084f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084fa:	f803 2b01 	strb.w	r2, [r3], #1
 80084fe:	2a00      	cmp	r2, #0
 8008500:	d1f9      	bne.n	80084f6 <strcpy+0x2>
 8008502:	4770      	bx	lr

08008504 <_init>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	bf00      	nop
 8008508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850a:	bc08      	pop	{r3}
 800850c:	469e      	mov	lr, r3
 800850e:	4770      	bx	lr

08008510 <_fini>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr
