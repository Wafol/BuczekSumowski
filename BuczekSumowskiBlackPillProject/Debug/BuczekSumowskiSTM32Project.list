
BuczekSumowskiSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007710  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080078a4  080078a4  000178a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078bc  080078bc  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078c4  080078c4  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  080078cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200002d0  08007b9c  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08007b9c  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fedf  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cae  00000000  00000000  000301df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00031e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00032a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c57  00000000  00000000  000335d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaf5  00000000  00000000  0004a227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b545  00000000  00000000  00058d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b4  00000000  00000000  000e42b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200002d0 	.word	0x200002d0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800788c 	.word	0x0800788c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200002d4 	.word	0x200002d4
 80001d0:	0800788c 	.word	0x0800788c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fa19 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f893 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f91f 	bl	8000728 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ea:	f000 f8ef 	bl	80006cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	//MessageLen = sprintf((char*)Message, "msalamon.pl VL53L0X test\n\r");
	//HAL_UART_Transmit(&huart2, Message, MessageLen, 100);

	Dev->I2cHandle = &hi2c1;
 80004ee:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <main+0x11c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a41      	ldr	r2, [pc, #260]	; (80005f8 <main+0x120>)
 80004f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	Dev->I2cDevAddr = adress;
 80004f8:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <main+0x11c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a3f      	ldr	r2, [pc, #252]	; (80005fc <main+0x124>)
 80004fe:	7812      	ldrb	r2, [r2, #0]
 8000500:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Disable XSHUT
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050a:	483d      	ldr	r0, [pc, #244]	; (8000600 <main+0x128>)
 800050c:	f000 fd02 	bl	8000f14 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000510:	2014      	movs	r0, #20
 8000512:	f000 fa71 	bl	80009f8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Enable XSHUT
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051c:	4838      	ldr	r0, [pc, #224]	; (8000600 <main+0x128>)
 800051e:	f000 fcf9 	bl	8000f14 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000522:	2014      	movs	r0, #20
 8000524:	f000 fa68 	bl	80009f8 <HAL_Delay>

	//
	// VL53L0X init for Single Measurement
	//

	VL53L0X_WaitDeviceBooted( Dev );
 8000528:	4b32      	ldr	r3, [pc, #200]	; (80005f4 <main+0x11c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f002 fc03 	bl	8002d38 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <main+0x11c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f002 f8f4 	bl	8002724 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 800053c:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <main+0x11c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f002 fa75 	bl	8002a30 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000546:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <main+0x11c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	1c7a      	adds	r2, r7, #1
 800054c:	1cb9      	adds	r1, r7, #2
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f938 	bl	80037c4 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <main+0x11c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	1cfa      	adds	r2, r7, #3
 800055a:	1d39      	adds	r1, r7, #4
 800055c:	4618      	mov	r0, r3
 800055e:	f003 fe4b 	bl	80041f8 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000562:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <main+0x11c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f002 fca9 	bl	8002ec0 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <main+0x11c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2201      	movs	r2, #1
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 ff1e 	bl	80033b8 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <main+0x11c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2201      	movs	r2, #1
 8000582:	2101      	movs	r1, #1
 8000584:	4618      	mov	r0, r3
 8000586:	f002 ff17 	bl	80033b8 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <main+0x11c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f641 1299 	movw	r2, #6553	; 0x1999
 8000592:	2101      	movs	r1, #1
 8000594:	4618      	mov	r0, r3
 8000596:	f002 ffbf 	bl	8003518 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800059a:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <main+0x11c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 ffb7 	bl	8003518 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <main+0x11c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fce2 	bl	8002f7c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <main+0x11c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2212      	movs	r2, #18
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fd01 	bl	8002fc8 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <main+0x11c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	220e      	movs	r2, #14
 80005cc:	2101      	movs	r1, #1
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fcfa 	bl	8002fc8 <VL53L0X_SetVcselPulsePeriod>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <main+0x11c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	490a      	ldr	r1, [pc, #40]	; (8000604 <main+0x12c>)
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fc20 	bl	8003e20 <VL53L0X_PerformSingleRangingMeasurement>

	  if(RangingData.RangeStatus == 0) {
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <main+0x12c>)
 80005e2:	7e1b      	ldrb	r3, [r3, #24]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1f5      	bne.n	80005d4 <main+0xfc>
		  mm = RangingData.RangeMilliMeter;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <main+0x12c>)
 80005ea:	891a      	ldrh	r2, [r3, #8]
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <main+0x130>)
 80005ee:	801a      	strh	r2, [r3, #0]
	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80005f0:	e7f0      	b.n	80005d4 <main+0xfc>
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000
 80005f8:	200002ec 	.word	0x200002ec
 80005fc:	20000004 	.word	0x20000004
 8000600:	40020000 	.word	0x40020000
 8000604:	20000340 	.word	0x20000340
 8000608:	20000510 	.word	0x20000510

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f007 f926 	bl	800786c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemClock_Config+0xb8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <SystemClock_Config+0xb8>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <SystemClock_Config+0xb8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <SystemClock_Config+0xbc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000658:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <SystemClock_Config+0xbc>)
 800065a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <SystemClock_Config+0xbc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000678:	2300      	movs	r3, #0
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fbf7 	bl	8001e74 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800068c:	f000 f866 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fe5a 	bl	8002364 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006b6:	f000 f851 	bl	800075c <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C1_Init+0x50>)
 800070a:	f000 fc1d 	bl	8000f48 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 f822 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200002ec 	.word	0x200002ec
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_GPIO_Init+0x30>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <MX_GPIO_Init+0x30>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_GPIO_Init+0x30>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <HAL_MspInit+0x4c>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x4c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a19      	ldr	r2, [pc, #100]	; (800083c <HAL_I2C_MspInit+0x84>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d12b      	bne.n	8000832 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_I2C_MspInit+0x88>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <HAL_I2C_MspInit+0x88>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_I2C_MspInit+0x88>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007f6:	23c0      	movs	r3, #192	; 0xc0
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fa:	2312      	movs	r3, #18
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000806:	2304      	movs	r3, #4
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <HAL_I2C_MspInit+0x8c>)
 8000812:	f000 f9fb 	bl	8000c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_I2C_MspInit+0x88>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_I2C_MspInit+0x88>)
 8000820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_I2C_MspInit+0x88>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40005400 	.word	0x40005400
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f890 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008c6:	490e      	ldr	r1, [pc, #56]	; (8000900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008dc:	4c0b      	ldr	r4, [pc, #44]	; (800090c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ea:	f7ff ffd7 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ee:	f006 ff8b 	bl	8007808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fdf1 	bl	80004d8 <main>
  bx  lr    
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8000904:	080078cc 	.word	0x080078cc
  ldr r2, =_sbss
 8000908:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800090c:	20000558 	.word	0x20000558

08000910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <HAL_Init+0x40>)
 800091e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_Init+0x40>)
 800092a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x40>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f931 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff ff0e 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f93b 	bl	8000bf2 <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000994:	f000 f911 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000010 	.word	0x20000010
 80009b4:	2000000c 	.word	0x2000000c

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000010 	.word	0x20000010
 80009dc:	20000514 	.word	0x20000514

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000514 	.word	0x20000514

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff ffee 	bl	80009e0 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffde 	bl	80009e0 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000010 	.word	0x20000010

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b84:	f7ff ff8e 	bl	8000aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff47 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff5c 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff8e 	bl	8000af8 <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5d 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffb0 	bl	8000b60 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e159      	b.n	8000edc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 8148 	bne.w	8000ed6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d005      	beq.n	8000c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d130      	bne.n	8000cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4013      	ands	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c94:	2201      	movs	r2, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	f003 0201 	and.w	r2, r3, #1
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d017      	beq.n	8000cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d123      	bne.n	8000d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	69b9      	ldr	r1, [r7, #24]
 8000d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0203 	and.w	r2, r3, #3
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80a2 	beq.w	8000ed6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b57      	ldr	r3, [pc, #348]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a56      	ldr	r2, [pc, #344]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b54      	ldr	r3, [pc, #336]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dae:	4a52      	ldr	r2, [pc, #328]	; (8000ef8 <HAL_GPIO_Init+0x2ec>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a49      	ldr	r2, [pc, #292]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d019      	beq.n	8000e0e <HAL_GPIO_Init+0x202>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a48      	ldr	r2, [pc, #288]	; (8000f00 <HAL_GPIO_Init+0x2f4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d013      	beq.n	8000e0a <HAL_GPIO_Init+0x1fe>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a47      	ldr	r2, [pc, #284]	; (8000f04 <HAL_GPIO_Init+0x2f8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d00d      	beq.n	8000e06 <HAL_GPIO_Init+0x1fa>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a46      	ldr	r2, [pc, #280]	; (8000f08 <HAL_GPIO_Init+0x2fc>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d007      	beq.n	8000e02 <HAL_GPIO_Init+0x1f6>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a45      	ldr	r2, [pc, #276]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_GPIO_Init+0x1f2>
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	e008      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000dfe:	2307      	movs	r3, #7
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e20:	4935      	ldr	r1, [pc, #212]	; (8000ef8 <HAL_GPIO_Init+0x2ec>)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e52:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e7c:	4a24      	ldr	r2, [pc, #144]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ea6:	4a1a      	ldr	r2, [pc, #104]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	f67f aea2 	bls.w	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020c00 	.word	0x40020c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40013c00 	.word	0x40013c00

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f30:	e003      	b.n	8000f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	041a      	lsls	r2, r3, #16
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	619a      	str	r2, [r3, #24]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e12b      	b.n	80011b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d106      	bne.n	8000f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fc22 	bl	80007b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2224      	movs	r2, #36	; 0x24
 8000f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000faa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fac:	f001 fb92 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 8000fb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4a81      	ldr	r2, [pc, #516]	; (80011bc <HAL_I2C_Init+0x274>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d807      	bhi.n	8000fcc <HAL_I2C_Init+0x84>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4a80      	ldr	r2, [pc, #512]	; (80011c0 <HAL_I2C_Init+0x278>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	bf94      	ite	ls
 8000fc4:	2301      	movls	r3, #1
 8000fc6:	2300      	movhi	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	e006      	b.n	8000fda <HAL_I2C_Init+0x92>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4a7d      	ldr	r2, [pc, #500]	; (80011c4 <HAL_I2C_Init+0x27c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	bf94      	ite	ls
 8000fd4:	2301      	movls	r3, #1
 8000fd6:	2300      	movhi	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0e7      	b.n	80011b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4a78      	ldr	r2, [pc, #480]	; (80011c8 <HAL_I2C_Init+0x280>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0c9b      	lsrs	r3, r3, #18
 8000fec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a6a      	ldr	r2, [pc, #424]	; (80011bc <HAL_I2C_Init+0x274>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d802      	bhi.n	800101c <HAL_I2C_Init+0xd4>
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3301      	adds	r3, #1
 800101a:	e009      	b.n	8001030 <HAL_I2C_Init+0xe8>
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	4a69      	ldr	r2, [pc, #420]	; (80011cc <HAL_I2C_Init+0x284>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	099b      	lsrs	r3, r3, #6
 800102e:	3301      	adds	r3, #1
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	430b      	orrs	r3, r1
 8001036:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001042:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	495c      	ldr	r1, [pc, #368]	; (80011bc <HAL_I2C_Init+0x274>)
 800104c:	428b      	cmp	r3, r1
 800104e:	d819      	bhi.n	8001084 <HAL_I2C_Init+0x13c>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1e59      	subs	r1, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fbb1 f3f3 	udiv	r3, r1, r3
 800105e:	1c59      	adds	r1, r3, #1
 8001060:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001064:	400b      	ands	r3, r1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00a      	beq.n	8001080 <HAL_I2C_Init+0x138>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1e59      	subs	r1, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fbb1 f3f3 	udiv	r3, r1, r3
 8001078:	3301      	adds	r3, #1
 800107a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800107e:	e051      	b.n	8001124 <HAL_I2C_Init+0x1dc>
 8001080:	2304      	movs	r3, #4
 8001082:	e04f      	b.n	8001124 <HAL_I2C_Init+0x1dc>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d111      	bne.n	80010b0 <HAL_I2C_Init+0x168>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1e58      	subs	r0, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6859      	ldr	r1, [r3, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	440b      	add	r3, r1
 800109a:	fbb0 f3f3 	udiv	r3, r0, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf0c      	ite	eq
 80010a8:	2301      	moveq	r3, #1
 80010aa:	2300      	movne	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	e012      	b.n	80010d6 <HAL_I2C_Init+0x18e>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	1e58      	subs	r0, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6859      	ldr	r1, [r3, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	0099      	lsls	r1, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010c6:	3301      	adds	r3, #1
 80010c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bf0c      	ite	eq
 80010d0:	2301      	moveq	r3, #1
 80010d2:	2300      	movne	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_I2C_Init+0x196>
 80010da:	2301      	movs	r3, #1
 80010dc:	e022      	b.n	8001124 <HAL_I2C_Init+0x1dc>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10e      	bne.n	8001104 <HAL_I2C_Init+0x1bc>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1e58      	subs	r0, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6859      	ldr	r1, [r3, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	440b      	add	r3, r1
 80010f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010f8:	3301      	adds	r3, #1
 80010fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001102:	e00f      	b.n	8001124 <HAL_I2C_Init+0x1dc>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1e58      	subs	r0, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6859      	ldr	r1, [r3, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	0099      	lsls	r1, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	fbb0 f3f3 	udiv	r3, r0, r3
 800111a:	3301      	adds	r3, #1
 800111c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	6809      	ldr	r1, [r1, #0]
 8001128:	4313      	orrs	r3, r2
 800112a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69da      	ldr	r2, [r3, #28]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6911      	ldr	r1, [r2, #16]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68d2      	ldr	r2, [r2, #12]
 800115e:	4311      	orrs	r1, r2
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	430b      	orrs	r3, r1
 8001166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0201 	orr.w	r2, r2, #1
 8001192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2220      	movs	r2, #32
 800119e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	000186a0 	.word	0x000186a0
 80011c0:	001e847f 	.word	0x001e847f
 80011c4:	003d08ff 	.word	0x003d08ff
 80011c8:	431bde83 	.word	0x431bde83
 80011cc:	10624dd3 	.word	0x10624dd3

080011d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	461a      	mov	r2, r3
 80011dc:	460b      	mov	r3, r1
 80011de:	817b      	strh	r3, [r7, #10]
 80011e0:	4613      	mov	r3, r2
 80011e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff fbfc 	bl	80009e0 <HAL_GetTick>
 80011e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b20      	cmp	r3, #32
 80011f4:	f040 80e0 	bne.w	80013b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2319      	movs	r3, #25
 80011fe:	2201      	movs	r2, #1
 8001200:	4970      	ldr	r1, [pc, #448]	; (80013c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f000 fc58 	bl	8001ab8 <I2C_WaitOnFlagUntilTimeout>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800120e:	2302      	movs	r3, #2
 8001210:	e0d3      	b.n	80013ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_I2C_Master_Transmit+0x50>
 800121c:	2302      	movs	r3, #2
 800121e:	e0cc      	b.n	80013ba <HAL_I2C_Master_Transmit+0x1ea>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b01      	cmp	r3, #1
 8001234:	d007      	beq.n	8001246 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0201 	orr.w	r2, r2, #1
 8001244:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001254:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2221      	movs	r2, #33	; 0x21
 800125a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2210      	movs	r2, #16
 8001262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	893a      	ldrh	r2, [r7, #8]
 8001276:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127c:	b29a      	uxth	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4a50      	ldr	r2, [pc, #320]	; (80013c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001288:	8979      	ldrh	r1, [r7, #10]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	6a3a      	ldr	r2, [r7, #32]
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 fac2 	bl	8001818 <I2C_MasterRequestWrite>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e08d      	b.n	80013ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012b4:	e066      	b.n	8001384 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	6a39      	ldr	r1, [r7, #32]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 fcd2 	bl	8001c64 <I2C_WaitOnTXEFlagUntilTimeout>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00d      	beq.n	80012e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d107      	bne.n	80012de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e06b      	b.n	80013ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	3b01      	subs	r3, #1
 8001300:	b29a      	uxth	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800130a:	3b01      	subs	r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b04      	cmp	r3, #4
 800131e:	d11b      	bne.n	8001358 <HAL_I2C_Master_Transmit+0x188>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001324:	2b00      	cmp	r3, #0
 8001326:	d017      	beq.n	8001358 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001342:	b29b      	uxth	r3, r3
 8001344:	3b01      	subs	r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001350:	3b01      	subs	r3, #1
 8001352:	b29a      	uxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	6a39      	ldr	r1, [r7, #32]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 fcc2 	bl	8001ce6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00d      	beq.n	8001384 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	2b04      	cmp	r3, #4
 800136e:	d107      	bne.n	8001380 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800137e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e01a      	b.n	80013ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001388:	2b00      	cmp	r3, #0
 800138a:	d194      	bne.n	80012b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800139a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2220      	movs	r2, #32
 80013a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e000      	b.n	80013ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013b8:	2302      	movs	r3, #2
  }
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	00100002 	.word	0x00100002
 80013c8:	ffff0000 	.word	0xffff0000

080013cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	461a      	mov	r2, r3
 80013d8:	460b      	mov	r3, r1
 80013da:	817b      	strh	r3, [r7, #10]
 80013dc:	4613      	mov	r3, r2
 80013de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff fafe 	bl	80009e0 <HAL_GetTick>
 80013e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b20      	cmp	r3, #32
 80013f0:	f040 820b 	bne.w	800180a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2319      	movs	r3, #25
 80013fa:	2201      	movs	r2, #1
 80013fc:	497c      	ldr	r1, [pc, #496]	; (80015f0 <HAL_I2C_Master_Receive+0x224>)
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 fb5a 	bl	8001ab8 <I2C_WaitOnFlagUntilTimeout>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800140a:	2302      	movs	r3, #2
 800140c:	e1fe      	b.n	800180c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_I2C_Master_Receive+0x50>
 8001418:	2302      	movs	r3, #2
 800141a:	e1f7      	b.n	800180c <HAL_I2C_Master_Receive+0x440>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b01      	cmp	r3, #1
 8001430:	d007      	beq.n	8001442 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001450:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2222      	movs	r2, #34	; 0x22
 8001456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2210      	movs	r2, #16
 800145e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	893a      	ldrh	r2, [r7, #8]
 8001472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4a5c      	ldr	r2, [pc, #368]	; (80015f4 <HAL_I2C_Master_Receive+0x228>)
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001484:	8979      	ldrh	r1, [r7, #10]
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 fa46 	bl	800191c <I2C_MasterRequestRead>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1b8      	b.n	800180c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d113      	bne.n	80014ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	623b      	str	r3, [r7, #32]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	623b      	str	r3, [r7, #32]
 80014b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e18c      	b.n	80017e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d11b      	bne.n	800150a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e16c      	b.n	80017e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150e:	2b02      	cmp	r3, #2
 8001510:	d11b      	bne.n	800154a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001520:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	e14c      	b.n	80017e4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001570:	e138      	b.n	80017e4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	2b03      	cmp	r3, #3
 8001578:	f200 80f1 	bhi.w	800175e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001580:	2b01      	cmp	r3, #1
 8001582:	d123      	bne.n	80015cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001586:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 fbed 	bl	8001d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e139      	b.n	800180c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015ca:	e10b      	b.n	80017e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d14e      	bne.n	8001672 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015da:	2200      	movs	r2, #0
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <HAL_I2C_Master_Receive+0x22c>)
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 fa6a 	bl	8001ab8 <I2C_WaitOnFlagUntilTimeout>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e10e      	b.n	800180c <HAL_I2C_Master_Receive+0x440>
 80015ee:	bf00      	nop
 80015f0:	00100002 	.word	0x00100002
 80015f4:	ffff0000 	.word	0xffff0000
 80015f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800160a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001628:	3b01      	subs	r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001666:	b29b      	uxth	r3, r3
 8001668:	3b01      	subs	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001670:	e0b8      	b.n	80017e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001678:	2200      	movs	r2, #0
 800167a:	4966      	ldr	r1, [pc, #408]	; (8001814 <HAL_I2C_Master_Receive+0x448>)
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 fa1b 	bl	8001ab8 <I2C_WaitOnFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0bf      	b.n	800180c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	2200      	movs	r2, #0
 80016d6:	494f      	ldr	r1, [pc, #316]	; (8001814 <HAL_I2C_Master_Receive+0x448>)
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 f9ed 	bl	8001ab8 <I2C_WaitOnFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e091      	b.n	800180c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001714:	3b01      	subs	r3, #1
 8001716:	b29a      	uxth	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001720:	b29b      	uxth	r3, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800175c:	e042      	b.n	80017e4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 fb00 	bl	8001d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e04c      	b.n	800180c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	3b01      	subs	r3, #1
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179a:	b29b      	uxth	r3, r3
 800179c:	3b01      	subs	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d118      	bne.n	80017e4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017da:	b29b      	uxth	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f47f aec2 	bne.w	8001572 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800180a:	2302      	movs	r3, #2
  }
}
 800180c:	4618      	mov	r0, r3
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	00010004 	.word	0x00010004

08001818 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af02      	add	r7, sp, #8
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	460b      	mov	r3, r1
 8001826:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b08      	cmp	r3, #8
 8001832:	d006      	beq.n	8001842 <I2C_MasterRequestWrite+0x2a>
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d003      	beq.n	8001842 <I2C_MasterRequestWrite+0x2a>
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001840:	d108      	bne.n	8001854 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e00b      	b.n	800186c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	2b12      	cmp	r3, #18
 800185a:	d107      	bne.n	800186c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800186a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f000 f91d 	bl	8001ab8 <I2C_WaitOnFlagUntilTimeout>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00d      	beq.n	80018a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001892:	d103      	bne.n	800189c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e035      	b.n	800190c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018a8:	d108      	bne.n	80018bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018aa:	897b      	ldrh	r3, [r7, #10]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	e01b      	b.n	80018f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018bc:	897b      	ldrh	r3, [r7, #10]
 80018be:	11db      	asrs	r3, r3, #7
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f003 0306 	and.w	r3, r3, #6
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f063 030f 	orn	r3, r3, #15
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	490e      	ldr	r1, [pc, #56]	; (8001914 <I2C_MasterRequestWrite+0xfc>)
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f943 	bl	8001b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e010      	b.n	800190c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018ea:	897b      	ldrh	r3, [r7, #10]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4907      	ldr	r1, [pc, #28]	; (8001918 <I2C_MasterRequestWrite+0x100>)
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f933 	bl	8001b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	00010008 	.word	0x00010008
 8001918:	00010002 	.word	0x00010002

0800191c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af02      	add	r7, sp, #8
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	460b      	mov	r3, r1
 800192a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001940:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d006      	beq.n	8001956 <I2C_MasterRequestRead+0x3a>
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d003      	beq.n	8001956 <I2C_MasterRequestRead+0x3a>
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001954:	d108      	bne.n	8001968 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e00b      	b.n	8001980 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	2b11      	cmp	r3, #17
 800196e:	d107      	bne.n	8001980 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800197e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f893 	bl	8001ab8 <I2C_WaitOnFlagUntilTimeout>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00d      	beq.n	80019b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a6:	d103      	bne.n	80019b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e079      	b.n	8001aa8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019bc:	d108      	bne.n	80019d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019be:	897b      	ldrh	r3, [r7, #10]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	e05f      	b.n	8001a90 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019d0:	897b      	ldrh	r3, [r7, #10]
 80019d2:	11db      	asrs	r3, r3, #7
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f003 0306 	and.w	r3, r3, #6
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f063 030f 	orn	r3, r3, #15
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4930      	ldr	r1, [pc, #192]	; (8001ab0 <I2C_MasterRequestRead+0x194>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b9 	bl	8001b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e054      	b.n	8001aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4929      	ldr	r1, [pc, #164]	; (8001ab4 <I2C_MasterRequestRead+0x198>)
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f8a9 	bl	8001b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e044      	b.n	8001aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f831 	bl	8001ab8 <I2C_WaitOnFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00d      	beq.n	8001a78 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a6a:	d103      	bne.n	8001a74 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e017      	b.n	8001aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a78:	897b      	ldrh	r3, [r7, #10]
 8001a7a:	11db      	asrs	r3, r3, #7
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f003 0306 	and.w	r3, r3, #6
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f063 030e 	orn	r3, r3, #14
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <I2C_MasterRequestRead+0x198>)
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f865 	bl	8001b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	00010008 	.word	0x00010008
 8001ab4:	00010002 	.word	0x00010002

08001ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ac8:	e025      	b.n	8001b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ad0:	d021      	beq.n	8001b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad2:	f7fe ff85 	bl	80009e0 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d302      	bcc.n	8001ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d116      	bne.n	8001b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f043 0220 	orr.w	r2, r3, #32
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e023      	b.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d10d      	bne.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf0c      	ite	eq
 8001b32:	2301      	moveq	r3, #1
 8001b34:	2300      	movne	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	e00c      	b.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4013      	ands	r3, r2
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bf0c      	ite	eq
 8001b4e:	2301      	moveq	r3, #1
 8001b50:	2300      	movne	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d0b6      	beq.n	8001aca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b74:	e051      	b.n	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b84:	d123      	bne.n	8001bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f043 0204 	orr.w	r2, r3, #4
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e046      	b.n	8001c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd4:	d021      	beq.n	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd6:	f7fe ff03 	bl	80009e0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d302      	bcc.n	8001bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d116      	bne.n	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f043 0220 	orr.w	r2, r3, #32
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e020      	b.n	8001c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10c      	bne.n	8001c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	e00b      	b.n	8001c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	43da      	mvns	r2, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d18d      	bne.n	8001b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c70:	e02d      	b.n	8001cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f8ce 	bl	8001e14 <I2C_IsAcknowledgeFailed>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e02d      	b.n	8001cde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c88:	d021      	beq.n	8001cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8a:	f7fe fea9 	bl	80009e0 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d302      	bcc.n	8001ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d116      	bne.n	8001cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f043 0220 	orr.w	r2, r3, #32
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e007      	b.n	8001cde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd8:	2b80      	cmp	r3, #128	; 0x80
 8001cda:	d1ca      	bne.n	8001c72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cf2:	e02d      	b.n	8001d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f88d 	bl	8001e14 <I2C_IsAcknowledgeFailed>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e02d      	b.n	8001d60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d0a:	d021      	beq.n	8001d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0c:	f7fe fe68 	bl	80009e0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d302      	bcc.n	8001d22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d116      	bne.n	8001d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f043 0220 	orr.w	r2, r3, #32
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e007      	b.n	8001d60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d1ca      	bne.n	8001cf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d74:	e042      	b.n	8001dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d119      	bne.n	8001db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0210 	mvn.w	r2, #16
 8001d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e029      	b.n	8001e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db8:	f7fe fe12 	bl	80009e0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d302      	bcc.n	8001dce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d116      	bne.n	8001dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e007      	b.n	8001e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e06:	2b40      	cmp	r3, #64	; 0x40
 8001e08:	d1b5      	bne.n	8001d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2a:	d11b      	bne.n	8001e64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f043 0204 	orr.w	r2, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e267      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d075      	beq.n	8001f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e92:	4b88      	ldr	r3, [pc, #544]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b85      	ldr	r3, [pc, #532]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b82      	ldr	r3, [pc, #520]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	4b7e      	ldr	r3, [pc, #504]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d05b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x108>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d157      	bne.n	8001f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e242      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x74>
 8001eda:	4b76      	ldr	r3, [pc, #472]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a75      	ldr	r2, [pc, #468]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x98>
 8001ef2:	4b70      	ldr	r3, [pc, #448]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6f      	ldr	r2, [pc, #444]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6d      	ldr	r3, [pc, #436]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6c      	ldr	r2, [pc, #432]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a68      	ldr	r2, [pc, #416]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a65      	ldr	r2, [pc, #404]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fd58 	bl	80009e0 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe fd54 	bl	80009e0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e207      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xc0>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7fe fd44 	bl	80009e0 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe fd40 	bl	80009e0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1f3      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b51      	ldr	r3, [pc, #324]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0xe8>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1c7      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4937      	ldr	r1, [pc, #220]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_OscConfig+0x244>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7fe fcf9 	bl	80009e0 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7fe fcf5 	bl	80009e0 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1a8      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4925      	ldr	r1, [pc, #148]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_OscConfig+0x244>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe fcd8 	bl	80009e0 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002034:	f7fe fcd4 	bl	80009e0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e187      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d036      	beq.n	80020cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_RCC_OscConfig+0x248>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7fe fcb8 	bl	80009e0 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe fcb4 	bl	80009e0 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e167      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_OscConfig+0x240>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x200>
 8002092:	e01b      	b.n	80020cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_OscConfig+0x248>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7fe fca1 	bl	80009e0 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	e00e      	b.n	80020c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a2:	f7fe fc9d 	bl	80009e0 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d907      	bls.n	80020c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e150      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
 80020b4:	40023800 	.word	0x40023800
 80020b8:	42470000 	.word	0x42470000
 80020bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ea      	bne.n	80020a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8097 	beq.w	8002208 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10f      	bne.n	800210a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b7d      	ldr	r3, [pc, #500]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a7c      	ldr	r2, [pc, #496]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b7a      	ldr	r3, [pc, #488]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b77      	ldr	r3, [pc, #476]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a73      	ldr	r2, [pc, #460]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7fe fc5d 	bl	80009e0 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212a:	f7fe fc59 	bl	80009e0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e10c      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x474>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x2ea>
 8002150:	4b64      	ldr	r3, [pc, #400]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a63      	ldr	r2, [pc, #396]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	e01c      	b.n	8002198 <HAL_RCC_OscConfig+0x324>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x30c>
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a5e      	ldr	r2, [pc, #376]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	4b5c      	ldr	r3, [pc, #368]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	4a5b      	ldr	r2, [pc, #364]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6713      	str	r3, [r2, #112]	; 0x70
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0x324>
 8002180:	4b58      	ldr	r3, [pc, #352]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a57      	ldr	r2, [pc, #348]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
 800218c:	4b55      	ldr	r3, [pc, #340]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4a54      	ldr	r2, [pc, #336]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 0304 	bic.w	r3, r3, #4
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fc1e 	bl	80009e0 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe fc1a 	bl	80009e0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0cb      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0ee      	beq.n	80021a8 <HAL_RCC_OscConfig+0x334>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7fe fc08 	bl	80009e0 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe fc04 	bl	80009e0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0b5      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ee      	bne.n	80021d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	4a38      	ldr	r2, [pc, #224]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002206:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80a1 	beq.w	8002354 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	d05c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d141      	bne.n	80022aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b31      	ldr	r3, [pc, #196]	; (80022ec <HAL_RCC_OscConfig+0x478>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fbd8 	bl	80009e0 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe fbd4 	bl	80009e0 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e087      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	3b01      	subs	r3, #1
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	491b      	ldr	r1, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x478>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe fbad 	bl	80009e0 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228a:	f7fe fba9 	bl	80009e0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e05c      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x416>
 80022a8:	e054      	b.n	8002354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_RCC_OscConfig+0x478>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fb96 	bl	80009e0 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fb92 	bl	80009e0 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e045      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_RCC_OscConfig+0x470>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x444>
 80022d6:	e03d      	b.n	8002354 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e038      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40007000 	.word	0x40007000
 80022ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x4ec>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d028      	beq.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d121      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d11a      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002328:	4293      	cmp	r3, r2
 800232a:	d111      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	3b01      	subs	r3, #1
 800233a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0cc      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d90c      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d044      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d119      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d003      	beq.n	8002422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	2b03      	cmp	r3, #3
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e067      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4934      	ldr	r1, [pc, #208]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7fe fac4 	bl	80009e0 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7fe fac0 	bl	80009e0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d20c      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fa24 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023c00 	.word	0x40023c00
 8002520:	40023800 	.word	0x40023800
 8002524:	080078a4 	.word	0x080078a4
 8002528:	20000008 	.word	0x20000008
 800252c:	2000000c 	.word	0x2000000c

08002530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002534:	b090      	sub	sp, #64	; 0x40
 8002536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
 800253c:	2300      	movs	r3, #0
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002540:	2300      	movs	r3, #0
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002548:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d00d      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x40>
 8002554:	2b08      	cmp	r3, #8
 8002556:	f200 80a1 	bhi.w	800269c <HAL_RCC_GetSysClockFreq+0x16c>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x34>
 800255e:	2b04      	cmp	r3, #4
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x3a>
 8002562:	e09b      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002566:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002568:	e09b      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256a:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800256c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800256e:	e098      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002570:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257a:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d028      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	2200      	movs	r2, #0
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	627a      	str	r2, [r7, #36]	; 0x24
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002598:	2100      	movs	r1, #0
 800259a:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800259c:	fb03 f201 	mul.w	r2, r3, r1
 80025a0:	2300      	movs	r3, #0
 80025a2:	fb00 f303 	mul.w	r3, r0, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	4a43      	ldr	r2, [pc, #268]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80025aa:	fba0 1202 	umull	r1, r2, r0, r2
 80025ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025b0:	460a      	mov	r2, r1
 80025b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80025b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b6:	4413      	add	r3, r2
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	2200      	movs	r2, #0
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	61fa      	str	r2, [r7, #28]
 80025c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025ca:	f7fd fe03 	bl	80001d4 <__aeabi_uldivmod>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4613      	mov	r3, r2
 80025d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d6:	e053      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d8:	4b35      	ldr	r3, [pc, #212]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	2200      	movs	r2, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	617a      	str	r2, [r7, #20]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025ea:	f04f 0b00 	mov.w	fp, #0
 80025ee:	4652      	mov	r2, sl
 80025f0:	465b      	mov	r3, fp
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	f04f 0100 	mov.w	r1, #0
 80025fa:	0159      	lsls	r1, r3, #5
 80025fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002600:	0150      	lsls	r0, r2, #5
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	ebb2 080a 	subs.w	r8, r2, sl
 800260a:	eb63 090b 	sbc.w	r9, r3, fp
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800261a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800261e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002622:	ebb2 0408 	subs.w	r4, r2, r8
 8002626:	eb63 0509 	sbc.w	r5, r3, r9
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	00eb      	lsls	r3, r5, #3
 8002634:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002638:	00e2      	lsls	r2, r4, #3
 800263a:	4614      	mov	r4, r2
 800263c:	461d      	mov	r5, r3
 800263e:	eb14 030a 	adds.w	r3, r4, sl
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	eb45 030b 	adc.w	r3, r5, fp
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002656:	4629      	mov	r1, r5
 8002658:	028b      	lsls	r3, r1, #10
 800265a:	4621      	mov	r1, r4
 800265c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002660:	4621      	mov	r1, r4
 8002662:	028a      	lsls	r2, r1, #10
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266a:	2200      	movs	r2, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	60fa      	str	r2, [r7, #12]
 8002670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002674:	f7fd fdae 	bl	80001d4 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4613      	mov	r3, r2
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	3301      	adds	r3, #1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800269a:	e002      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800269e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3740      	adds	r7, #64	; 0x40
 80026a8:	46bd      	mov	sp, r7
 80026aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	00f42400 	.word	0x00f42400
 80026b8:	017d7840 	.word	0x017d7840

080026bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000008 	.word	0x20000008

080026d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026d8:	f7ff fff0 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0a9b      	lsrs	r3, r3, #10
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4903      	ldr	r1, [pc, #12]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	080078b4 	.word	0x080078b4

080026fc <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800270a:	6839      	ldr	r1, [r7, #0]
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f001 fd88 	bl	8004222 <VL53L0X_get_offset_calibration_data_micro_meter>
 8002712:	4603      	mov	r3, r0
 8002714:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b0a4      	sub	sp, #144	; 0x90
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800272c:	2300      	movs	r3, #0
 800272e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002732:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002736:	2b00      	cmp	r3, #0
 8002738:	d107      	bne.n	800274a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800273a:	2200      	movs	r2, #0
 800273c:	2188      	movs	r1, #136	; 0x88
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f004 ff32 	bl	80075a8 <VL53L0X_WrByte>
 8002744:	4603      	mov	r3, r0
 8002746:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002758:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4aae      	ldr	r2, [pc, #696]	; (8002a18 <VL53L0X_DataInit+0x2f4>)
 8002760:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	4619      	mov	r1, r3
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 faef 	bl	8002d54 <VL53L0X_GetDeviceParameters>
 8002776:	4603      	mov	r3, r0
 8002778:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 800277c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002780:	2b00      	cmp	r3, #0
 8002782:	d130      	bne.n	80027e6 <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 8002784:	2300      	movs	r3, #0
 8002786:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 8002788:	2300      	movs	r3, #0
 800278a:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 800278c:	2300      	movs	r3, #0
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 8002790:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 8002794:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 8002796:	f24b 3333 	movw	r3, #45875	; 0xb333
 800279a:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 800279c:	4b9f      	ldr	r3, [pc, #636]	; (8002a1c <VL53L0X_DataInit+0x2f8>)
 800279e:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 80027a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a4:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 80027a6:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 80027aa:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 80027ac:	4b9c      	ldr	r3, [pc, #624]	; (8002a20 <VL53L0X_DataInit+0x2fc>)
 80027ae:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 80027b0:	4b9c      	ldr	r3, [pc, #624]	; (8002a24 <VL53L0X_DataInit+0x300>)
 80027b2:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 80027b4:	4b9c      	ldr	r3, [pc, #624]	; (8002a28 <VL53L0X_DataInit+0x304>)
 80027b6:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 80027b8:	4b9c      	ldr	r3, [pc, #624]	; (8002a2c <VL53L0X_DataInit+0x308>)
 80027ba:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 80027bc:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80027c0:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 80027c2:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 80027c6:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 80027c8:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80027cc:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 80027ce:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 80027d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3308      	adds	r3, #8
 80027da:	f107 0110 	add.w	r1, r7, #16
 80027de:	2278      	movs	r2, #120	; 0x78
 80027e0:	4618      	mov	r0, r3
 80027e2:	f005 f835 	bl	8007850 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2264      	movs	r2, #100	; 0x64
 80027ea:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80027f4:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027fe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002808:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002814:	2201      	movs	r2, #1
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f004 fec5 	bl	80075a8 <VL53L0X_WrByte>
 800281e:	4603      	mov	r3, r0
 8002820:	461a      	mov	r2, r3
 8002822:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002826:	4313      	orrs	r3, r2
 8002828:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800282c:	2201      	movs	r2, #1
 800282e:	21ff      	movs	r1, #255	; 0xff
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f004 feb9 	bl	80075a8 <VL53L0X_WrByte>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800283e:	4313      	orrs	r3, r2
 8002840:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f004 fead 	bl	80075a8 <VL53L0X_WrByte>
 800284e:	4603      	mov	r3, r0
 8002850:	461a      	mov	r2, r3
 8002852:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002856:	4313      	orrs	r3, r2
 8002858:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800285c:	f107 030f 	add.w	r3, r7, #15
 8002860:	461a      	mov	r2, r3
 8002862:	2191      	movs	r1, #145	; 0x91
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f004 ff21 	bl	80076ac <VL53L0X_RdByte>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002872:	4313      	orrs	r3, r2
 8002874:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002880:	2201      	movs	r2, #1
 8002882:	2100      	movs	r1, #0
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f004 fe8f 	bl	80075a8 <VL53L0X_WrByte>
 800288a:	4603      	mov	r3, r0
 800288c:	461a      	mov	r2, r3
 800288e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002892:	4313      	orrs	r3, r2
 8002894:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002898:	2200      	movs	r2, #0
 800289a:	21ff      	movs	r1, #255	; 0xff
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f004 fe83 	bl	80075a8 <VL53L0X_WrByte>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461a      	mov	r2, r3
 80028a6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2180      	movs	r1, #128	; 0x80
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f004 fe77 	bl	80075a8 <VL53L0X_WrByte>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028ce:	e017      	b.n	8002900 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 80028d0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d118      	bne.n	800290a <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80028d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2201      	movs	r2, #1
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fd68 	bl	80033b8 <VL53L0X_SetLimitCheckEnable>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80028f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028fa:	3301      	adds	r3, #1
 80028fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002904:	2b05      	cmp	r3, #5
 8002906:	dde3      	ble.n	80028d0 <VL53L0X_DataInit+0x1ac>
 8002908:	e000      	b.n	800290c <VL53L0X_DataInit+0x1e8>
		else
			break;
 800290a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800290c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002910:	2b00      	cmp	r3, #0
 8002912:	d107      	bne.n	8002924 <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002914:	2200      	movs	r2, #0
 8002916:	2102      	movs	r1, #2
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fd4d 	bl	80033b8 <VL53L0X_SetLimitCheckEnable>
 800291e:	4603      	mov	r3, r0
 8002920:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002924:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800292c:	2200      	movs	r2, #0
 800292e:	2103      	movs	r1, #3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fd41 	bl	80033b8 <VL53L0X_SetLimitCheckEnable>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800293c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002944:	2200      	movs	r2, #0
 8002946:	2104      	movs	r1, #4
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fd35 	bl	80033b8 <VL53L0X_SetLimitCheckEnable>
 800294e:	4603      	mov	r3, r0
 8002950:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002954:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002958:	2b00      	cmp	r3, #0
 800295a:	d107      	bne.n	800296c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800295c:	2200      	movs	r2, #0
 800295e:	2105      	movs	r1, #5
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fd29 	bl	80033b8 <VL53L0X_SetLimitCheckEnable>
 8002966:	4603      	mov	r3, r0
 8002968:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800296c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002970:	2b00      	cmp	r3, #0
 8002972:	d108      	bne.n	8002986 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002974:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8002978:	2100      	movs	r1, #0
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fdcc 	bl	8003518 <VL53L0X_SetLimitCheckValue>
 8002980:	4603      	mov	r3, r0
 8002982:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002986:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800298a:	2b00      	cmp	r3, #0
 800298c:	d108      	bne.n	80029a0 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800298e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002992:	2101      	movs	r1, #1
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fdbf 	bl	8003518 <VL53L0X_SetLimitCheckValue>
 800299a:	4603      	mov	r3, r0
 800299c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80029a0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d108      	bne.n	80029ba <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80029a8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80029ac:	2102      	movs	r1, #2
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fdb2 	bl	8003518 <VL53L0X_SetLimitCheckValue>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80029ba:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80029c2:	2200      	movs	r2, #0
 80029c4:	2103      	movs	r1, #3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fda6 	bl	8003518 <VL53L0X_SetLimitCheckValue>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80029d2:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80029e2:	22ff      	movs	r2, #255	; 0xff
 80029e4:	2101      	movs	r1, #1
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f004 fdde 	bl	80075a8 <VL53L0X_WrByte>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 80029fa:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 8002a0a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3790      	adds	r7, #144	; 0x90
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	000970a4 	.word	0x000970a4
 8002a1c:	044c0000 	.word	0x044c0000
 8002a20:	0003cccc 	.word	0x0003cccc
 8002a24:	02ee0000 	.word	0x02ee0000
 8002a28:	00074ccc 	.word	0x00074ccc
 8002a2c:	02260000 	.word	0x02260000

08002a30 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b0ac      	sub	sp, #176	; 0xb0
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002a3e:	f107 031c 	add.w	r3, r7, #28
 8002a42:	2278      	movs	r2, #120	; 0x78
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 ff10 	bl	800786c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002a6e:	2101      	movs	r1, #1
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f002 fb2c 	bl	80050ce <VL53L0X_get_info_from_device>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002a8c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002a90:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d80f      	bhi.n	8002ab8 <VL53L0X_StaticInit+0x88>
 8002a98:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d103      	bne.n	8002aa8 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 8002aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d807      	bhi.n	8002ab8 <VL53L0X_StaticInit+0x88>
 8002aa8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10f      	bne.n	8002ad0 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 8002ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ab4:	2b0c      	cmp	r3, #12
 8002ab6:	d90b      	bls.n	8002ad0 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002ab8:	f107 0218 	add.w	r2, r7, #24
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f001 fda8 	bl	8004618 <VL53L0X_perform_ref_spad_management>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002ace:	e00a      	b.n	8002ae6 <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002ad0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f001 ffa8 	bl	8004a30 <VL53L0X_set_reference_spads>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002ae6:	4b93      	ldr	r3, [pc, #588]	; (8002d34 <VL53L0X_StaticInit+0x304>)
 8002ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8002aec:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8002afa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002afe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b10:	e002      	b.n	8002b18 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002b12:	4b88      	ldr	r3, [pc, #544]	; (8002d34 <VL53L0X_StaticInit+0x304>)
 8002b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002b18:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 8002b20:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f003 fe6d 	bl	8006804 <VL53L0X_load_tuning_settings>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002b30:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f001 f99c 	bl	8003e80 <VL53L0X_SetGpioConfig>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002b4e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d121      	bne.n	8002b9a <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002b56:	2201      	movs	r2, #1
 8002b58:	21ff      	movs	r1, #255	; 0xff
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f004 fd24 	bl	80075a8 <VL53L0X_WrByte>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002b66:	f107 031a 	add.w	r3, r7, #26
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2184      	movs	r1, #132	; 0x84
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f004 fdc6 	bl	8007700 <VL53L0X_RdWord>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002b82:	2200      	movs	r2, #0
 8002b84:	21ff      	movs	r1, #255	; 0xff
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f004 fd0e 	bl	80075a8 <VL53L0X_WrByte>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002b9a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002ba2:	8b7b      	ldrh	r3, [r7, #26]
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8002bae:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002bb6:	f107 031c 	add.w	r3, r7, #28
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8c9 	bl	8002d54 <VL53L0X_GetDeviceParameters>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8002bc8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d110      	bne.n	8002bf2 <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002bd0:	f107 0319 	add.w	r3, r7, #25
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9b1 	bl	8002f3e <VL53L0X_GetFractionEnable>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 8002be2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002bea:	7e7a      	ldrb	r2, [r7, #25]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002bf2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d107      	bne.n	8002c0a <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	f107 011c 	add.w	r1, r7, #28
 8002c02:	2278      	movs	r2, #120	; 0x78
 8002c04:	4618      	mov	r0, r3
 8002c06:	f004 fe23 	bl	8007850 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8002c0a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d111      	bne.n	8002c36 <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 8002c12:	f107 0319 	add.w	r3, r7, #25
 8002c16:	461a      	mov	r2, r3
 8002c18:	2101      	movs	r1, #1
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f004 fd46 	bl	80076ac <VL53L0X_RdByte>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002c26:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002c2e:	7e7a      	ldrb	r2, [r7, #25]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8002c36:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f9f0 	bl	8003028 <VL53L0X_SetSequenceStepEnable>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8002c4e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d107      	bne.n	8002c66 <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002c56:	2200      	movs	r2, #0
 8002c58:	2102      	movs	r1, #2
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f9e4 	bl	8003028 <VL53L0X_SetSequenceStepEnable>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8002c66:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d103      	bne.n	8002c76 <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002c76:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002c7e:	f107 0313 	add.w	r3, r7, #19
 8002c82:	461a      	mov	r2, r3
 8002c84:	2100      	movs	r1, #0
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f9b6 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002c92:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002c9a:	7cfa      	ldrb	r2, [r7, #19]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002ca2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002caa:	f107 0313 	add.w	r3, r7, #19
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9a0 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002cbe:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002cc6:	7cfa      	ldrb	r2, [r7, #19]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002cce:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2103      	movs	r1, #3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f002 ff78 	bl	8005bd4 <get_sequence_step_timeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002cea:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002cfa:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	461a      	mov	r2, r3
 8002d08:	2104      	movs	r1, #4
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f002 ff62 	bl	8005bd4 <get_sequence_step_timeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002d16:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002d26:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	37a8      	adds	r7, #168	; 0xa8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200001cc 	.word	0x200001cc

08002d38 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8002d40:	239d      	movs	r3, #157	; 0x9d
 8002d42:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8002d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8d6 	bl	8002f18 <VL53L0X_GetDeviceMode>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa9e 	bl	80032c0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8002d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8002d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d107      	bne.n	8002dae <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	3310      	adds	r3, #16
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fad4 	bl	8003352 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d107      	bne.n	8002dc6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	3314      	adds	r3, #20
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff fc9d 	bl	80026fc <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d134      	bne.n	8002e38 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	e02a      	b.n	8002e2a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8002dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d12a      	bne.n	8002e32 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	b299      	uxth	r1, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3308      	adds	r3, #8
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	461a      	mov	r2, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fbf4 	bl	80035dc <VL53L0X_GetLimitCheckValue>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8002dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d117      	bne.n	8002e36 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	b299      	uxth	r1, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	4413      	add	r3, r2
 8002e12:	461a      	mov	r2, r3
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fb5b 	bl	80034d0 <VL53L0X_GetLimitCheckEnable>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	3301      	adds	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	ddd1      	ble.n	8002dd4 <VL53L0X_GetDeviceParameters+0x80>
 8002e30:	e002      	b.n	8002e38 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8002e32:	bf00      	nop
 8002e34:	e000      	b.n	8002e38 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8002e36:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d107      	bne.n	8002e50 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	3374      	adds	r3, #116	; 0x74
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fc56 	bl	80036f8 <VL53L0X_GetWrapAroundCheckEnable>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f89f 	bl	8002fa2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8002e64:	4603      	mov	r3, r0
 8002e66:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d120      	bne.n	8002eb2 <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	e01a      	b.n	8002eac <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	3310      	adds	r3, #16
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	330e      	adds	r3, #14
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	3316      	adds	r3, #22
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 8002e9a:	6839      	ldr	r1, [r7, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3314      	adds	r3, #20
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	dde1      	ble.n	8002e76 <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	2b15      	cmp	r3, #21
 8002ed4:	bf8c      	ite	hi
 8002ed6:	2201      	movhi	r2, #1
 8002ed8:	2200      	movls	r2, #0
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	2a00      	cmp	r2, #0
 8002ede:	d10e      	bne.n	8002efe <VL53L0X_SetDeviceMode+0x3e>
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <VL53L0X_SetDeviceMode+0x54>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	721a      	strb	r2, [r3, #8]
		break;
 8002efc:	e001      	b.n	8002f02 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002efe:	23f8      	movs	r3, #248	; 0xf8
 8002f00:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	0030000b 	.word	0x0030000b

08002f18 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7a1a      	ldrb	r2, [r3, #8]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	2109      	movs	r1, #9
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f004 fbab 	bl	80076ac <VL53L0X_RdByte>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8002f8a:	6839      	ldr	r1, [r7, #0]
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f003 fab4 	bl	80064fa <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8002f92:	4603      	mov	r3, r0
 8002f94:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8002f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8002fb0:	6839      	ldr	r1, [r7, #0]
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f003 fb74 	bl	80066a0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8002fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8002fdc:	78ba      	ldrb	r2, [r7, #2]
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f002 ffc9 	bl	8005f7a <VL53L0X_set_vcsel_pulse_period>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8002fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	460b      	mov	r3, r1
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003006:	2300      	movs	r3, #0
 8003008:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800300a:	7afb      	ldrb	r3, [r7, #11]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4619      	mov	r1, r3
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f003 fa3b 	bl	800648c <VL53L0X_get_vcsel_pulse_period>
 8003016:	4603      	mov	r3, r0
 8003018:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800301a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
 8003034:	4613      	mov	r3, r2
 8003036:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003038:	2300      	movs	r3, #0
 800303a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003044:	f107 030f 	add.w	r3, r7, #15
 8003048:	461a      	mov	r2, r3
 800304a:	2101      	movs	r1, #1
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f004 fb2d 	bl	80076ac <VL53L0X_RdByte>
 8003052:	4603      	mov	r3, r0
 8003054:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800305a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d15a      	bne.n	8003118 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8003062:	78bb      	ldrb	r3, [r7, #2]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d12b      	bne.n	80030c0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	2b04      	cmp	r3, #4
 800306c:	d825      	bhi.n	80030ba <VL53L0X_SetSequenceStepEnable+0x92>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	08003089 	.word	0x08003089
 8003078:	08003093 	.word	0x08003093
 800307c:	0800309d 	.word	0x0800309d
 8003080:	080030a7 	.word	0x080030a7
 8003084:	080030b1 	.word	0x080030b1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003088:	7dbb      	ldrb	r3, [r7, #22]
 800308a:	f043 0310 	orr.w	r3, r3, #16
 800308e:	75bb      	strb	r3, [r7, #22]
				break;
 8003090:	e043      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003092:	7dbb      	ldrb	r3, [r7, #22]
 8003094:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003098:	75bb      	strb	r3, [r7, #22]
				break;
 800309a:	e03e      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800309c:	7dbb      	ldrb	r3, [r7, #22]
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	75bb      	strb	r3, [r7, #22]
				break;
 80030a4:	e039      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80030a6:	7dbb      	ldrb	r3, [r7, #22]
 80030a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ac:	75bb      	strb	r3, [r7, #22]
				break;
 80030ae:	e034      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80030b0:	7dbb      	ldrb	r3, [r7, #22]
 80030b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030b6:	75bb      	strb	r3, [r7, #22]
				break;
 80030b8:	e02f      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80030ba:	23fc      	movs	r3, #252	; 0xfc
 80030bc:	75fb      	strb	r3, [r7, #23]
 80030be:	e02c      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d825      	bhi.n	8003112 <VL53L0X_SetSequenceStepEnable+0xea>
 80030c6:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <VL53L0X_SetSequenceStepEnable+0xa4>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	080030e1 	.word	0x080030e1
 80030d0:	080030eb 	.word	0x080030eb
 80030d4:	080030f5 	.word	0x080030f5
 80030d8:	080030ff 	.word	0x080030ff
 80030dc:	08003109 	.word	0x08003109
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80030e0:	7dbb      	ldrb	r3, [r7, #22]
 80030e2:	f023 0310 	bic.w	r3, r3, #16
 80030e6:	75bb      	strb	r3, [r7, #22]
				break;
 80030e8:	e017      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80030ea:	7dbb      	ldrb	r3, [r7, #22]
 80030ec:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80030f0:	75bb      	strb	r3, [r7, #22]
				break;
 80030f2:	e012      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80030f4:	7dbb      	ldrb	r3, [r7, #22]
 80030f6:	f023 0304 	bic.w	r3, r3, #4
 80030fa:	75bb      	strb	r3, [r7, #22]
				break;
 80030fc:	e00d      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80030fe:	7dbb      	ldrb	r3, [r7, #22]
 8003100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003104:	75bb      	strb	r3, [r7, #22]
				break;
 8003106:	e008      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003108:	7dbb      	ldrb	r3, [r7, #22]
 800310a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800310e:	75bb      	strb	r3, [r7, #22]
				break;
 8003110:	e003      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003112:	23fc      	movs	r3, #252	; 0xfc
 8003114:	75fb      	strb	r3, [r7, #23]
 8003116:	e000      	b.n	800311a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8003118:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	7dba      	ldrb	r2, [r7, #22]
 800311e:	429a      	cmp	r2, r3
 8003120:	d01e      	beq.n	8003160 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003122:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800312a:	7dbb      	ldrb	r3, [r7, #22]
 800312c:	461a      	mov	r2, r3
 800312e:	2101      	movs	r1, #1
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f004 fa39 	bl	80075a8 <VL53L0X_WrByte>
 8003136:	4603      	mov	r3, r0
 8003138:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800313a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7dba      	ldrb	r2, [r7, #22]
 8003146:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800314a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003158:	6939      	ldr	r1, [r7, #16]
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ff0e 	bl	8002f7c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003160:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	72fb      	strb	r3, [r7, #11]
 800317a:	4613      	mov	r3, r2
 800317c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003188:	7afb      	ldrb	r3, [r7, #11]
 800318a:	2b04      	cmp	r3, #4
 800318c:	d836      	bhi.n	80031fc <sequence_step_enabled+0x90>
 800318e:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <sequence_step_enabled+0x28>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	080031a9 	.word	0x080031a9
 8003198:	080031bb 	.word	0x080031bb
 800319c:	080031cd 	.word	0x080031cd
 80031a0:	080031df 	.word	0x080031df
 80031a4:	080031f1 	.word	0x080031f1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80031a8:	7abb      	ldrb	r3, [r7, #10]
 80031aa:	111b      	asrs	r3, r3, #4
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	701a      	strb	r2, [r3, #0]
		break;
 80031b8:	e022      	b.n	8003200 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80031ba:	7abb      	ldrb	r3, [r7, #10]
 80031bc:	10db      	asrs	r3, r3, #3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	701a      	strb	r2, [r3, #0]
		break;
 80031ca:	e019      	b.n	8003200 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80031cc:	7abb      	ldrb	r3, [r7, #10]
 80031ce:	109b      	asrs	r3, r3, #2
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	701a      	strb	r2, [r3, #0]
		break;
 80031dc:	e010      	b.n	8003200 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80031de:	7abb      	ldrb	r3, [r7, #10]
 80031e0:	119b      	asrs	r3, r3, #6
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	701a      	strb	r2, [r3, #0]
		break;
 80031ee:	e007      	b.n	8003200 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80031f0:	7abb      	ldrb	r3, [r7, #10]
 80031f2:	09db      	lsrs	r3, r3, #7
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	701a      	strb	r2, [r3, #0]
		break;
 80031fa:	e001      	b.n	8003200 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80031fc:	23fc      	movs	r3, #252	; 0xfc
 80031fe:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003200:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003222:	f107 030e 	add.w	r3, r7, #14
 8003226:	461a      	mov	r2, r3
 8003228:	2101      	movs	r1, #1
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f004 fa3e 	bl	80076ac <VL53L0X_RdByte>
 8003230:	4603      	mov	r3, r0
 8003232:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8003234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d107      	bne.n	800324c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800323c:	7bba      	ldrb	r2, [r7, #14]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2100      	movs	r1, #0
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff ff92 	bl	800316c <sequence_step_enabled>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800324c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d108      	bne.n	8003266 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8003254:	7bba      	ldrb	r2, [r7, #14]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	3302      	adds	r3, #2
 800325a:	2101      	movs	r1, #1
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff85 	bl	800316c <sequence_step_enabled>
 8003262:	4603      	mov	r3, r0
 8003264:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800326e:	7bba      	ldrb	r2, [r7, #14]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	2102      	movs	r1, #2
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ff78 	bl	800316c <sequence_step_enabled>
 800327c:	4603      	mov	r3, r0
 800327e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d108      	bne.n	800329a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8003288:	7bba      	ldrb	r2, [r7, #14]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	3303      	adds	r3, #3
 800328e:	2103      	movs	r1, #3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ff6b 	bl	800316c <sequence_step_enabled>
 8003296:	4603      	mov	r3, r0
 8003298:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800329a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d108      	bne.n	80032b4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80032a2:	7bba      	ldrb	r2, [r7, #14]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	3304      	adds	r3, #4
 80032a8:	2104      	movs	r1, #4
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ff5e 	bl	800316c <sequence_step_enabled>
 80032b0:	4603      	mov	r3, r0
 80032b2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80032b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	461a      	mov	r2, r3
 80032d4:	21f8      	movs	r1, #248	; 0xf8
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f004 fa12 	bl	8007700 <VL53L0X_RdWord>
 80032dc:	4603      	mov	r3, r0
 80032de:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80032e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d108      	bne.n	80032fa <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80032e8:	f107 0308 	add.w	r3, r7, #8
 80032ec:	461a      	mov	r2, r3
 80032ee:	2104      	movs	r1, #4
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f004 fa3d 	bl	8007770 <VL53L0X_RdDWord>
 80032f6:	4603      	mov	r3, r0
 80032f8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80032fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8003302:	89bb      	ldrh	r3, [r7, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	89ba      	ldrh	r2, [r7, #12]
 800330c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800331c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7d1b      	ldrb	r3, [r3, #20]
 800333a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	7bba      	ldrb	r2, [r7, #14]
 8003340:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800335c:	2300      	movs	r3, #0
 800335e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8003360:	f107 030e 	add.w	r3, r7, #14
 8003364:	461a      	mov	r2, r3
 8003366:	2120      	movs	r1, #32
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f004 f9c9 	bl	8007700 <VL53L0X_RdWord>
 800336e:	4603      	mov	r3, r0
 8003370:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8003372:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d118      	bne.n	80033ac <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800337a:	89fb      	ldrh	r3, [r7, #14]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	751a      	strb	r2, [r3, #20]
 8003392:	e00b      	b.n	80033ac <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8003394:	89fb      	ldrh	r3, [r7, #14]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80033ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
 80033c4:	4613      	mov	r3, r2
 80033c6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d902      	bls.n	80033e4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80033de:	23fc      	movs	r3, #252	; 0xfc
 80033e0:	75fb      	strb	r3, [r7, #23]
 80033e2:	e05b      	b.n	800349c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80033e4:	787b      	ldrb	r3, [r7, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73bb      	strb	r3, [r7, #14]
 80033f6:	e00a      	b.n	800340e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80033f8:	887b      	ldrh	r3, [r7, #2]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	330a      	adds	r3, #10
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d841      	bhi.n	8003498 <VL53L0X_SetLimitCheckEnable+0xe0>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <VL53L0X_SetLimitCheckEnable+0x64>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003435 	.word	0x08003435
 8003420:	0800343f 	.word	0x0800343f
 8003424:	08003455 	.word	0x08003455
 8003428:	0800345f 	.word	0x0800345f
 800342c:	08003469 	.word	0x08003469
 8003430:	08003481 	.word	0x08003481

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800343c:	e02e      	b.n	800349c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	2144      	movs	r1, #68	; 0x44
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f004 f8d1 	bl	80075f0 <VL53L0X_WrWord>
 800344e:	4603      	mov	r3, r0
 8003450:	75fb      	strb	r3, [r7, #23]

			break;
 8003452:	e023      	b.n	800349c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800345c:	e01e      	b.n	800349c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8003466:	e019      	b.n	800349c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8003468:	7bbb      	ldrb	r3, [r7, #14]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800346e:	7b7b      	ldrb	r3, [r7, #13]
 8003470:	22fe      	movs	r2, #254	; 0xfe
 8003472:	2160      	movs	r1, #96	; 0x60
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f004 f8e5 	bl	8007644 <VL53L0X_UpdateByte>
 800347a:	4603      	mov	r3, r0
 800347c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800347e:	e00d      	b.n	800349c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8003480:	7bbb      	ldrb	r3, [r7, #14]
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003486:	7b7b      	ldrb	r3, [r7, #13]
 8003488:	22ef      	movs	r2, #239	; 0xef
 800348a:	2160      	movs	r1, #96	; 0x60
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f004 f8d9 	bl	8007644 <VL53L0X_UpdateByte>
 8003492:	4603      	mov	r3, r0
 8003494:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8003496:	e001      	b.n	800349c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003498:	23fc      	movs	r3, #252	; 0xfc
 800349a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800349c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10f      	bne.n	80034c4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80034a4:	787b      	ldrb	r3, [r7, #1]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80034aa:	887b      	ldrh	r3, [r7, #2]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2020 	strb.w	r2, [r3, #32]
 80034b6:	e005      	b.n	80034c4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80034c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	460b      	mov	r3, r1
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80034e2:	897b      	ldrh	r3, [r7, #10]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d905      	bls.n	80034f4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80034e8:	23fc      	movs	r3, #252	; 0xfc
 80034ea:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e008      	b.n	8003506 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80034f4:	897b      	ldrh	r3, [r7, #10]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4413      	add	r3, r2
 80034fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034fe:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	7dba      	ldrb	r2, [r7, #22]
 8003504:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800350a:	4618      	mov	r0, r3
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	460b      	mov	r3, r1
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800352a:	897b      	ldrh	r3, [r7, #10]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003534:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8003536:	7dbb      	ldrb	r3, [r7, #22]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d107      	bne.n	800354c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800353c:	897b      	ldrh	r3, [r7, #10]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	330a      	adds	r3, #10
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	e040      	b.n	80035ce <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800354c:	897b      	ldrh	r3, [r7, #10]
 800354e:	2b05      	cmp	r3, #5
 8003550:	d830      	bhi.n	80035b4 <VL53L0X_SetLimitCheckValue+0x9c>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <VL53L0X_SetLimitCheckValue+0x40>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	08003571 	.word	0x08003571
 800355c:	08003579 	.word	0x08003579
 8003560:	0800358f 	.word	0x0800358f
 8003564:	08003597 	.word	0x08003597
 8003568:	0800359f 	.word	0x0800359f
 800356c:	0800359f 	.word	0x0800359f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8003576:	e01f      	b.n	80035b8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800357c:	b29b      	uxth	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	2144      	movs	r1, #68	; 0x44
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f004 f834 	bl	80075f0 <VL53L0X_WrWord>
 8003588:	4603      	mov	r3, r0
 800358a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800358c:	e014      	b.n	80035b8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003594:	e010      	b.n	80035b8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800359c:	e00c      	b.n	80035b8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	2164      	movs	r1, #100	; 0x64
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f004 f821 	bl	80075f0 <VL53L0X_WrWord>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80035b2:	e001      	b.n	80035b8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80035b4:	23fc      	movs	r3, #252	; 0xfc
 80035b6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80035b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80035c0:	897b      	ldrh	r3, [r7, #10]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	330a      	adds	r3, #10
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80035ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop

080035dc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	460b      	mov	r3, r1
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80035f2:	897b      	ldrh	r3, [r7, #10]
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d847      	bhi.n	8003688 <VL53L0X_GetLimitCheckValue+0xac>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <VL53L0X_GetLimitCheckValue+0x24>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003619 	.word	0x08003619
 8003604:	08003625 	.word	0x08003625
 8003608:	0800364b 	.word	0x0800364b
 800360c:	08003657 	.word	0x08003657
 8003610:	08003663 	.word	0x08003663
 8003614:	08003663 	.word	0x08003663

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	77bb      	strb	r3, [r7, #30]
		break;
 8003622:	e033      	b.n	800368c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003624:	f107 0316 	add.w	r3, r7, #22
 8003628:	461a      	mov	r2, r3
 800362a:	2144      	movs	r1, #68	; 0x44
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f004 f867 	bl	8007700 <VL53L0X_RdWord>
 8003632:	4603      	mov	r3, r0
 8003634:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003636:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800363e:	8afb      	ldrh	r3, [r7, #22]
 8003640:	025b      	lsls	r3, r3, #9
 8003642:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8003644:	2301      	movs	r3, #1
 8003646:	77bb      	strb	r3, [r7, #30]
		break;
 8003648:	e020      	b.n	800368c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	77bb      	strb	r3, [r7, #30]
		break;
 8003654:	e01a      	b.n	800368c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	77bb      	strb	r3, [r7, #30]
		break;
 8003660:	e014      	b.n	800368c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003662:	f107 0316 	add.w	r3, r7, #22
 8003666:	461a      	mov	r2, r3
 8003668:	2164      	movs	r1, #100	; 0x64
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f004 f848 	bl	8007700 <VL53L0X_RdWord>
 8003670:	4603      	mov	r3, r0
 8003672:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003674:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d102      	bne.n	8003682 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800367c:	8afb      	ldrh	r3, [r7, #22]
 800367e:	025b      	lsls	r3, r3, #9
 8003680:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	77bb      	strb	r3, [r7, #30]
		break;
 8003686:	e001      	b.n	800368c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003688:	23fc      	movs	r3, #252	; 0xfc
 800368a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800368c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d12a      	bne.n	80036ea <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8003694:	7fbb      	ldrb	r3, [r7, #30]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d124      	bne.n	80036e4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d110      	bne.n	80036c2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80036a0:	897b      	ldrh	r3, [r7, #10]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	330a      	adds	r3, #10
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80036b4:	897b      	ldrh	r3, [r7, #10]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2020 	strb.w	r2, [r3, #32]
 80036c0:	e013      	b.n	80036ea <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80036c8:	897b      	ldrh	r3, [r7, #10]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	330a      	adds	r3, #10
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80036d6:	897b      	ldrh	r3, [r7, #10]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2020 	strb.w	r2, [r3, #32]
 80036e2:	e002      	b.n	80036ea <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80036ea:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop

080036f8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003706:	f107 030e 	add.w	r3, r7, #14
 800370a:	461a      	mov	r2, r3
 800370c:	2101      	movs	r1, #1
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f003 ffcc 	bl	80076ac <VL53L0X_RdByte>
 8003714:	4603      	mov	r3, r0
 8003716:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10e      	bne.n	800373e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003720:	7bba      	ldrb	r2, [r7, #14]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 8003728:	7bbb      	ldrb	r3, [r7, #14]
 800372a:	b25b      	sxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	da03      	bge.n	8003738 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e002      	b.n	800373e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800373e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d104      	bne.n	8003750 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003750:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003768:	f107 030e 	add.w	r3, r7, #14
 800376c:	4619      	mov	r1, r3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff fbd2 	bl	8002f18 <VL53L0X_GetDeviceMode>
 8003774:	4603      	mov	r3, r0
 8003776:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 8003778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d107      	bne.n	8003790 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003780:	7bbb      	ldrb	r3, [r7, #14]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d104      	bne.n	8003790 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f924 	bl	80039d4 <VL53L0X_StartMeasurement>
 800378c:	4603      	mov	r3, r0
 800378e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f001 fbcb 	bl	8004f34 <VL53L0X_measurement_poll_for_completion>
 800379e:	4603      	mov	r3, r0
 80037a0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80037a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80037aa:	7bbb      	ldrb	r3, [r7, #14]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d103      	bne.n	80037b8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2203      	movs	r2, #3
 80037b4:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 80037b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80037d4:	2301      	movs	r3, #1
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f001 fb6d 	bl	8004eba <VL53L0X_perform_ref_calibration>
 80037e0:	4603      	mov	r3, r0
 80037e2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80037e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003806:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 8003808:	7dbb      	ldrb	r3, [r7, #22]
 800380a:	2b03      	cmp	r3, #3
 800380c:	f000 8093 	beq.w	8003936 <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 8003810:	2b03      	cmp	r3, #3
 8003812:	f300 80d6 	bgt.w	80039c2 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 8003816:	2b01      	cmp	r3, #1
 8003818:	d002      	beq.n	8003820 <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 800381a:	2b02      	cmp	r3, #2
 800381c:	d047      	beq.n	80038ae <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 800381e:	e0d0      	b.n	80039c2 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	f107 0210 	add.w	r2, r7, #16
 8003828:	2101      	movs	r1, #1
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fc4c 	bl	80040c8 <VL53L0X_GetInterruptThresholds>
 8003830:	4603      	mov	r3, r0
 8003832:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800383a:	f240 80bd 	bls.w	80039b8 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 800383e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 80b8 	bne.w	80039b8 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d006      	beq.n	800385c <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 800384e:	4960      	ldr	r1, [pc, #384]	; (80039d0 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f002 ffd7 	bl	8006804 <VL53L0X_load_tuning_settings>
 8003856:	4603      	mov	r3, r0
 8003858:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800385a:	e0ad      	b.n	80039b8 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800385c:	2204      	movs	r2, #4
 800385e:	21ff      	movs	r1, #255	; 0xff
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f003 fea1 	bl	80075a8 <VL53L0X_WrByte>
 8003866:	4603      	mov	r3, r0
 8003868:	461a      	mov	r2, r3
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	4313      	orrs	r3, r2
 800386e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003870:	2200      	movs	r2, #0
 8003872:	2170      	movs	r1, #112	; 0x70
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f003 fe97 	bl	80075a8 <VL53L0X_WrByte>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	4313      	orrs	r3, r2
 8003882:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003884:	2200      	movs	r2, #0
 8003886:	21ff      	movs	r1, #255	; 0xff
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f003 fe8d 	bl	80075a8 <VL53L0X_WrByte>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	4313      	orrs	r3, r2
 8003896:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003898:	2200      	movs	r2, #0
 800389a:	2180      	movs	r1, #128	; 0x80
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f003 fe83 	bl	80075a8 <VL53L0X_WrByte>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	75fb      	strb	r3, [r7, #23]
		break;
 80038ac:	e084      	b.n	80039b8 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80038ae:	f107 030c 	add.w	r3, r7, #12
 80038b2:	f107 0210 	add.w	r2, r7, #16
 80038b6:	2101      	movs	r1, #1
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fc05 	bl	80040c8 <VL53L0X_GetInterruptThresholds>
 80038be:	4603      	mov	r3, r0
 80038c0:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d079      	beq.n	80039bc <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 80038c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d175      	bne.n	80039bc <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 80038d6:	493e      	ldr	r1, [pc, #248]	; (80039d0 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f002 ff93 	bl	8006804 <VL53L0X_load_tuning_settings>
 80038de:	4603      	mov	r3, r0
 80038e0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80038e2:	e06b      	b.n	80039bc <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80038e4:	2204      	movs	r2, #4
 80038e6:	21ff      	movs	r1, #255	; 0xff
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f003 fe5d 	bl	80075a8 <VL53L0X_WrByte>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80038f8:	2200      	movs	r2, #0
 80038fa:	2170      	movs	r1, #112	; 0x70
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f003 fe53 	bl	80075a8 <VL53L0X_WrByte>
 8003902:	4603      	mov	r3, r0
 8003904:	461a      	mov	r2, r3
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	4313      	orrs	r3, r2
 800390a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800390c:	2200      	movs	r2, #0
 800390e:	21ff      	movs	r1, #255	; 0xff
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f003 fe49 	bl	80075a8 <VL53L0X_WrByte>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	4313      	orrs	r3, r2
 800391e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003920:	2200      	movs	r2, #0
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f003 fe3f 	bl	80075a8 <VL53L0X_WrByte>
 800392a:	4603      	mov	r3, r0
 800392c:	461a      	mov	r2, r3
 800392e:	7dfb      	ldrb	r3, [r7, #23]
 8003930:	4313      	orrs	r3, r2
 8003932:	75fb      	strb	r3, [r7, #23]
		break;
 8003934:	e042      	b.n	80039bc <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003936:	f107 030c 	add.w	r3, r7, #12
 800393a:	f107 0210 	add.w	r2, r7, #16
 800393e:	2101      	movs	r1, #1
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fbc1 	bl	80040c8 <VL53L0X_GetInterruptThresholds>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 800394a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d136      	bne.n	80039c0 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d006      	beq.n	8003966 <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003958:	491d      	ldr	r1, [pc, #116]	; (80039d0 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f002 ff52 	bl	8006804 <VL53L0X_load_tuning_settings>
 8003960:	4603      	mov	r3, r0
 8003962:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8003964:	e02c      	b.n	80039c0 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003966:	2204      	movs	r2, #4
 8003968:	21ff      	movs	r1, #255	; 0xff
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f003 fe1c 	bl	80075a8 <VL53L0X_WrByte>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	4313      	orrs	r3, r2
 8003978:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800397a:	2200      	movs	r2, #0
 800397c:	2170      	movs	r1, #112	; 0x70
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f003 fe12 	bl	80075a8 <VL53L0X_WrByte>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	7dfb      	ldrb	r3, [r7, #23]
 800398a:	4313      	orrs	r3, r2
 800398c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800398e:	2200      	movs	r2, #0
 8003990:	21ff      	movs	r1, #255	; 0xff
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f003 fe08 	bl	80075a8 <VL53L0X_WrByte>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	4313      	orrs	r3, r2
 80039a0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f003 fdfe 	bl	80075a8 <VL53L0X_WrByte>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461a      	mov	r2, r3
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	75fb      	strb	r3, [r7, #23]
		break;
 80039b6:	e003      	b.n	80039c0 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 80039b8:	bf00      	nop
 80039ba:	e002      	b.n	80039c2 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 80039c0:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000014 	.word	0x20000014

080039d4 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039dc:	2300      	movs	r3, #0
 80039de:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80039e4:	f107 030e 	add.w	r3, r7, #14
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fa94 	bl	8002f18 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80039f0:	2201      	movs	r2, #1
 80039f2:	2180      	movs	r1, #128	; 0x80
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f003 fdd7 	bl	80075a8 <VL53L0X_WrByte>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80039fe:	2201      	movs	r2, #1
 8003a00:	21ff      	movs	r1, #255	; 0xff
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f003 fdd0 	bl	80075a8 <VL53L0X_WrByte>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2100      	movs	r1, #0
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f003 fdc9 	bl	80075a8 <VL53L0X_WrByte>
 8003a16:	4603      	mov	r3, r0
 8003a18:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8003a20:	461a      	mov	r2, r3
 8003a22:	2191      	movs	r1, #145	; 0x91
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f003 fdbf 	bl	80075a8 <VL53L0X_WrByte>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2100      	movs	r1, #0
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f003 fdb8 	bl	80075a8 <VL53L0X_WrByte>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	21ff      	movs	r1, #255	; 0xff
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f003 fdb1 	bl	80075a8 <VL53L0X_WrByte>
 8003a46:	4603      	mov	r3, r0
 8003a48:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f003 fdaa 	bl	80075a8 <VL53L0X_WrByte>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003a58:	7bbb      	ldrb	r3, [r7, #14]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d054      	beq.n	8003b08 <VL53L0X_StartMeasurement+0x134>
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	dc6c      	bgt.n	8003b3c <VL53L0X_StartMeasurement+0x168>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <VL53L0X_StartMeasurement+0x98>
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d034      	beq.n	8003ad4 <VL53L0X_StartMeasurement+0x100>
 8003a6a:	e067      	b.n	8003b3c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2100      	movs	r1, #0
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f003 fd99 	bl	80075a8 <VL53L0X_WrByte>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d15d      	bne.n	8003b42 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8003a90:	f107 030d 	add.w	r3, r7, #13
 8003a94:	461a      	mov	r2, r3
 8003a96:	2100      	movs	r1, #0
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f003 fe07 	bl	80076ac <VL53L0X_RdByte>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003aa8:	7b7a      	ldrb	r2, [r7, #13]
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	4013      	ands	r3, r2
 8003aae:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d107      	bne.n	8003ac6 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8003ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ac4:	d3e1      	bcc.n	8003a8a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003acc:	d339      	bcc.n	8003b42 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003ace:	23f9      	movs	r3, #249	; 0xf9
 8003ad0:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8003ad2:	e036      	b.n	8003b42 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003ad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003adc:	2101      	movs	r1, #1
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fe86 	bl	80037f0 <VL53L0X_CheckAndLoadInterruptSettings>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003ae8:	2202      	movs	r2, #2
 8003aea:	2100      	movs	r1, #0
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f003 fd5b 	bl	80075a8 <VL53L0X_WrByte>
 8003af2:	4603      	mov	r3, r0
 8003af4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d123      	bne.n	8003b46 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2204      	movs	r2, #4
 8003b02:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8003b06:	e01e      	b.n	8003b46 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d105      	bne.n	8003b1c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003b10:	2101      	movs	r1, #1
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff fe6c 	bl	80037f0 <VL53L0X_CheckAndLoadInterruptSettings>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	2100      	movs	r1, #0
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f003 fd41 	bl	80075a8 <VL53L0X_WrByte>
 8003b26:	4603      	mov	r3, r0
 8003b28:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8003b3a:	e006      	b.n	8003b4a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003b3c:	23f8      	movs	r3, #248	; 0xf8
 8003b3e:	75fb      	strb	r3, [r7, #23]
 8003b40:	e004      	b.n	8003b4c <VL53L0X_StartMeasurement+0x178>
		break;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <VL53L0X_StartMeasurement+0x178>
		break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <VL53L0X_StartMeasurement+0x178>
		break;
 8003b4a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003b6c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003b6e:	7bbb      	ldrb	r3, [r7, #14]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d112      	bne.n	8003b9a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003b74:	f107 0308 	add.w	r3, r7, #8
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fb1a 	bl	80041b4 <VL53L0X_GetInterruptMaskStatus>
 8003b80:	4603      	mov	r3, r0
 8003b82:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d103      	bne.n	8003b92 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e01c      	b.n	8003bcc <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e018      	b.n	8003bcc <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003b9a:	f107 030d 	add.w	r3, r7, #13
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2114      	movs	r1, #20
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f003 fd82 	bl	80076ac <VL53L0X_RdByte>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003bb4:	7b7b      	ldrb	r3, [r7, #13]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	e002      	b.n	8003bcc <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	b096      	sub	sp, #88	; 0x58
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003be8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bec:	230c      	movs	r3, #12
 8003bee:	2114      	movs	r1, #20
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f003 fcad 	bl	8007550 <VL53L0X_ReadMulti>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003bfc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f040 80d1 	bne.w	8003da8 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 8003c12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003c2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	025b      	lsls	r3, r3, #9
 8003c44:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c4a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8003c4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003c62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c66:	025b      	lsls	r3, r3, #9
 8003c68:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003c6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003c8a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003c8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8003c9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8003ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003ca6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cac:	d046      	beq.n	8003d3c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003cae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003cb0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003cbc:	4a57      	ldr	r2, [pc, #348]	; (8003e1c <VL53L0X_GetRangingMeasurementData+0x244>)
 8003cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8003cc2:	1192      	asrs	r2, r2, #6
 8003cc4:	17db      	asrs	r3, r3, #31
 8003cc6:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8003cc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	7d1b      	ldrb	r3, [r3, #20]
 8003cd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8003cda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d02c      	beq.n	8003d3c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8003ce2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ce4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	121a      	asrs	r2, r3, #8
					<= 0) {
 8003cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d10d      	bne.n	8003d10 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8003cf4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8003cfc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8003d00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003d04:	e016      	b.n	8003d34 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8003d06:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8003d0a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003d0e:	e011      	b.n	8003d34 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8003d10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003d14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d16:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8003d1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d1c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003d24:	121b      	asrs	r3, r3, #8
 8003d26:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8003d30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003d34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8003d3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00d      	beq.n	8003d60 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003d44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003d48:	089b      	lsrs	r3, r3, #2
 8003d4a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8003d50:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	019b      	lsls	r3, r3, #6
 8003d58:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	75da      	strb	r2, [r3, #23]
 8003d5e:	e006      	b.n	8003d6e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003d66:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003d6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003d72:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003d76:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f003 f98f 	bl	80070a8 <VL53L0X_get_pal_range_status>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8003d98:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003da0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003da8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d12f      	bne.n	8003e10 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f107 040c 	add.w	r4, r7, #12
 8003db6:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8003dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8003dca:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8003dd8:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8003dde:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8003de4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8003dea:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8003df0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8003df6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8003e00:	f107 050c 	add.w	r5, r7, #12
 8003e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e10:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3750      	adds	r7, #80	; 0x50
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e1c:	10624dd3 	.word	0x10624dd3

08003e20 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003e2e:	2100      	movs	r1, #0
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff f845 	bl	8002ec0 <VL53L0X_SetDeviceMode>
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d104      	bne.n	8003e4c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fc8a 	bl	800375c <VL53L0X_PerformSingleMeasurement>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003e54:	6839      	ldr	r1, [r7, #0]
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff febe 	bl	8003bd8 <VL53L0X_GetRangingMeasurementData>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d105      	bne.n	8003e74 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003e68:	2100      	movs	r1, #0
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f962 	bl	8004134 <VL53L0X_ClearInterruptMask>
 8003e70:	4603      	mov	r3, r0
 8003e72:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8003e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	4608      	mov	r0, r1
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	70fb      	strb	r3, [r7, #3]
 8003e92:	460b      	mov	r3, r1
 8003e94:	70bb      	strb	r3, [r7, #2]
 8003e96:	4613      	mov	r3, r2
 8003e98:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8003ea4:	23f6      	movs	r3, #246	; 0xf6
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	e107      	b.n	80040ba <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8003eaa:	78bb      	ldrb	r3, [r7, #2]
 8003eac:	2b14      	cmp	r3, #20
 8003eae:	d110      	bne.n	8003ed2 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003eb0:	7e3b      	ldrb	r3, [r7, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	73bb      	strb	r3, [r7, #14]
 8003eba:	e001      	b.n	8003ec0 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8003ec0:	7bbb      	ldrb	r3, [r7, #14]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2184      	movs	r1, #132	; 0x84
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f003 fb6e 	bl	80075a8 <VL53L0X_WrByte>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	73fb      	strb	r3, [r7, #15]
 8003ed0:	e0f3      	b.n	80040ba <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8003ed2:	78bb      	ldrb	r3, [r7, #2]
 8003ed4:	2b15      	cmp	r3, #21
 8003ed6:	f040 8097 	bne.w	8004008 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003eda:	2201      	movs	r2, #1
 8003edc:	21ff      	movs	r1, #255	; 0xff
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f003 fb62 	bl	80075a8 <VL53L0X_WrByte>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f003 fb58 	bl	80075a8 <VL53L0X_WrByte>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003f02:	2200      	movs	r2, #0
 8003f04:	21ff      	movs	r1, #255	; 0xff
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f003 fb4e 	bl	80075a8 <VL53L0X_WrByte>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003f16:	2201      	movs	r2, #1
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f003 fb44 	bl	80075a8 <VL53L0X_WrByte>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	2185      	movs	r1, #133	; 0x85
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f003 fb3a 	bl	80075a8 <VL53L0X_WrByte>
 8003f34:	4603      	mov	r3, r0
 8003f36:	461a      	mov	r2, r3
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8003f3e:	2204      	movs	r2, #4
 8003f40:	21ff      	movs	r1, #255	; 0xff
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f003 fb30 	bl	80075a8 <VL53L0X_WrByte>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8003f52:	2200      	movs	r2, #0
 8003f54:	21cd      	movs	r1, #205	; 0xcd
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f003 fb26 	bl	80075a8 <VL53L0X_WrByte>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8003f66:	2211      	movs	r2, #17
 8003f68:	21cc      	movs	r1, #204	; 0xcc
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f003 fb1c 	bl	80075a8 <VL53L0X_WrByte>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	21ff      	movs	r1, #255	; 0xff
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f003 fb12 	bl	80075a8 <VL53L0X_WrByte>
 8003f84:	4603      	mov	r3, r0
 8003f86:	461a      	mov	r2, r3
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	21be      	movs	r1, #190	; 0xbe
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f003 fb08 	bl	80075a8 <VL53L0X_WrByte>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8003fa2:	2206      	movs	r2, #6
 8003fa4:	21ff      	movs	r1, #255	; 0xff
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f003 fafe 	bl	80075a8 <VL53L0X_WrByte>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8003fb6:	2209      	movs	r2, #9
 8003fb8:	21cc      	movs	r1, #204	; 0xcc
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f003 faf4 	bl	80075a8 <VL53L0X_WrByte>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	21ff      	movs	r1, #255	; 0xff
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f003 faea 	bl	80075a8 <VL53L0X_WrByte>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003fde:	2201      	movs	r2, #1
 8003fe0:	21ff      	movs	r1, #255	; 0xff
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f003 fae0 	bl	80075a8 <VL53L0X_WrByte>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f003 fad6 	bl	80075a8 <VL53L0X_WrByte>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	4313      	orrs	r3, r2
 8004004:	73fb      	strb	r3, [r7, #15]
 8004006:	e058      	b.n	80040ba <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d121      	bne.n	8004054 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8004010:	787b      	ldrb	r3, [r7, #1]
 8004012:	2b04      	cmp	r3, #4
 8004014:	d81b      	bhi.n	800404e <VL53L0X_SetGpioConfig+0x1ce>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <VL53L0X_SetGpioConfig+0x19c>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	08004031 	.word	0x08004031
 8004020:	08004037 	.word	0x08004037
 8004024:	0800403d 	.word	0x0800403d
 8004028:	08004043 	.word	0x08004043
 800402c:	08004049 	.word	0x08004049
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004030:	2300      	movs	r3, #0
 8004032:	73bb      	strb	r3, [r7, #14]
				break;
 8004034:	e00f      	b.n	8004056 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004036:	2301      	movs	r3, #1
 8004038:	73bb      	strb	r3, [r7, #14]
				break;
 800403a:	e00c      	b.n	8004056 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800403c:	2302      	movs	r3, #2
 800403e:	73bb      	strb	r3, [r7, #14]
				break;
 8004040:	e009      	b.n	8004056 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004042:	2303      	movs	r3, #3
 8004044:	73bb      	strb	r3, [r7, #14]
				break;
 8004046:	e006      	b.n	8004056 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004048:	2304      	movs	r3, #4
 800404a:	73bb      	strb	r3, [r7, #14]
				break;
 800404c:	e003      	b.n	8004056 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800404e:	23f5      	movs	r3, #245	; 0xf5
 8004050:	73fb      	strb	r3, [r7, #15]
 8004052:	e000      	b.n	8004056 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8004054:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8004056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800405e:	7bbb      	ldrb	r3, [r7, #14]
 8004060:	461a      	mov	r2, r3
 8004062:	210a      	movs	r1, #10
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f003 fa9f 	bl	80075a8 <VL53L0X_WrByte>
 800406a:	4603      	mov	r3, r0
 800406c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800406e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10f      	bne.n	8004096 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004076:	7e3b      	ldrb	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	73bb      	strb	r3, [r7, #14]
 8004080:	e001      	b.n	8004086 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8004082:	2310      	movs	r3, #16
 8004084:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004086:	7bbb      	ldrb	r3, [r7, #14]
 8004088:	22ef      	movs	r2, #239	; 0xef
 800408a:	2184      	movs	r1, #132	; 0x84
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f003 fad9 	bl	8007644 <VL53L0X_UpdateByte>
 8004092:	4603      	mov	r3, r0
 8004094:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	787a      	ldrb	r2, [r7, #1]
 80040a2:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80040a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80040ae:	2100      	movs	r1, #0
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f83f 	bl	8004134 <VL53L0X_ClearInterruptMask>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80040ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop

080040c8 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	607a      	str	r2, [r7, #4]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	460b      	mov	r3, r1
 80040d6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	461a      	mov	r2, r3
 80040e2:	210e      	movs	r1, #14
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f003 fb0b 	bl	8007700 <VL53L0X_RdWord>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80040ee:	8abb      	ldrh	r3, [r7, #20]
 80040f0:	045b      	lsls	r3, r3, #17
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <VL53L0X_GetInterruptThresholds+0x68>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80040fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10f      	bne.n	8004124 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	461a      	mov	r2, r3
 800410a:	210c      	movs	r1, #12
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f003 faf7 	bl	8007700 <VL53L0X_RdWord>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004116:	8abb      	ldrh	r3, [r7, #20]
 8004118:	045b      	lsls	r3, r3, #17
 800411a:	461a      	mov	r2, r3
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <VL53L0X_GetInterruptThresholds+0x68>)
 800411e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004124:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	1ffe0000 	.word	0x1ffe0000

08004134 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800413e:	2300      	movs	r3, #0
 8004140:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004146:	2201      	movs	r2, #1
 8004148:	210b      	movs	r1, #11
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f003 fa2c 	bl	80075a8 <VL53L0X_WrByte>
 8004150:	4603      	mov	r3, r0
 8004152:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004154:	2200      	movs	r2, #0
 8004156:	210b      	movs	r1, #11
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f003 fa25 	bl	80075a8 <VL53L0X_WrByte>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	4313      	orrs	r3, r2
 8004166:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004168:	f107 030d 	add.w	r3, r7, #13
 800416c:	461a      	mov	r2, r3
 800416e:	2113      	movs	r1, #19
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f003 fa9b 	bl	80076ac <VL53L0X_RdByte>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	4313      	orrs	r3, r2
 800417e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004180:	7bbb      	ldrb	r3, [r7, #14]
 8004182:	3301      	adds	r3, #1
 8004184:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004186:	7b7b      	ldrb	r3, [r7, #13]
 8004188:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800418c:	2b00      	cmp	r3, #0
 800418e:	d006      	beq.n	800419e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004190:	7bbb      	ldrb	r3, [r7, #14]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d803      	bhi.n	800419e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0d3      	beq.n	8004146 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800419e:	7bbb      	ldrb	r3, [r7, #14]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80041a4:	23f4      	movs	r3, #244	; 0xf4
 80041a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80041a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 80041c2:	f107 030e 	add.w	r3, r7, #14
 80041c6:	461a      	mov	r2, r3
 80041c8:	2113      	movs	r1, #19
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f003 fa6e 	bl	80076ac <VL53L0X_RdByte>
 80041d0:	4603      	mov	r3, r0
 80041d2:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 80041d4:	7bbb      	ldrb	r3, [r7, #14]
 80041d6:	f003 0207 	and.w	r2, r3, #7
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80041de:	7bbb      	ldrb	r3, [r7, #14]
 80041e0:	f003 0318 	and.w	r3, r3, #24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80041e8:	23fa      	movs	r3, #250	; 0xfa
 80041ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80041ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004204:	2300      	movs	r3, #0
 8004206:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fa03 	bl	8004618 <VL53L0X_perform_ref_spad_management>
 8004212:	4603      	mov	r3, r0
 8004214:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004230:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004234:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800423a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800423c:	f107 0308 	add.w	r3, r7, #8
 8004240:	461a      	mov	r2, r3
 8004242:	2128      	movs	r1, #40	; 0x28
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f003 fa5b 	bl	8007700 <VL53L0X_RdWord>
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800424e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11e      	bne.n	8004294 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004256:	893b      	ldrh	r3, [r7, #8]
 8004258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425c:	b29b      	uxth	r3, r3
 800425e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004260:	893b      	ldrh	r3, [r7, #8]
 8004262:	461a      	mov	r2, r3
 8004264:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004268:	429a      	cmp	r2, r3
 800426a:	dd0b      	ble.n	8004284 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800426c:	893a      	ldrh	r2, [r7, #8]
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	b29b      	uxth	r3, r3
 8004274:	b21b      	sxth	r3, r3
 8004276:	461a      	mov	r2, r3
					* 250;
 8004278:	23fa      	movs	r3, #250	; 0xfa
 800427a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e007      	b.n	8004294 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004284:	893b      	ldrh	r3, [r7, #8]
 8004286:	b21b      	sxth	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	23fa      	movs	r3, #250	; 0xfa
 800428c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004294:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b08b      	sub	sp, #44	; 0x2c
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80042ae:	2308      	movs	r3, #8
 80042b0:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042bc:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80042d0:	69b9      	ldr	r1, [r7, #24]
 80042d2:	fb01 f202 	mul.w	r2, r1, r2
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
 80042de:	e030      	b.n	8004342 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	4413      	add	r3, r2
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80042ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d11e      	bne.n	8004334 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 80042f6:	7ffa      	ldrb	r2, [r7, #31]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	fa42 f303 	asr.w	r3, r2, r3
 80042fe:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004304:	e016      	b.n	8004334 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8004306:	7ffb      	ldrb	r3, [r7, #31]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <get_next_good_spad+0x88>
				success = 1;
 8004310:	2301      	movs	r3, #1
 8004312:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	fb03 f202 	mul.w	r2, r3, r2
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	4413      	add	r3, r2
 8004320:	461a      	mov	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	601a      	str	r2, [r3, #0]
				break;
 8004326:	e009      	b.n	800433c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004328:	7ffb      	ldrb	r3, [r7, #31]
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	3301      	adds	r3, #1
 8004332:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	429a      	cmp	r2, r3
 800433a:	d3e4      	bcc.n	8004306 <get_next_good_spad+0x66>
				coarseIndex++) {
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	3301      	adds	r3, #1
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	d202      	bcs.n	8004350 <get_next_good_spad+0xb0>
 800434a:	7fbb      	ldrb	r3, [r7, #30]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0c7      	beq.n	80042e0 <get_next_good_spad+0x40>
		}
	}
}
 8004350:	bf00      	nop
 8004352:	372c      	adds	r7, #44	; 0x2c
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	099b      	lsrs	r3, r3, #6
 800436c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800436e:	4a07      	ldr	r2, [pc, #28]	; (800438c <is_aperture+0x30>)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <is_aperture+0x22>
		isAperture = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800437e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	200002c0 	.word	0x200002c0

08004390 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8004390:	b480      	push	{r7}
 8004392:	b089      	sub	sp, #36	; 0x24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800439c:	2300      	movs	r3, #0
 800439e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80043a0:	2308      	movs	r3, #8
 80043a2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80043b6:	69b9      	ldr	r1, [r7, #24]
 80043b8:	fb01 f202 	mul.w	r2, r1, r2
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80043c8:	23ce      	movs	r3, #206	; 0xce
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e010      	b.n	80043f0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4413      	add	r3, r2
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b25a      	sxtb	r2, r3
 80043d8:	2101      	movs	r1, #1
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	b25b      	sxtb	r3, r3
 80043e2:	4313      	orrs	r3, r2
 80043e4:	b259      	sxtb	r1, r3
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	4413      	add	r3, r2
 80043ec:	b2ca      	uxtb	r2, r1
 80043ee:	701a      	strb	r2, [r3, #0]

	return status;
 80043f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3724      	adds	r7, #36	; 0x24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800440a:	2306      	movs	r3, #6
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	21b0      	movs	r1, #176	; 0xb0
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f003 f86d 	bl	80074f0 <VL53L0X_WriteMulti>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800441a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8004430:	2306      	movs	r3, #6
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	21b0      	movs	r1, #176	; 0xb0
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f003 f88a 	bl	8007550 <VL53L0X_ReadMulti>
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8004440:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08c      	sub	sp, #48	; 0x30
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	460b      	mov	r3, r1
 800445a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800445c:	2300      	movs	r3, #0
 800445e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8004462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004464:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8004466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004468:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800446a:	2300      	movs	r3, #0
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
 800446e:	e02b      	b.n	80044c8 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8004470:	f107 031c 	add.w	r3, r7, #28
 8004474:	6a3a      	ldr	r2, [r7, #32]
 8004476:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff11 	bl	80042a0 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004484:	d103      	bne.n	800448e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004486:	23ce      	movs	r3, #206	; 0xce
 8004488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800448c:	e020      	b.n	80044d0 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	461a      	mov	r2, r3
 8004492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004494:	4413      	add	r3, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff ff60 	bl	800435c <is_aperture>
 800449c:	4603      	mov	r3, r0
 800449e:	461a      	mov	r2, r3
 80044a0:	7afb      	ldrb	r3, [r7, #11]
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80044a6:	23ce      	movs	r3, #206	; 0xce
 80044a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80044ac:	e010      	b.n	80044d0 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80044b2:	6a3a      	ldr	r2, [r7, #32]
 80044b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044b6:	6838      	ldr	r0, [r7, #0]
 80044b8:	f7ff ff6a 	bl	8004390 <enable_spad_bit>
		currentSpad++;
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	3301      	adds	r3, #1
 80044c0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	3301      	adds	r3, #1
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d3cf      	bcc.n	8004470 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80044d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80044d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff ff8d 	bl	8004400 <set_ref_spad_map>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80044ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d121      	bne.n	8004538 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80044f4:	f107 0314 	add.w	r3, r7, #20
 80044f8:	4619      	mov	r1, r3
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff ff93 	bl	8004426 <get_ref_spad_map>
 8004500:	4603      	mov	r3, r0
 8004502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800450a:	e011      	b.n	8004530 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	4413      	add	r3, r2
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	f107 0114 	add.w	r1, r7, #20
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	440b      	add	r3, r1
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d003      	beq.n	800452a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004522:	23ce      	movs	r3, #206	; 0xce
 8004524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8004528:	e006      	b.n	8004538 <enable_ref_spads+0xec>
			}
			i++;
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	3301      	adds	r3, #1
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004534:	429a      	cmp	r2, r3
 8004536:	d3e9      	bcc.n	800450c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8004538:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800453c:	4618      	mov	r0, r3
 800453e:	3730      	adds	r7, #48	; 0x30
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8004560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8004564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800456c:	22c0      	movs	r2, #192	; 0xc0
 800456e:	2101      	movs	r1, #1
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f003 f819 	bl	80075a8 <VL53L0X_WrByte>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800457c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004580:	2b00      	cmp	r3, #0
 8004582:	d108      	bne.n	8004596 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff fc48 	bl	8003e20 <VL53L0X_PerformSingleRangingMeasurement>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8004596:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800459a:	2b00      	cmp	r3, #0
 800459c:	d107      	bne.n	80045ae <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800459e:	2201      	movs	r2, #1
 80045a0:	21ff      	movs	r1, #255	; 0xff
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f003 f800 	bl	80075a8 <VL53L0X_WrByte>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80045ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d107      	bne.n	80045c6 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	21b6      	movs	r1, #182	; 0xb6
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f003 f8a0 	bl	8007700 <VL53L0X_RdWord>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80045c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d107      	bne.n	80045de <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80045ce:	2200      	movs	r2, #0
 80045d0:	21ff      	movs	r1, #255	; 0xff
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f002 ffe8 	bl	80075a8 <VL53L0X_WrByte>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80045de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d112      	bne.n	800460c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80045e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045ea:	461a      	mov	r2, r3
 80045ec:	2101      	movs	r1, #1
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f002 ffda 	bl	80075a8 <VL53L0X_WrByte>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80045fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d104      	bne.n	800460c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004608:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 800460c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004610:	4618      	mov	r0, r3
 8004612:	3728      	adds	r7, #40	; 0x28
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8004618:	b590      	push	{r4, r7, lr}
 800461a:	b09d      	sub	sp, #116	; 0x74
 800461c:	af06      	add	r7, sp, #24
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004624:	2300      	movs	r3, #0
 8004626:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800462a:	23b4      	movs	r3, #180	; 0xb4
 800462c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8004630:	2303      	movs	r3, #3
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8004634:	232c      	movs	r3, #44	; 0x2c
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8004644:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004648:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8004652:	2306      	movs	r3, #6
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 800467c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800467e:	2300      	movs	r3, #0
 8004680:	64bb      	str	r3, [r7, #72]	; 0x48
 8004682:	e009      	b.n	8004698 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004688:	4413      	add	r3, r2
 800468a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004694:	3301      	adds	r3, #1
 8004696:	64bb      	str	r3, [r7, #72]	; 0x48
 8004698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	429a      	cmp	r2, r3
 800469e:	d3f1      	bcc.n	8004684 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80046a0:	2201      	movs	r2, #1
 80046a2:	21ff      	movs	r1, #255	; 0xff
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f002 ff7f 	bl	80075a8 <VL53L0X_WrByte>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80046b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d107      	bne.n	80046c8 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80046b8:	2200      	movs	r2, #0
 80046ba:	214f      	movs	r1, #79	; 0x4f
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f002 ff73 	bl	80075a8 <VL53L0X_WrByte>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80046c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d107      	bne.n	80046e0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80046d0:	222c      	movs	r2, #44	; 0x2c
 80046d2:	214e      	movs	r1, #78	; 0x4e
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f002 ff67 	bl	80075a8 <VL53L0X_WrByte>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80046e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d107      	bne.n	80046f8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80046e8:	2200      	movs	r2, #0
 80046ea:	21ff      	movs	r1, #255	; 0xff
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f002 ff5b 	bl	80075a8 <VL53L0X_WrByte>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80046f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004700:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004704:	461a      	mov	r2, r3
 8004706:	21b6      	movs	r1, #182	; 0xb6
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f002 ff4d 	bl	80075a8 <VL53L0X_WrByte>
 800470e:	4603      	mov	r3, r0
 8004710:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8004714:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800471c:	2200      	movs	r2, #0
 800471e:	2180      	movs	r1, #128	; 0x80
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f002 ff41 	bl	80075a8 <VL53L0X_WrByte>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800472c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8004734:	f107 0210 	add.w	r2, r7, #16
 8004738:	f107 0111 	add.w	r1, r7, #17
 800473c:	2300      	movs	r3, #0
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fbbb 	bl	8004eba <VL53L0X_perform_ref_calibration>
 8004744:	4603      	mov	r3, r0
 8004746:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800474a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800474e:	2b00      	cmp	r3, #0
 8004750:	d121      	bne.n	8004796 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8004756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004758:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800475e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004760:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 800476e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004772:	f107 0218 	add.w	r2, r7, #24
 8004776:	9204      	str	r2, [sp, #16]
 8004778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800477a:	9203      	str	r2, [sp, #12]
 800477c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800477e:	9202      	str	r2, [sp, #8]
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	4623      	mov	r3, r4
 8004788:	4602      	mov	r2, r0
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff fe5e 	bl	800444c <enable_ref_spads>
 8004790:	4603      	mov	r3, r0
 8004792:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004796:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800479a:	2b00      	cmp	r3, #0
 800479c:	d174      	bne.n	8004888 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80047a2:	f107 0312 	add.w	r3, r7, #18
 80047a6:	4619      	mov	r1, r3
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7ff fecb 	bl	8004544 <perform_ref_signal_measurement>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80047b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d161      	bne.n	8004880 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80047bc:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80047be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d25d      	bcs.n	8004880 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c8:	e009      	b.n	80047de <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80047d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047da:	3301      	adds	r3, #1
 80047dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80047de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d3f1      	bcc.n	80047ca <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80047e6:	e002      	b.n	80047ee <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80047e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ea:	3301      	adds	r3, #1
 80047ec:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80047ee:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80047f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f4:	4413      	add	r3, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fdb0 	bl	800435c <is_aperture>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d103      	bne.n	800480a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8004802:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	429a      	cmp	r2, r3
 8004808:	d3ee      	bcc.n	80047e8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800480e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004810:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 800481e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004822:	f107 0218 	add.w	r2, r7, #24
 8004826:	9204      	str	r2, [sp, #16]
 8004828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800482a:	9203      	str	r2, [sp, #12]
 800482c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800482e:	9202      	str	r2, [sp, #8]
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	4623      	mov	r3, r4
 8004838:	4602      	mov	r2, r0
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff fe06 	bl	800444c <enable_ref_spads>
 8004840:	4603      	mov	r3, r0
 8004842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004846:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800484a:	2b00      	cmp	r3, #0
 800484c:	d11b      	bne.n	8004886 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8004852:	f107 0312 	add.w	r3, r7, #18
 8004856:	4619      	mov	r1, r3
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff fe73 	bl	8004544 <perform_ref_signal_measurement>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004864:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10c      	bne.n	8004886 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800486c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800486e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004870:	429a      	cmp	r2, r3
 8004872:	d208      	bcs.n	8004886 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800487e:	e002      	b.n	8004886 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004884:	e000      	b.n	8004888 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004886:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004888:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800488c:	2b00      	cmp	r3, #0
 800488e:	f040 80af 	bne.w	80049f0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8004892:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004894:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004896:	429a      	cmp	r2, r3
 8004898:	f240 80aa 	bls.w	80049f0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800489c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80048a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 80048ac:	f107 031c 	add.w	r3, r7, #28
 80048b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048b2:	4618      	mov	r0, r3
 80048b4:	f002 ffcc 	bl	8007850 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80048b8:	8a7b      	ldrh	r3, [r7, #18]
 80048ba:	461a      	mov	r2, r3
 80048bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bfb8      	it	lt
 80048c4:	425b      	neglt	r3, r3
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80048ce:	e086      	b.n	80049de <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 80048d6:	f107 0314 	add.w	r3, r7, #20
 80048da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048de:	f7ff fcdf 	bl	80042a0 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e8:	d103      	bne.n	80048f2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80048ea:	23ce      	movs	r3, #206	; 0xce
 80048ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80048f0:	e07e      	b.n	80049f0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80048f2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4413      	add	r3, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fd2e 	bl	800435c <is_aperture>
 8004900:	4603      	mov	r3, r0
 8004902:	461a      	mov	r2, r3
 8004904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004906:	4293      	cmp	r3, r2
 8004908:	d003      	beq.n	8004912 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8004910:	e06e      	b.n	80049f0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8004912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004914:	3301      	adds	r3, #1
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 8004922:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fd32 	bl	8004390 <enable_spad_bit>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004932:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10c      	bne.n	8004954 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800493a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493c:	3301      	adds	r3, #1
 800493e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 8004946:	4619      	mov	r1, r3
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff fd59 	bl	8004400 <set_ref_spad_map>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004954:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004958:	2b00      	cmp	r3, #0
 800495a:	d146      	bne.n	80049ea <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800495c:	f107 0312 	add.w	r3, r7, #18
 8004960:	4619      	mov	r1, r3
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7ff fdee 	bl	8004544 <perform_ref_signal_measurement>
 8004968:	4603      	mov	r3, r0
 800496a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800496e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004972:	2b00      	cmp	r3, #0
 8004974:	d13b      	bne.n	80049ee <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004976:	8a7b      	ldrh	r3, [r7, #18]
 8004978:	461a      	mov	r2, r3
 800497a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	bfb8      	it	lt
 8004982:	425b      	neglt	r3, r3
 8004984:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004986:	8a7b      	ldrh	r3, [r7, #18]
 8004988:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800498a:	429a      	cmp	r2, r3
 800498c:	d21c      	bcs.n	80049c8 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800498e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004992:	429a      	cmp	r2, r3
 8004994:	d914      	bls.n	80049c0 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 8004996:	f107 031c 	add.w	r3, r7, #28
 800499a:	4619      	mov	r1, r3
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff fd2f 	bl	8004400 <set_ref_spad_map>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 80049ae:	f107 011c 	add.w	r1, r7, #28
 80049b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b4:	4618      	mov	r0, r3
 80049b6:	f002 ff4b 	bl	8007850 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80049ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049bc:	3b01      	subs	r3, #1
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c6:	e00a      	b.n	80049de <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 80049d2:	f107 031c 	add.w	r3, r7, #28
 80049d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049d8:	4618      	mov	r0, r3
 80049da:	f002 ff39 	bl	8007850 <memcpy>
		while (!complete) {
 80049de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f43f af74 	beq.w	80048d0 <VL53L0X_perform_ref_spad_management+0x2b8>
 80049e8:	e002      	b.n	80049f0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80049ea:	bf00      	nop
 80049ec:	e000      	b.n	80049f0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80049ee:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80049f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d115      	bne.n	8004a24 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049fc:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004a04:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004a24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	375c      	adds	r7, #92	; 0x5c
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}

08004a30 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b093      	sub	sp, #76	; 0x4c
 8004a34:	af06      	add	r7, sp, #24
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8004a48:	23b4      	movs	r3, #180	; 0xb4
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8004a4e:	2306      	movs	r3, #6
 8004a50:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004a52:	232c      	movs	r3, #44	; 0x2c
 8004a54:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004a56:	2201      	movs	r2, #1
 8004a58:	21ff      	movs	r1, #255	; 0xff
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f002 fda4 	bl	80075a8 <VL53L0X_WrByte>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004a66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004a6e:	2200      	movs	r2, #0
 8004a70:	214f      	movs	r1, #79	; 0x4f
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f002 fd98 	bl	80075a8 <VL53L0X_WrByte>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004a7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d107      	bne.n	8004a96 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004a86:	222c      	movs	r2, #44	; 0x2c
 8004a88:	214e      	movs	r1, #78	; 0x4e
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f002 fd8c 	bl	80075a8 <VL53L0X_WrByte>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004a96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d107      	bne.n	8004aae <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	21ff      	movs	r1, #255	; 0xff
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f002 fd80 	bl	80075a8 <VL53L0X_WrByte>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004aae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aba:	461a      	mov	r2, r3
 8004abc:	21b6      	movs	r1, #182	; 0xb6
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f002 fd72 	bl	80075a8 <VL53L0X_WrByte>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ace:	e009      	b.n	8004ae4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d3f1      	bcc.n	8004ad0 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d011      	beq.n	8004b16 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004af2:	e002      	b.n	8004afa <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	3301      	adds	r3, #1
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004afa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	4413      	add	r3, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fc2a 	bl	800435c <is_aperture>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <VL53L0X_set_reference_spads+0xe6>
 8004b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d3ee      	bcc.n	8004af4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 8004b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b26:	79f9      	ldrb	r1, [r7, #7]
 8004b28:	f107 0214 	add.w	r2, r7, #20
 8004b2c:	9204      	str	r2, [sp, #16]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	9203      	str	r2, [sp, #12]
 8004b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b34:	9202      	str	r2, [sp, #8]
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	4623      	mov	r3, r4
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff fc83 	bl	800444c <enable_ref_spads>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004b4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10c      	bne.n	8004b6e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	79fa      	ldrb	r2, [r7, #7]
 8004b6a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004b6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3734      	adds	r7, #52	; 0x34
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd90      	pop	{r4, r7, pc}

08004b7a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f002 fd02 	bl	80075a8 <VL53L0X_WrByte>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d104      	bne.n	8004bba <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f9bf 	bl	8004f34 <VL53L0X_measurement_poll_for_completion>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d105      	bne.n	8004bce <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fab5 	bl	8004134 <VL53L0X_ClearInterruptMask>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2100      	movs	r1, #0
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f002 fce4 	bl	80075a8 <VL53L0X_WrByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	70fb      	strb	r3, [r7, #3]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70bb      	strb	r3, [r7, #2]
 8004c06:	4613      	mov	r3, r2
 8004c08:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004c12:	2201      	movs	r2, #1
 8004c14:	21ff      	movs	r1, #255	; 0xff
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f002 fcc6 	bl	80075a8 <VL53L0X_WrByte>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004c26:	2200      	movs	r2, #0
 8004c28:	2100      	movs	r1, #0
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f002 fcbc 	bl	80075a8 <VL53L0X_WrByte>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	21ff      	movs	r1, #255	; 0xff
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f002 fcb2 	bl	80075a8 <VL53L0X_WrByte>
 8004c44:	4603      	mov	r3, r0
 8004c46:	461a      	mov	r2, r3
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01e      	beq.n	8004c92 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004c54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d009      	beq.n	8004c70 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	21cb      	movs	r1, #203	; 0xcb
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f002 fd23 	bl	80076ac <VL53L0X_RdByte>
 8004c66:	4603      	mov	r3, r0
 8004c68:	461a      	mov	r2, r3
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004c70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d02a      	beq.n	8004cce <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004c78:	f107 030e 	add.w	r3, r7, #14
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	21ee      	movs	r1, #238	; 0xee
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f002 fd13 	bl	80076ac <VL53L0X_RdByte>
 8004c86:	4603      	mov	r3, r0
 8004c88:	461a      	mov	r2, r3
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	e01d      	b.n	8004cce <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004c92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004c9a:	78bb      	ldrb	r3, [r7, #2]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	21cb      	movs	r1, #203	; 0xcb
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f002 fc81 	bl	80075a8 <VL53L0X_WrByte>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	461a      	mov	r2, r3
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004cb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004cb8:	787b      	ldrb	r3, [r7, #1]
 8004cba:	2280      	movs	r2, #128	; 0x80
 8004cbc:	21ee      	movs	r1, #238	; 0xee
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f002 fcc0 	bl	8007644 <VL53L0X_UpdateByte>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004cce:	2201      	movs	r2, #1
 8004cd0:	21ff      	movs	r1, #255	; 0xff
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f002 fc68 	bl	80075a8 <VL53L0X_WrByte>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f002 fc5e 	bl	80075a8 <VL53L0X_WrByte>
 8004cec:	4603      	mov	r3, r0
 8004cee:	461a      	mov	r2, r3
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	21ff      	movs	r1, #255	; 0xff
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f002 fc54 	bl	80075a8 <VL53L0X_WrByte>
 8004d00:	4603      	mov	r3, r0
 8004d02:	461a      	mov	r2, r3
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8004d0a:	7bbb      	ldrb	r3, [r7, #14]
 8004d0c:	f023 0310 	bic.w	r3, r3, #16
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	701a      	strb	r2, [r3, #0]

	return Status;
 8004d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b08a      	sub	sp, #40	; 0x28
 8004d26:	af04      	add	r7, sp, #16
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	461a      	mov	r2, r3
 8004d30:	460b      	mov	r3, r1
 8004d32:	71fb      	strb	r3, [r7, #7]
 8004d34:	4613      	mov	r3, r2
 8004d36:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004d4c:	79bb      	ldrb	r3, [r7, #6]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8004d58:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f002 fc22 	bl	80075a8 <VL53L0X_WrByte>
 8004d64:	4603      	mov	r3, r0
 8004d66:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8004d70:	2140      	movs	r1, #64	; 0x40
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff ff01 	bl	8004b7a <VL53L0X_perform_single_ref_calibration>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d115      	bne.n	8004db0 <VL53L0X_perform_vhv_calibration+0x8e>
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d112      	bne.n	8004db0 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004d8a:	7d39      	ldrb	r1, [r7, #20]
 8004d8c:	7d7a      	ldrb	r2, [r7, #21]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9303      	str	r3, [sp, #12]
 8004d92:	2301      	movs	r3, #1
 8004d94:	9302      	str	r3, [sp, #8]
 8004d96:	f107 0313 	add.w	r3, r7, #19
 8004d9a:	9301      	str	r3, [sp, #4]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	460b      	mov	r3, r1
 8004da2:	2101      	movs	r1, #1
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff ff23 	bl	8004bf0 <VL53L0X_ref_calibration_io>
 8004daa:	4603      	mov	r3, r0
 8004dac:	75fb      	strb	r3, [r7, #23]
 8004dae:	e002      	b.n	8004db6 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d112      	bne.n	8004de4 <VL53L0X_perform_vhv_calibration+0xc2>
 8004dbe:	79bb      	ldrb	r3, [r7, #6]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00f      	beq.n	8004de4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004dc4:	7dbb      	ldrb	r3, [r7, #22]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2101      	movs	r1, #1
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f002 fbec 	bl	80075a8 <VL53L0X_WrByte>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d103      	bne.n	8004de4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	7dba      	ldrb	r2, [r7, #22]
 8004de0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8004de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	; 0x28
 8004df4:	af04      	add	r7, sp, #16
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	460b      	mov	r3, r1
 8004e00:	71fb      	strb	r3, [r7, #7]
 8004e02:	4613      	mov	r3, r2
 8004e04:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004e16:	79bb      	ldrb	r3, [r7, #6]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8004e22:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004e24:	2202      	movs	r2, #2
 8004e26:	2101      	movs	r1, #1
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f002 fbbd 	bl	80075a8 <VL53L0X_WrByte>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff fe9c 	bl	8004b7a <VL53L0X_perform_single_ref_calibration>
 8004e42:	4603      	mov	r3, r0
 8004e44:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d115      	bne.n	8004e7a <VL53L0X_perform_phase_calibration+0x8a>
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d112      	bne.n	8004e7a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004e54:	7d39      	ldrb	r1, [r7, #20]
 8004e56:	7d7a      	ldrb	r2, [r7, #21]
 8004e58:	2301      	movs	r3, #1
 8004e5a:	9303      	str	r3, [sp, #12]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	f107 0313 	add.w	r3, r7, #19
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff febe 	bl	8004bf0 <VL53L0X_ref_calibration_io>
 8004e74:	4603      	mov	r3, r0
 8004e76:	75fb      	strb	r3, [r7, #23]
 8004e78:	e002      	b.n	8004e80 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d112      	bne.n	8004eae <VL53L0X_perform_phase_calibration+0xbe>
 8004e88:	79bb      	ldrb	r3, [r7, #6]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00f      	beq.n	8004eae <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004e8e:	7dbb      	ldrb	r3, [r7, #22]
 8004e90:	461a      	mov	r2, r3
 8004e92:	2101      	movs	r1, #1
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f002 fb87 	bl	80075a8 <VL53L0X_WrByte>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	7dba      	ldrb	r2, [r7, #22]
 8004eaa:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8004eae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b086      	sub	sp, #24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8004ed6:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 8004ed8:	78fa      	ldrb	r2, [r7, #3]
 8004eda:	2300      	movs	r3, #0
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff ff1f 	bl	8004d22 <VL53L0X_perform_vhv_calibration>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d107      	bne.n	8004f00 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff ff7a 	bl	8004df0 <VL53L0X_perform_phase_calibration>
 8004efc:	4603      	mov	r3, r0
 8004efe:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8004f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10f      	bne.n	8004f28 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004f08:	7dbb      	ldrb	r3, [r7, #22]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f002 fb4a 	bl	80075a8 <VL53L0X_WrByte>
 8004f14:	4603      	mov	r3, r0
 8004f16:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d103      	bne.n	8004f28 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	7dba      	ldrb	r2, [r7, #22]
 8004f24:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8004f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004f48:	f107 030f 	add.w	r3, r7, #15
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fe fe02 	bl	8003b58 <VL53L0X_GetMeasurementDataReady>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d110      	bne.n	8004f82 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d00f      	beq.n	8004f86 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004f72:	d302      	bcc.n	8004f7a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004f74:	23f9      	movs	r3, #249	; 0xf9
 8004f76:	75fb      	strb	r3, [r7, #23]
			break;
 8004f78:	e006      	b.n	8004f88 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f002 fc34 	bl	80077e8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004f80:	e7e2      	b.n	8004f48 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8004f82:	bf00      	nop
 8004f84:	e000      	b.n	8004f88 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8004f86:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8004f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8004fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ff0:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8004ff2:	e002      	b.n	8004ffa <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	089b      	lsrs	r3, r3, #2
 8004ff8:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d8f8      	bhi.n	8004ff4 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005002:	e017      	b.n	8005034 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	4413      	add	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	d30b      	bcc.n	8005028 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4413      	add	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	4413      	add	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e002      	b.n	800502e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	089b      	lsrs	r3, r3, #2
 8005032:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e4      	bne.n	8005004 <VL53L0X_isqrt+0x24>
	}

	return res;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005050:	2300      	movs	r3, #0
 8005052:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005054:	2200      	movs	r2, #0
 8005056:	2183      	movs	r1, #131	; 0x83
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f002 faa5 	bl	80075a8 <VL53L0X_WrByte>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	4313      	orrs	r3, r2
 8005066:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8005068:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d11e      	bne.n	80050ae <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005074:	f107 030f 	add.w	r3, r7, #15
 8005078:	461a      	mov	r2, r3
 800507a:	2183      	movs	r1, #131	; 0x83
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f002 fb15 	bl	80076ac <VL53L0X_RdByte>
 8005082:	4603      	mov	r3, r0
 8005084:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <VL53L0X_device_read_strobe+0x5a>
 800508c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d106      	bne.n	80050a2 <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	3301      	adds	r3, #1
 8005098:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050a0:	d3e8      	bcc.n	8005074 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050a8:	d301      	bcc.n	80050ae <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80050aa:	23f9      	movs	r3, #249	; 0xf9
 80050ac:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80050ae:	2201      	movs	r2, #1
 80050b0:	2183      	movs	r1, #131	; 0x83
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f002 fa78 	bl	80075a8 <VL53L0X_WrByte>
 80050b8:	4603      	mov	r3, r0
 80050ba:	461a      	mov	r2, r3
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	4313      	orrs	r3, r2
 80050c0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80050c2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b098      	sub	sp, #96	; 0x60
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050da:	2300      	movs	r3, #0
 80050dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80050fe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005102:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005116:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 800511a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800511e:	2b07      	cmp	r3, #7
 8005120:	f000 8408 	beq.w	8005934 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005124:	2201      	movs	r2, #1
 8005126:	2180      	movs	r1, #128	; 0x80
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f002 fa3d 	bl	80075a8 <VL53L0X_WrByte>
 800512e:	4603      	mov	r3, r0
 8005130:	461a      	mov	r2, r3
 8005132:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005136:	4313      	orrs	r3, r2
 8005138:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800513c:	2201      	movs	r2, #1
 800513e:	21ff      	movs	r1, #255	; 0xff
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f002 fa31 	bl	80075a8 <VL53L0X_WrByte>
 8005146:	4603      	mov	r3, r0
 8005148:	461a      	mov	r2, r3
 800514a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800514e:	4313      	orrs	r3, r2
 8005150:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005154:	2200      	movs	r2, #0
 8005156:	2100      	movs	r1, #0
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f002 fa25 	bl	80075a8 <VL53L0X_WrByte>
 800515e:	4603      	mov	r3, r0
 8005160:	461a      	mov	r2, r3
 8005162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005166:	4313      	orrs	r3, r2
 8005168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800516c:	2206      	movs	r2, #6
 800516e:	21ff      	movs	r1, #255	; 0xff
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f002 fa19 	bl	80075a8 <VL53L0X_WrByte>
 8005176:	4603      	mov	r3, r0
 8005178:	461a      	mov	r2, r3
 800517a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800517e:	4313      	orrs	r3, r2
 8005180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005184:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005188:	461a      	mov	r2, r3
 800518a:	2183      	movs	r1, #131	; 0x83
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f002 fa8d 	bl	80076ac <VL53L0X_RdByte>
 8005192:	4603      	mov	r3, r0
 8005194:	461a      	mov	r2, r3
 8005196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800519a:	4313      	orrs	r3, r2
 800519c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80051a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051a4:	f043 0304 	orr.w	r3, r3, #4
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	2183      	movs	r1, #131	; 0x83
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f002 f9fa 	bl	80075a8 <VL53L0X_WrByte>
 80051b4:	4603      	mov	r3, r0
 80051b6:	461a      	mov	r2, r3
 80051b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051bc:	4313      	orrs	r3, r2
 80051be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80051c2:	2207      	movs	r2, #7
 80051c4:	21ff      	movs	r1, #255	; 0xff
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f002 f9ee 	bl	80075a8 <VL53L0X_WrByte>
 80051cc:	4603      	mov	r3, r0
 80051ce:	461a      	mov	r2, r3
 80051d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80051da:	2201      	movs	r2, #1
 80051dc:	2181      	movs	r1, #129	; 0x81
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f002 f9e2 	bl	80075a8 <VL53L0X_WrByte>
 80051e4:	4603      	mov	r3, r0
 80051e6:	461a      	mov	r2, r3
 80051e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f002 faf8 	bl	80077e8 <VL53L0X_PollingDelay>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005200:	4313      	orrs	r3, r2
 8005202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005206:	2201      	movs	r2, #1
 8005208:	2180      	movs	r1, #128	; 0x80
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f002 f9cc 	bl	80075a8 <VL53L0X_WrByte>
 8005210:	4603      	mov	r3, r0
 8005212:	461a      	mov	r2, r3
 8005214:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005218:	4313      	orrs	r3, r2
 800521a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8098 	beq.w	800535a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800522a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800522e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005232:	2b00      	cmp	r3, #0
 8005234:	f040 8091 	bne.w	800535a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005238:	226b      	movs	r2, #107	; 0x6b
 800523a:	2194      	movs	r1, #148	; 0x94
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f002 f9b3 	bl	80075a8 <VL53L0X_WrByte>
 8005242:	4603      	mov	r3, r0
 8005244:	461a      	mov	r2, r3
 8005246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800524a:	4313      	orrs	r3, r2
 800524c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff fef9 	bl	8005048 <VL53L0X_device_read_strobe>
 8005256:	4603      	mov	r3, r0
 8005258:	461a      	mov	r2, r3
 800525a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800525e:	4313      	orrs	r3, r2
 8005260:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005264:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005268:	461a      	mov	r2, r3
 800526a:	2190      	movs	r1, #144	; 0x90
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f002 fa7f 	bl	8007770 <VL53L0X_RdDWord>
 8005272:	4603      	mov	r3, r0
 8005274:	461a      	mov	r2, r3
 8005276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800527a:	4313      	orrs	r3, r2
 800527c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800528a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	0bdb      	lsrs	r3, r3, #15
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800529c:	2224      	movs	r2, #36	; 0x24
 800529e:	2194      	movs	r1, #148	; 0x94
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f002 f981 	bl	80075a8 <VL53L0X_WrByte>
 80052a6:	4603      	mov	r3, r0
 80052a8:	461a      	mov	r2, r3
 80052aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fec7 	bl	8005048 <VL53L0X_device_read_strobe>
 80052ba:	4603      	mov	r3, r0
 80052bc:	461a      	mov	r2, r3
 80052be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80052c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052cc:	461a      	mov	r2, r3
 80052ce:	2190      	movs	r1, #144	; 0x90
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f002 fa4d 	bl	8007770 <VL53L0X_RdDWord>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052de:	4313      	orrs	r3, r2
 80052e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	0e1b      	lsrs	r3, r3, #24
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005302:	2225      	movs	r2, #37	; 0x25
 8005304:	2194      	movs	r1, #148	; 0x94
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f002 f94e 	bl	80075a8 <VL53L0X_WrByte>
 800530c:	4603      	mov	r3, r0
 800530e:	461a      	mov	r2, r3
 8005310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005314:	4313      	orrs	r3, r2
 8005316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fe94 	bl	8005048 <VL53L0X_device_read_strobe>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005328:	4313      	orrs	r3, r2
 800532a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800532e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005332:	461a      	mov	r2, r3
 8005334:	2190      	movs	r1, #144	; 0x90
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f002 fa1a 	bl	8007770 <VL53L0X_RdDWord>
 800533c:	4603      	mov	r3, r0
 800533e:	461a      	mov	r2, r3
 8005340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005344:	4313      	orrs	r3, r2
 8005346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	0e1b      	lsrs	r3, r3, #24
 800534e:	b2db      	uxtb	r3, r3
 8005350:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	b2db      	uxtb	r3, r3
 8005358:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8189 	beq.w	8005678 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005366:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800536a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 8182 	bne.w	8005678 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8005374:	2202      	movs	r2, #2
 8005376:	2194      	movs	r1, #148	; 0x94
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f002 f915 	bl	80075a8 <VL53L0X_WrByte>
 800537e:	4603      	mov	r3, r0
 8005380:	461a      	mov	r2, r3
 8005382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005386:	4313      	orrs	r3, r2
 8005388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff fe5b 	bl	8005048 <VL53L0X_device_read_strobe>
 8005392:	4603      	mov	r3, r0
 8005394:	461a      	mov	r2, r3
 8005396:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800539a:	4313      	orrs	r3, r2
 800539c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80053a0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80053a4:	461a      	mov	r2, r3
 80053a6:	2190      	movs	r1, #144	; 0x90
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f002 f97f 	bl	80076ac <VL53L0X_RdByte>
 80053ae:	4603      	mov	r3, r0
 80053b0:	461a      	mov	r2, r3
 80053b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80053bc:	227b      	movs	r2, #123	; 0x7b
 80053be:	2194      	movs	r1, #148	; 0x94
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f002 f8f1 	bl	80075a8 <VL53L0X_WrByte>
 80053c6:	4603      	mov	r3, r0
 80053c8:	461a      	mov	r2, r3
 80053ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff fe37 	bl	8005048 <VL53L0X_device_read_strobe>
 80053da:	4603      	mov	r3, r0
 80053dc:	461a      	mov	r2, r3
 80053de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80053e8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80053ec:	461a      	mov	r2, r3
 80053ee:	2190      	movs	r1, #144	; 0x90
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f002 f95b 	bl	80076ac <VL53L0X_RdByte>
 80053f6:	4603      	mov	r3, r0
 80053f8:	461a      	mov	r2, r3
 80053fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053fe:	4313      	orrs	r3, r2
 8005400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005404:	2277      	movs	r2, #119	; 0x77
 8005406:	2194      	movs	r1, #148	; 0x94
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f002 f8cd 	bl	80075a8 <VL53L0X_WrByte>
 800540e:	4603      	mov	r3, r0
 8005410:	461a      	mov	r2, r3
 8005412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005416:	4313      	orrs	r3, r2
 8005418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff fe13 	bl	8005048 <VL53L0X_device_read_strobe>
 8005422:	4603      	mov	r3, r0
 8005424:	461a      	mov	r2, r3
 8005426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800542a:	4313      	orrs	r3, r2
 800542c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005434:	461a      	mov	r2, r3
 8005436:	2190      	movs	r1, #144	; 0x90
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f002 f999 	bl	8007770 <VL53L0X_RdDWord>
 800543e:	4603      	mov	r3, r0
 8005440:	461a      	mov	r2, r3
 8005442:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005446:	4313      	orrs	r3, r2
 8005448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	0e5b      	lsrs	r3, r3, #25
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005456:	b2db      	uxtb	r3, r3
 8005458:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	0c9b      	lsrs	r3, r3, #18
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005464:	b2db      	uxtb	r3, r3
 8005466:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	0adb      	lsrs	r3, r3, #11
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005472:	b2db      	uxtb	r3, r3
 8005474:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	091b      	lsrs	r3, r3, #4
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005480:	b2db      	uxtb	r3, r3
 8005482:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	b2db      	uxtb	r3, r3
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8005496:	2278      	movs	r2, #120	; 0x78
 8005498:	2194      	movs	r1, #148	; 0x94
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f002 f884 	bl	80075a8 <VL53L0X_WrByte>
 80054a0:	4603      	mov	r3, r0
 80054a2:	461a      	mov	r2, r3
 80054a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fdca 	bl	8005048 <VL53L0X_device_read_strobe>
 80054b4:	4603      	mov	r3, r0
 80054b6:	461a      	mov	r2, r3
 80054b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054bc:	4313      	orrs	r3, r2
 80054be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80054c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054c6:	461a      	mov	r2, r3
 80054c8:	2190      	movs	r1, #144	; 0x90
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f002 f950 	bl	8007770 <VL53L0X_RdDWord>
 80054d0:	4603      	mov	r3, r0
 80054d2:	461a      	mov	r2, r3
 80054d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054d8:	4313      	orrs	r3, r2
 80054da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	0f5b      	lsrs	r3, r3, #29
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e8:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80054ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054ee:	4413      	add	r3, r2
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	0d9b      	lsrs	r3, r3, #22
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	0bdb      	lsrs	r3, r3, #15
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550c:	b2db      	uxtb	r3, r3
 800550e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	0a1b      	lsrs	r3, r3, #8
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551a:	b2db      	uxtb	r3, r3
 800551c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005528:	b2db      	uxtb	r3, r3
 800552a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	b2db      	uxtb	r3, r3
 8005530:	019b      	lsls	r3, r3, #6
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800553e:	2279      	movs	r2, #121	; 0x79
 8005540:	2194      	movs	r1, #148	; 0x94
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f002 f830 	bl	80075a8 <VL53L0X_WrByte>
 8005548:	4603      	mov	r3, r0
 800554a:	461a      	mov	r2, r3
 800554c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005550:	4313      	orrs	r3, r2
 8005552:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fd76 	bl	8005048 <VL53L0X_device_read_strobe>
 800555c:	4603      	mov	r3, r0
 800555e:	461a      	mov	r2, r3
 8005560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005564:	4313      	orrs	r3, r2
 8005566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800556a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800556e:	461a      	mov	r2, r3
 8005570:	2190      	movs	r1, #144	; 0x90
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f002 f8fc 	bl	8007770 <VL53L0X_RdDWord>
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005580:	4313      	orrs	r3, r2
 8005582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	0e9b      	lsrs	r3, r3, #26
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005590:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8005592:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005596:	4413      	add	r3, r2
 8005598:	b2db      	uxtb	r3, r3
 800559a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	0cdb      	lsrs	r3, r3, #19
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	0b1b      	lsrs	r3, r3, #12
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80055d8:	227a      	movs	r2, #122	; 0x7a
 80055da:	2194      	movs	r1, #148	; 0x94
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 ffe3 	bl	80075a8 <VL53L0X_WrByte>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff fd29 	bl	8005048 <VL53L0X_device_read_strobe>
 80055f6:	4603      	mov	r3, r0
 80055f8:	461a      	mov	r2, r3
 80055fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055fe:	4313      	orrs	r3, r2
 8005600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005608:	461a      	mov	r2, r3
 800560a:	2190      	movs	r1, #144	; 0x90
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f002 f8af 	bl	8007770 <VL53L0X_RdDWord>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800561a:	4313      	orrs	r3, r2
 800561c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	0f9b      	lsrs	r3, r3, #30
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800562a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800562c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005630:	4413      	add	r3, r2
 8005632:	b2db      	uxtb	r3, r3
 8005634:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	0ddb      	lsrs	r3, r3, #23
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005640:	b2db      	uxtb	r3, r3
 8005642:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	b2db      	uxtb	r3, r3
 800564a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564e:	b2db      	uxtb	r3, r3
 8005650:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	0a5b      	lsrs	r3, r3, #9
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8005672:	2300      	movs	r3, #0
 8005674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80f1 	beq.w	8005866 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005688:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800568c:	2b00      	cmp	r3, #0
 800568e:	f040 80ea 	bne.w	8005866 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005692:	227b      	movs	r2, #123	; 0x7b
 8005694:	2194      	movs	r1, #148	; 0x94
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 ff86 	bl	80075a8 <VL53L0X_WrByte>
 800569c:	4603      	mov	r3, r0
 800569e:	461a      	mov	r2, r3
 80056a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff fccc 	bl	8005048 <VL53L0X_device_read_strobe>
 80056b0:	4603      	mov	r3, r0
 80056b2:	461a      	mov	r2, r3
 80056b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80056be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056c2:	461a      	mov	r2, r3
 80056c4:	2190      	movs	r1, #144	; 0x90
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f002 f852 	bl	8007770 <VL53L0X_RdDWord>
 80056cc:	4603      	mov	r3, r0
 80056ce:	461a      	mov	r2, r3
 80056d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80056da:	227c      	movs	r2, #124	; 0x7c
 80056dc:	2194      	movs	r1, #148	; 0x94
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f001 ff62 	bl	80075a8 <VL53L0X_WrByte>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff fca8 	bl	8005048 <VL53L0X_device_read_strobe>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005700:	4313      	orrs	r3, r2
 8005702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800570a:	461a      	mov	r2, r3
 800570c:	2190      	movs	r1, #144	; 0x90
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f002 f82e 	bl	8007770 <VL53L0X_RdDWord>
 8005714:	4603      	mov	r3, r0
 8005716:	461a      	mov	r2, r3
 8005718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800571c:	4313      	orrs	r3, r2
 800571e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005722:	2273      	movs	r2, #115	; 0x73
 8005724:	2194      	movs	r1, #148	; 0x94
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f001 ff3e 	bl	80075a8 <VL53L0X_WrByte>
 800572c:	4603      	mov	r3, r0
 800572e:	461a      	mov	r2, r3
 8005730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005734:	4313      	orrs	r3, r2
 8005736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fc84 	bl	8005048 <VL53L0X_device_read_strobe>
 8005740:	4603      	mov	r3, r0
 8005742:	461a      	mov	r2, r3
 8005744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005748:	4313      	orrs	r3, r2
 800574a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800574e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005752:	461a      	mov	r2, r3
 8005754:	2190      	movs	r1, #144	; 0x90
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f002 f80a 	bl	8007770 <VL53L0X_RdDWord>
 800575c:	4603      	mov	r3, r0
 800575e:	461a      	mov	r2, r3
 8005760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005764:	4313      	orrs	r3, r2
 8005766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800576e:	b29b      	uxth	r3, r3
 8005770:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8005772:	2274      	movs	r2, #116	; 0x74
 8005774:	2194      	movs	r1, #148	; 0x94
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 ff16 	bl	80075a8 <VL53L0X_WrByte>
 800577c:	4603      	mov	r3, r0
 800577e:	461a      	mov	r2, r3
 8005780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005784:	4313      	orrs	r3, r2
 8005786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fc5c 	bl	8005048 <VL53L0X_device_read_strobe>
 8005790:	4603      	mov	r3, r0
 8005792:	461a      	mov	r2, r3
 8005794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005798:	4313      	orrs	r3, r2
 800579a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800579e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057a2:	461a      	mov	r2, r3
 80057a4:	2190      	movs	r1, #144	; 0x90
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 ffe2 	bl	8007770 <VL53L0X_RdDWord>
 80057ac:	4603      	mov	r3, r0
 80057ae:	461a      	mov	r2, r3
 80057b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80057be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057c0:	4313      	orrs	r3, r2
 80057c2:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80057c4:	2275      	movs	r2, #117	; 0x75
 80057c6:	2194      	movs	r1, #148	; 0x94
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 feed 	bl	80075a8 <VL53L0X_WrByte>
 80057ce:	4603      	mov	r3, r0
 80057d0:	461a      	mov	r2, r3
 80057d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fc33 	bl	8005048 <VL53L0X_device_read_strobe>
 80057e2:	4603      	mov	r3, r0
 80057e4:	461a      	mov	r2, r3
 80057e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057f4:	461a      	mov	r2, r3
 80057f6:	2190      	movs	r1, #144	; 0x90
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 ffb9 	bl	8007770 <VL53L0X_RdDWord>
 80057fe:	4603      	mov	r3, r0
 8005800:	461a      	mov	r2, r3
 8005802:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005806:	4313      	orrs	r3, r2
 8005808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005810:	b29b      	uxth	r3, r3
 8005812:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005814:	2276      	movs	r2, #118	; 0x76
 8005816:	2194      	movs	r1, #148	; 0x94
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f001 fec5 	bl	80075a8 <VL53L0X_WrByte>
 800581e:	4603      	mov	r3, r0
 8005820:	461a      	mov	r2, r3
 8005822:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005826:	4313      	orrs	r3, r2
 8005828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff fc0b 	bl	8005048 <VL53L0X_device_read_strobe>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800583a:	4313      	orrs	r3, r2
 800583c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005844:	461a      	mov	r2, r3
 8005846:	2190      	movs	r1, #144	; 0x90
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f001 ff91 	bl	8007770 <VL53L0X_RdDWord>
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005856:	4313      	orrs	r3, r2
 8005858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8005860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005862:	4313      	orrs	r3, r2
 8005864:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005866:	2200      	movs	r2, #0
 8005868:	2181      	movs	r1, #129	; 0x81
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 fe9c 	bl	80075a8 <VL53L0X_WrByte>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005878:	4313      	orrs	r3, r2
 800587a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800587e:	2206      	movs	r2, #6
 8005880:	21ff      	movs	r1, #255	; 0xff
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 fe90 	bl	80075a8 <VL53L0X_WrByte>
 8005888:	4603      	mov	r3, r0
 800588a:	461a      	mov	r2, r3
 800588c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005890:	4313      	orrs	r3, r2
 8005892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005896:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800589a:	461a      	mov	r2, r3
 800589c:	2183      	movs	r1, #131	; 0x83
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 ff04 	bl	80076ac <VL53L0X_RdByte>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80058b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058b6:	f023 0304 	bic.w	r3, r3, #4
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	2183      	movs	r1, #131	; 0x83
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 fe71 	bl	80075a8 <VL53L0X_WrByte>
 80058c6:	4603      	mov	r3, r0
 80058c8:	461a      	mov	r2, r3
 80058ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058d4:	2201      	movs	r2, #1
 80058d6:	21ff      	movs	r1, #255	; 0xff
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 fe65 	bl	80075a8 <VL53L0X_WrByte>
 80058de:	4603      	mov	r3, r0
 80058e0:	461a      	mov	r2, r3
 80058e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80058ec:	2201      	movs	r2, #1
 80058ee:	2100      	movs	r1, #0
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 fe59 	bl	80075a8 <VL53L0X_WrByte>
 80058f6:	4603      	mov	r3, r0
 80058f8:	461a      	mov	r2, r3
 80058fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058fe:	4313      	orrs	r3, r2
 8005900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005904:	2200      	movs	r2, #0
 8005906:	21ff      	movs	r1, #255	; 0xff
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 fe4d 	bl	80075a8 <VL53L0X_WrByte>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005916:	4313      	orrs	r3, r2
 8005918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800591c:	2200      	movs	r2, #0
 800591e:	2180      	movs	r1, #128	; 0x80
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fe41 	bl	80075a8 <VL53L0X_WrByte>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800592e:	4313      	orrs	r3, r2
 8005930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005934:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005938:	2b00      	cmp	r3, #0
 800593a:	f040 8090 	bne.w	8005a5e <VL53L0X_get_info_from_device+0x990>
 800593e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005942:	2b07      	cmp	r3, #7
 8005944:	f000 808b 	beq.w	8005a5e <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d024      	beq.n	800599c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005952:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005956:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11e      	bne.n	800599c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8005964:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800596e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005972:	2300      	movs	r3, #0
 8005974:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005976:	e00e      	b.n	8005996 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005978:	f107 0208 	add.w	r2, r7, #8
 800597c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597e:	4413      	add	r3, r2
 8005980:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005986:	4413      	add	r3, r2
 8005988:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 800598c:	460a      	mov	r2, r1
 800598e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005992:	3301      	adds	r3, #1
 8005994:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005998:	2b05      	cmp	r3, #5
 800599a:	dded      	ble.n	8005978 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d019      	beq.n	80059da <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80059a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059aa:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d113      	bne.n	80059da <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059bc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f203 131f 	addw	r3, r3, #287	; 0x11f
 80059cc:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80059ce:	f107 0310 	add.w	r3, r7, #16
 80059d2:	4619      	mov	r1, r3
 80059d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059d6:	f001 ff51 	bl	800787c <strcpy>

		}

		if (((option & 4) == 4) &&
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d030      	beq.n	8005a46 <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80059e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059e8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d12a      	bne.n	8005a46 <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a02:	025b      	lsls	r3, r3, #9
 8005a04:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a0a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d011      	beq.n	8005a3e <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 8005a1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 8005a2e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 8005a32:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005a36:	425b      	negs	r3, r3
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005a3e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005a46:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005a54:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a5e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3760      	adds	r7, #96	; 0x60
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	460b      	mov	r3, r1
 8005a74:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 8005a76:	f240 6277 	movw	r2, #1655	; 0x677
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8005a82:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005a86:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005a98:	68bb      	ldr	r3, [r7, #8]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b087      	sub	sp, #28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d017      	beq.n	8005af0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005ac6:	e005      	b.n	8005ad4 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005ace:	89fb      	ldrh	r3, [r7, #14]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f4      	bne.n	8005ac8 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005ade:	89fb      	ldrh	r3, [r7, #14]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005aec:	4413      	add	r3, r2
 8005aee:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005af0:	8afb      	ldrh	r3, [r7, #22]

}
 8005af2:	4618      	mov	r0, r3
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	4603      	mov	r3, r0
 8005b06:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005b10:	88fa      	ldrh	r2, [r7, #6]
 8005b12:	0a12      	lsrs	r2, r2, #8
 8005b14:	b292      	uxth	r2, r2
 8005b16:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005b18:	3301      	adds	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
	...

08005b2c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	4619      	mov	r1, r3
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff ff91 	bl	8005a6a <VL53L0X_calc_macro_period_ps>
 8005b48:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005b50:	4a0a      	ldr	r2, [pc, #40]	; (8005b7c <VL53L0X_calc_timeout_mclks+0x50>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	099b      	lsrs	r3, r3, #6
 8005b58:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b60:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	441a      	add	r2, r3
	timeout_period_mclks =
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8005b72:	69fb      	ldr	r3, [r7, #28]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3720      	adds	r7, #32
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	10624dd3 	.word	0x10624dd3

08005b80 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005b94:	787b      	ldrb	r3, [r7, #1]
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ff66 	bl	8005a6a <VL53L0X_calc_macro_period_ps>
 8005b9e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <VL53L0X_calc_timeout_us+0x50>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	099b      	lsrs	r3, r3, #6
 8005bae:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005bb0:	887b      	ldrh	r3, [r7, #2]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8005bbc:	4a04      	ldr	r2, [pc, #16]	; (8005bd0 <VL53L0X_calc_timeout_us+0x50>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	099b      	lsrs	r3, r3, #6
 8005bc4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005bc6:	697b      	ldr	r3, [r7, #20]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	10624dd3 	.word	0x10624dd3

08005bd4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08c      	sub	sp, #48	; 0x30
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005bfa:	7afb      	ldrb	r3, [r7, #11]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <get_sequence_step_timeout+0x38>
 8005c00:	7afb      	ldrb	r3, [r7, #11]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d002      	beq.n	8005c0c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005c06:	7afb      	ldrb	r3, [r7, #11]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d128      	bne.n	8005c5e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005c0c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005c10:	461a      	mov	r2, r3
 8005c12:	2100      	movs	r1, #0
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7fd f9ef 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005c20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005c28:	f107 0320 	add.w	r3, r7, #32
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2146      	movs	r1, #70	; 0x46
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f001 fd3b 	bl	80076ac <VL53L0X_RdByte>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005c3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff ff5b 	bl	8005afe <VL53L0X_decode_timeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005c4c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005c50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c52:	4619      	mov	r1, r3
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff ff93 	bl	8005b80 <VL53L0X_calc_timeout_us>
 8005c5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8005c5c:	e092      	b.n	8005d84 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d135      	bne.n	8005cd0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005c64:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7fd f9c3 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005c78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f040 8081 	bne.w	8005d84 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005c82:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005c86:	461a      	mov	r2, r3
 8005c88:	2100      	movs	r1, #0
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7fd f9b4 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005c96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8005c9e:	f107 031e 	add.w	r3, r7, #30
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	2151      	movs	r1, #81	; 0x51
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f001 fd2a 	bl	8007700 <VL53L0X_RdWord>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005cb2:	8bfb      	ldrh	r3, [r7, #30]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff ff22 	bl	8005afe <VL53L0X_decode_timeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005cbe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005cc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f7ff ff5a 	bl	8005b80 <VL53L0X_calc_timeout_us>
 8005ccc:	62b8      	str	r0, [r7, #40]	; 0x28
 8005cce:	e059      	b.n	8005d84 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005cd0:	7afb      	ldrb	r3, [r7, #11]
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d156      	bne.n	8005d84 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005cd6:	f107 0314 	add.w	r3, r7, #20
 8005cda:	4619      	mov	r1, r3
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7fd fa97 	bl	8003210 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01d      	beq.n	8005d28 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005cec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7fd f97f 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005d00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10f      	bne.n	8005d28 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005d08:	f107 031e 	add.w	r3, r7, #30
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2151      	movs	r1, #81	; 0x51
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f001 fcf5 	bl	8007700 <VL53L0X_RdWord>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005d1c:	8bfb      	ldrh	r3, [r7, #30]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff feed 	bl	8005afe <VL53L0X_decode_timeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005d28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d109      	bne.n	8005d44 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005d30:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005d34:	461a      	mov	r2, r3
 8005d36:	2101      	movs	r1, #1
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7fd f95d 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005d44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10f      	bne.n	8005d6c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005d4c:	f107 031c 	add.w	r3, r7, #28
 8005d50:	461a      	mov	r2, r3
 8005d52:	2171      	movs	r1, #113	; 0x71
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f001 fcd3 	bl	8007700 <VL53L0X_RdWord>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005d60:	8bbb      	ldrh	r3, [r7, #28]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff fecb 	bl	8005afe <VL53L0X_decode_timeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005d6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005d74:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff feff 	bl	8005b80 <VL53L0X_calc_timeout_us>
 8005d82:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d88:	601a      	str	r2, [r3, #0]

	return Status;
 8005d8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3730      	adds	r7, #48	; 0x30
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b08a      	sub	sp, #40	; 0x28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <set_sequence_step_timeout+0x26>
 8005db0:	7afb      	ldrb	r3, [r7, #11]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d002      	beq.n	8005dbc <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005db6:	7afb      	ldrb	r3, [r7, #11]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d138      	bne.n	8005e2e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005dbc:	f107 031b 	add.w	r3, r7, #27
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7fd f917 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8005dd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d11a      	bne.n	8005e0e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8005dd8:	7efb      	ldrb	r3, [r7, #27]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f7ff fea4 	bl	8005b2c <VL53L0X_calc_timeout_mclks>
 8005de4:	4603      	mov	r3, r0
 8005de6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8005de8:	8bbb      	ldrh	r3, [r7, #28]
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dee:	d903      	bls.n	8005df8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8005df0:	23ff      	movs	r3, #255	; 0xff
 8005df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005df6:	e004      	b.n	8005e02 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8005df8:	8bbb      	ldrh	r3, [r7, #28]
 8005dfa:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005e0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f040 80ab 	bne.w	8005f6e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8005e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	2146      	movs	r1, #70	; 0x46
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f001 fbc1 	bl	80075a8 <VL53L0X_WrByte>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005e2c:	e09f      	b.n	8005f6e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005e2e:	7afb      	ldrb	r3, [r7, #11]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d135      	bne.n	8005ea0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8005e34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d11b      	bne.n	8005e74 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e3c:	f107 031b 	add.w	r3, r7, #27
 8005e40:	461a      	mov	r2, r3
 8005e42:	2100      	movs	r1, #0
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7fd f8d7 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005e50:	7efb      	ldrb	r3, [r7, #27]
 8005e52:	461a      	mov	r2, r3
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7ff fe68 	bl	8005b2c <VL53L0X_calc_timeout_mclks>
 8005e5c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fe1f 	bl	8005aa6 <VL53L0X_encode_timeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e6c:	8b3a      	ldrh	r2, [r7, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005e74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d108      	bne.n	8005e8e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005e7c:	8b3b      	ldrh	r3, [r7, #24]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	2151      	movs	r1, #81	; 0x51
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f001 fbb4 	bl	80075f0 <VL53L0X_WrWord>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005e8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d16b      	bne.n	8005f6e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8005e9e:	e066      	b.n	8005f6e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d160      	bne.n	8005f68 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8005ea6:	f107 0310 	add.w	r3, r7, #16
 8005eaa:	4619      	mov	r1, r3
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7fd f9af 	bl	8003210 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8005eb6:	7cfb      	ldrb	r3, [r7, #19]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01d      	beq.n	8005ef8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005ebc:	f107 031b 	add.w	r3, r7, #27
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7fd f897 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 8005ed0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10f      	bne.n	8005ef8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8005ed8:	f107 0318 	add.w	r3, r7, #24
 8005edc:	461a      	mov	r2, r3
 8005ede:	2151      	movs	r1, #81	; 0x51
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f001 fc0d 	bl	8007700 <VL53L0X_RdWord>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8005eec:	8b3b      	ldrh	r3, [r7, #24]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff fe05 	bl	8005afe <VL53L0X_decode_timeout>
 8005ef4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8005ef6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d109      	bne.n	8005f14 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f00:	f107 031b 	add.w	r3, r7, #27
 8005f04:	461a      	mov	r2, r3
 8005f06:	2101      	movs	r1, #1
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f7fd f875 	bl	8002ff8 <VL53L0X_GetVcselPulsePeriod>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005f14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d128      	bne.n	8005f6e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005f1c:	7efb      	ldrb	r3, [r7, #27]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff fe02 	bl	8005b2c <VL53L0X_calc_timeout_mclks>
 8005f28:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8005f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	4413      	add	r3, r2
 8005f30:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8005f32:	6a38      	ldr	r0, [r7, #32]
 8005f34:	f7ff fdb7 	bl	8005aa6 <VL53L0X_encode_timeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8005f3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d108      	bne.n	8005f56 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8005f44:	8bfb      	ldrh	r3, [r7, #30]
 8005f46:	461a      	mov	r2, r3
 8005f48:	2171      	movs	r1, #113	; 0x71
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f001 fb50 	bl	80075f0 <VL53L0X_WrWord>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8005f56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8005f66:	e002      	b.n	8005f6e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f68:	23fc      	movs	r3, #252	; 0xfc
 8005f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8005f6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3728      	adds	r7, #40	; 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b08a      	sub	sp, #40	; 0x28
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
 8005f86:	4613      	mov	r3, r2
 8005f88:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8005f90:	230c      	movs	r3, #12
 8005f92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8005f96:	2312      	movs	r3, #18
 8005f98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8005f9c:	2308      	movs	r3, #8
 8005f9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8005fa2:	230e      	movs	r3, #14
 8005fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8005fac:	78bb      	ldrb	r3, [r7, #2]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005fb8:	23fc      	movs	r3, #252	; 0xfc
 8005fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005fbe:	e020      	b.n	8006002 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10d      	bne.n	8005fe2 <VL53L0X_set_vcsel_pulse_period+0x68>
 8005fc6:	78ba      	ldrb	r2, [r7, #2]
 8005fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d304      	bcc.n	8005fda <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8005fd0:	78ba      	ldrb	r2, [r7, #2]
 8005fd2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d903      	bls.n	8005fe2 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005fda:	23fc      	movs	r3, #252	; 0xfc
 8005fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005fe0:	e00f      	b.n	8006002 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d10c      	bne.n	8006002 <VL53L0X_set_vcsel_pulse_period+0x88>
 8005fe8:	78ba      	ldrb	r2, [r7, #2]
 8005fea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d304      	bcc.n	8005ffc <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8005ff2:	78ba      	ldrb	r2, [r7, #2]
 8005ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d902      	bls.n	8006002 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ffc:	23fc      	movs	r3, #252	; 0xfc
 8005ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006002:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800600a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800600e:	e239      	b.n	8006484 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d150      	bne.n	80060b8 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006016:	78bb      	ldrb	r3, [r7, #2]
 8006018:	2b0c      	cmp	r3, #12
 800601a:	d110      	bne.n	800603e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800601c:	2218      	movs	r2, #24
 800601e:	2157      	movs	r1, #87	; 0x57
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fac1 	bl	80075a8 <VL53L0X_WrByte>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800602c:	2208      	movs	r2, #8
 800602e:	2156      	movs	r1, #86	; 0x56
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 fab9 	bl	80075a8 <VL53L0X_WrByte>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800603c:	e17f      	b.n	800633e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800603e:	78bb      	ldrb	r3, [r7, #2]
 8006040:	2b0e      	cmp	r3, #14
 8006042:	d110      	bne.n	8006066 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006044:	2230      	movs	r2, #48	; 0x30
 8006046:	2157      	movs	r1, #87	; 0x57
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 faad 	bl	80075a8 <VL53L0X_WrByte>
 800604e:	4603      	mov	r3, r0
 8006050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006054:	2208      	movs	r2, #8
 8006056:	2156      	movs	r1, #86	; 0x56
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 faa5 	bl	80075a8 <VL53L0X_WrByte>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006064:	e16b      	b.n	800633e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006066:	78bb      	ldrb	r3, [r7, #2]
 8006068:	2b10      	cmp	r3, #16
 800606a:	d110      	bne.n	800608e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800606c:	2240      	movs	r2, #64	; 0x40
 800606e:	2157      	movs	r1, #87	; 0x57
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 fa99 	bl	80075a8 <VL53L0X_WrByte>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800607c:	2208      	movs	r2, #8
 800607e:	2156      	movs	r1, #86	; 0x56
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 fa91 	bl	80075a8 <VL53L0X_WrByte>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800608c:	e157      	b.n	800633e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800608e:	78bb      	ldrb	r3, [r7, #2]
 8006090:	2b12      	cmp	r3, #18
 8006092:	f040 8154 	bne.w	800633e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006096:	2250      	movs	r2, #80	; 0x50
 8006098:	2157      	movs	r1, #87	; 0x57
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 fa84 	bl	80075a8 <VL53L0X_WrByte>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80060a6:	2208      	movs	r2, #8
 80060a8:	2156      	movs	r1, #86	; 0x56
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 fa7c 	bl	80075a8 <VL53L0X_WrByte>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80060b6:	e142      	b.n	800633e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	f040 813f 	bne.w	800633e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80060c0:	78bb      	ldrb	r3, [r7, #2]
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d14c      	bne.n	8006160 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80060c6:	2210      	movs	r2, #16
 80060c8:	2148      	movs	r1, #72	; 0x48
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f001 fa6c 	bl	80075a8 <VL53L0X_WrByte>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80060d6:	2208      	movs	r2, #8
 80060d8:	2147      	movs	r1, #71	; 0x47
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f001 fa64 	bl	80075a8 <VL53L0X_WrByte>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80060e6:	2202      	movs	r2, #2
 80060e8:	2132      	movs	r1, #50	; 0x32
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 fa5c 	bl	80075a8 <VL53L0X_WrByte>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80060fe:	220c      	movs	r2, #12
 8006100:	2130      	movs	r1, #48	; 0x30
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fa50 	bl	80075a8 <VL53L0X_WrByte>
 8006108:	4603      	mov	r3, r0
 800610a:	461a      	mov	r2, r3
 800610c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006110:	4313      	orrs	r3, r2
 8006112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006116:	2201      	movs	r2, #1
 8006118:	21ff      	movs	r1, #255	; 0xff
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fa44 	bl	80075a8 <VL53L0X_WrByte>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006128:	4313      	orrs	r3, r2
 800612a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800612e:	2230      	movs	r2, #48	; 0x30
 8006130:	2130      	movs	r1, #48	; 0x30
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 fa38 	bl	80075a8 <VL53L0X_WrByte>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006140:	4313      	orrs	r3, r2
 8006142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006146:	2200      	movs	r2, #0
 8006148:	21ff      	movs	r1, #255	; 0xff
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 fa2c 	bl	80075a8 <VL53L0X_WrByte>
 8006150:	4603      	mov	r3, r0
 8006152:	461a      	mov	r2, r3
 8006154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006158:	4313      	orrs	r3, r2
 800615a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800615e:	e0ee      	b.n	800633e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006160:	78bb      	ldrb	r3, [r7, #2]
 8006162:	2b0a      	cmp	r3, #10
 8006164:	d14c      	bne.n	8006200 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8006166:	2228      	movs	r2, #40	; 0x28
 8006168:	2148      	movs	r1, #72	; 0x48
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 fa1c 	bl	80075a8 <VL53L0X_WrByte>
 8006170:	4603      	mov	r3, r0
 8006172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8006176:	2208      	movs	r2, #8
 8006178:	2147      	movs	r1, #71	; 0x47
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f001 fa14 	bl	80075a8 <VL53L0X_WrByte>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006186:	2203      	movs	r2, #3
 8006188:	2132      	movs	r1, #50	; 0x32
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 fa0c 	bl	80075a8 <VL53L0X_WrByte>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006198:	4313      	orrs	r3, r2
 800619a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800619e:	2209      	movs	r2, #9
 80061a0:	2130      	movs	r1, #48	; 0x30
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 fa00 	bl	80075a8 <VL53L0X_WrByte>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461a      	mov	r2, r3
 80061ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80061b6:	2201      	movs	r2, #1
 80061b8:	21ff      	movs	r1, #255	; 0xff
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 f9f4 	bl	80075a8 <VL53L0X_WrByte>
 80061c0:	4603      	mov	r3, r0
 80061c2:	461a      	mov	r2, r3
 80061c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80061ce:	2220      	movs	r2, #32
 80061d0:	2130      	movs	r1, #48	; 0x30
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 f9e8 	bl	80075a8 <VL53L0X_WrByte>
 80061d8:	4603      	mov	r3, r0
 80061da:	461a      	mov	r2, r3
 80061dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80061e6:	2200      	movs	r2, #0
 80061e8:	21ff      	movs	r1, #255	; 0xff
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f001 f9dc 	bl	80075a8 <VL53L0X_WrByte>
 80061f0:	4603      	mov	r3, r0
 80061f2:	461a      	mov	r2, r3
 80061f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061fe:	e09e      	b.n	800633e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006200:	78bb      	ldrb	r3, [r7, #2]
 8006202:	2b0c      	cmp	r3, #12
 8006204:	d14c      	bne.n	80062a0 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006206:	2238      	movs	r2, #56	; 0x38
 8006208:	2148      	movs	r1, #72	; 0x48
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 f9cc 	bl	80075a8 <VL53L0X_WrByte>
 8006210:	4603      	mov	r3, r0
 8006212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8006216:	2208      	movs	r2, #8
 8006218:	2147      	movs	r1, #71	; 0x47
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 f9c4 	bl	80075a8 <VL53L0X_WrByte>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006226:	2203      	movs	r2, #3
 8006228:	2132      	movs	r1, #50	; 0x32
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 f9bc 	bl	80075a8 <VL53L0X_WrByte>
 8006230:	4603      	mov	r3, r0
 8006232:	461a      	mov	r2, r3
 8006234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006238:	4313      	orrs	r3, r2
 800623a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800623e:	2208      	movs	r2, #8
 8006240:	2130      	movs	r1, #48	; 0x30
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 f9b0 	bl	80075a8 <VL53L0X_WrByte>
 8006248:	4603      	mov	r3, r0
 800624a:	461a      	mov	r2, r3
 800624c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006250:	4313      	orrs	r3, r2
 8006252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006256:	2201      	movs	r2, #1
 8006258:	21ff      	movs	r1, #255	; 0xff
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f001 f9a4 	bl	80075a8 <VL53L0X_WrByte>
 8006260:	4603      	mov	r3, r0
 8006262:	461a      	mov	r2, r3
 8006264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006268:	4313      	orrs	r3, r2
 800626a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800626e:	2220      	movs	r2, #32
 8006270:	2130      	movs	r1, #48	; 0x30
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 f998 	bl	80075a8 <VL53L0X_WrByte>
 8006278:	4603      	mov	r3, r0
 800627a:	461a      	mov	r2, r3
 800627c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006280:	4313      	orrs	r3, r2
 8006282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006286:	2200      	movs	r2, #0
 8006288:	21ff      	movs	r1, #255	; 0xff
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 f98c 	bl	80075a8 <VL53L0X_WrByte>
 8006290:	4603      	mov	r3, r0
 8006292:	461a      	mov	r2, r3
 8006294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006298:	4313      	orrs	r3, r2
 800629a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800629e:	e04e      	b.n	800633e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80062a0:	78bb      	ldrb	r3, [r7, #2]
 80062a2:	2b0e      	cmp	r3, #14
 80062a4:	d14b      	bne.n	800633e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80062a6:	2248      	movs	r2, #72	; 0x48
 80062a8:	2148      	movs	r1, #72	; 0x48
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 f97c 	bl	80075a8 <VL53L0X_WrByte>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80062b6:	2208      	movs	r2, #8
 80062b8:	2147      	movs	r1, #71	; 0x47
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 f974 	bl	80075a8 <VL53L0X_WrByte>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80062c6:	2203      	movs	r2, #3
 80062c8:	2132      	movs	r1, #50	; 0x32
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 f96c 	bl	80075a8 <VL53L0X_WrByte>
 80062d0:	4603      	mov	r3, r0
 80062d2:	461a      	mov	r2, r3
 80062d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062d8:	4313      	orrs	r3, r2
 80062da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80062de:	2207      	movs	r2, #7
 80062e0:	2130      	movs	r1, #48	; 0x30
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 f960 	bl	80075a8 <VL53L0X_WrByte>
 80062e8:	4603      	mov	r3, r0
 80062ea:	461a      	mov	r2, r3
 80062ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80062f6:	2201      	movs	r2, #1
 80062f8:	21ff      	movs	r1, #255	; 0xff
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 f954 	bl	80075a8 <VL53L0X_WrByte>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006308:	4313      	orrs	r3, r2
 800630a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800630e:	2220      	movs	r2, #32
 8006310:	2130      	movs	r1, #48	; 0x30
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 f948 	bl	80075a8 <VL53L0X_WrByte>
 8006318:	4603      	mov	r3, r0
 800631a:	461a      	mov	r2, r3
 800631c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006320:	4313      	orrs	r3, r2
 8006322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006326:	2200      	movs	r2, #0
 8006328:	21ff      	movs	r1, #255	; 0xff
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 f93c 	bl	80075a8 <VL53L0X_WrByte>
 8006330:	4603      	mov	r3, r0
 8006332:	461a      	mov	r2, r3
 8006334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006338:	4313      	orrs	r3, r2
 800633a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800633e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006342:	2b00      	cmp	r3, #0
 8006344:	d17f      	bne.n	8006446 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8006346:	78bb      	ldrb	r3, [r7, #2]
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe fe36 	bl	8004fba <VL53L0X_encode_vcsel_period>
 800634e:	4603      	mov	r3, r0
 8006350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800635a:	2b01      	cmp	r3, #1
 800635c:	d045      	beq.n	80063ea <VL53L0X_set_vcsel_pulse_period+0x470>
 800635e:	e06e      	b.n	800643e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006360:	f107 0314 	add.w	r3, r7, #20
 8006364:	461a      	mov	r2, r3
 8006366:	2103      	movs	r1, #3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff fc33 	bl	8005bd4 <get_sequence_step_timeout>
 800636e:	4603      	mov	r3, r0
 8006370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006374:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006378:	2b00      	cmp	r3, #0
 800637a:	d109      	bne.n	8006390 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800637c:	f107 0310 	add.w	r3, r7, #16
 8006380:	461a      	mov	r2, r3
 8006382:	2102      	movs	r1, #2
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fc25 	bl	8005bd4 <get_sequence_step_timeout>
 800638a:	4603      	mov	r3, r0
 800638c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006390:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006394:	2b00      	cmp	r3, #0
 8006396:	d109      	bne.n	80063ac <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8006398:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800639c:	461a      	mov	r2, r3
 800639e:	2150      	movs	r1, #80	; 0x50
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 f901 	bl	80075a8 <VL53L0X_WrByte>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80063ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d108      	bne.n	80063c6 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	461a      	mov	r2, r3
 80063b8:	2103      	movs	r1, #3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fceb 	bl	8005d96 <set_sequence_step_timeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80063c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d108      	bne.n	80063e0 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	461a      	mov	r2, r3
 80063d2:	2102      	movs	r1, #2
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fcde 	bl	8005d96 <set_sequence_step_timeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	78ba      	ldrb	r2, [r7, #2]
 80063e4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80063e8:	e02e      	b.n	8006448 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80063ea:	f107 0318 	add.w	r3, r7, #24
 80063ee:	461a      	mov	r2, r3
 80063f0:	2104      	movs	r1, #4
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff fbee 	bl	8005bd4 <get_sequence_step_timeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80063fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8006406:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800640a:	461a      	mov	r2, r3
 800640c:	2170      	movs	r1, #112	; 0x70
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 f8ca 	bl	80075a8 <VL53L0X_WrByte>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800641a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800641e:	2b00      	cmp	r3, #0
 8006420:	d108      	bne.n	8006434 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	461a      	mov	r2, r3
 8006426:	2104      	movs	r1, #4
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fcb4 	bl	8005d96 <set_sequence_step_timeout>
 800642e:	4603      	mov	r3, r0
 8006430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	78ba      	ldrb	r2, [r7, #2]
 8006438:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800643c:	e004      	b.n	8006448 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800643e:	23fc      	movs	r3, #252	; 0xfc
 8006440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006444:	e000      	b.n	8006448 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8006446:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8006448:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800644c:	2b00      	cmp	r3, #0
 800644e:	d109      	bne.n	8006464 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006456:	69f9      	ldr	r1, [r7, #28]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7fc fd8f 	bl	8002f7c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800645e:	4603      	mov	r3, r0
 8006460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800646c:	f107 010f 	add.w	r1, r7, #15
 8006470:	2301      	movs	r3, #1
 8006472:	2200      	movs	r2, #0
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7fe fcbb 	bl	8004df0 <VL53L0X_perform_phase_calibration>
 800647a:	4603      	mov	r3, r0
 800647c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8006480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006484:	4618      	mov	r0, r3
 8006486:	3728      	adds	r7, #40	; 0x28
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	460b      	mov	r3, r1
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800649e:	7afb      	ldrb	r3, [r7, #11]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <VL53L0X_get_vcsel_pulse_period+0x1e>
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d00a      	beq.n	80064be <VL53L0X_get_vcsel_pulse_period+0x32>
 80064a8:	e013      	b.n	80064d2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80064aa:	f107 0316 	add.w	r3, r7, #22
 80064ae:	461a      	mov	r2, r3
 80064b0:	2150      	movs	r1, #80	; 0x50
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f001 f8fa 	bl	80076ac <VL53L0X_RdByte>
 80064b8:	4603      	mov	r3, r0
 80064ba:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80064bc:	e00b      	b.n	80064d6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80064be:	f107 0316 	add.w	r3, r7, #22
 80064c2:	461a      	mov	r2, r3
 80064c4:	2170      	movs	r1, #112	; 0x70
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f001 f8f0 	bl	80076ac <VL53L0X_RdByte>
 80064cc:	4603      	mov	r3, r0
 80064ce:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80064d0:	e001      	b.n	80064d6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064d2:	23fc      	movs	r3, #252	; 0xfc
 80064d4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80064d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80064de:	7dbb      	ldrb	r3, [r7, #22]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe fd57 	bl	8004f94 <VL53L0X_decode_vcsel_period>
 80064e6:	4603      	mov	r3, r0
 80064e8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	701a      	strb	r2, [r3, #0]

	return Status;
 80064ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b090      	sub	sp, #64	; 0x40
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006504:	2300      	movs	r3, #0
 8006506:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800650a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800650e:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006510:	f240 7376 	movw	r3, #1910	; 0x776
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 8006516:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800651a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800651c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 8006522:	f240 234e 	movw	r3, #590	; 0x24e
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 8006528:	f240 23b2 	movw	r3, #690	; 0x2b2
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800652e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006532:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006534:	f240 2326 	movw	r3, #550	; 0x226
 8006538:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800653a:	2300      	movs	r3, #0
 800653c:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800654e:	f107 0310 	add.w	r3, r7, #16
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fc fe5b 	bl	8003210 <VL53L0X_GetSequenceStepEnables>
 800655a:	4603      	mov	r3, r0
 800655c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 8006560:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006564:	2b00      	cmp	r3, #0
 8006566:	d15b      	bne.n	8006620 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 8006568:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 800656a:	2b00      	cmp	r3, #0
 800656c:	d105      	bne.n	800657a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800656e:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 8006574:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 8006576:	2b00      	cmp	r3, #0
 8006578:	d052      	beq.n	8006620 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800657a:	f107 030c 	add.w	r3, r7, #12
 800657e:	461a      	mov	r2, r3
 8006580:	2102      	movs	r1, #2
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff fb26 	bl	8005bd4 <get_sequence_step_timeout>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 800658e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 8006596:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800659a:	e07d      	b.n	8006698 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800659c:	7c3b      	ldrb	r3, [r7, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00f      	beq.n	80065c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80065a2:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80065a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a6:	4413      	add	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d204      	bcs.n	80065bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80065b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ba:	e002      	b.n	80065c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065bc:	23fc      	movs	r3, #252	; 0xfc
 80065be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80065c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 80065ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80065ce:	e063      	b.n	8006698 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80065d0:	7cbb      	ldrb	r3, [r7, #18]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d011      	beq.n	80065fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	4413      	add	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d204      	bcs.n	80065f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80065e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f0:	e016      	b.n	8006620 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065f2:	23fc      	movs	r3, #252	; 0xfc
 80065f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80065f8:	e012      	b.n	8006620 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80065fa:	7c7b      	ldrb	r3, [r7, #17]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00f      	beq.n	8006620 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006604:	4413      	add	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	429a      	cmp	r2, r3
 800660e:	d204      	bcs.n	800661a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	63bb      	str	r3, [r7, #56]	; 0x38
 8006618:	e002      	b.n	8006620 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800661a:	23fc      	movs	r3, #252	; 0xfc
 800661c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006620:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 8006628:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800662c:	e034      	b.n	8006698 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800662e:	7cfb      	ldrb	r3, [r7, #19]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d019      	beq.n	8006668 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006634:	f107 0308 	add.w	r3, r7, #8
 8006638:	461a      	mov	r2, r3
 800663a:	2103      	movs	r1, #3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fac9 	bl	8005bd4 <get_sequence_step_timeout>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	4413      	add	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006654:	429a      	cmp	r2, r3
 8006656:	d204      	bcs.n	8006662 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006660:	e002      	b.n	8006668 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006662:	23fc      	movs	r3, #252	; 0xfc
 8006664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8006668:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800666c:	2b00      	cmp	r3, #0
 800666e:	d111      	bne.n	8006694 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 8006670:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00e      	beq.n	8006694 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 8006676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800667e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006680:	2104      	movs	r1, #4
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fb87 	bl	8005d96 <set_sequence_step_timeout>
 8006688:	4603      	mov	r3, r0
 800668a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006694:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006698:	4618      	mov	r0, r3
 800669a:	3740      	adds	r7, #64	; 0x40
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b090      	sub	sp, #64	; 0x40
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066aa:	2300      	movs	r3, #0
 80066ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80066b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80066b4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80066b6:	f240 7376 	movw	r3, #1910	; 0x776
 80066ba:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80066bc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80066c2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80066c6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80066c8:	f240 234e 	movw	r3, #590	; 0x24e
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80066ce:	f240 23b2 	movw	r3, #690	; 0x2b2
 80066d2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80066d4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80066da:	f240 2326 	movw	r3, #550	; 0x226
 80066de:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80066e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e8:	441a      	add	r2, r3
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80066ee:	f107 0318 	add.w	r3, r7, #24
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fc fd8b 	bl	8003210 <VL53L0X_GetSequenceStepEnables>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006700:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006708:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800670c:	e075      	b.n	80067fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800670e:	7e3b      	ldrb	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006714:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800671a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800671c:	2b00      	cmp	r3, #0
 800671e:	d030      	beq.n	8006782 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8006720:	f107 0310 	add.w	r3, r7, #16
 8006724:	461a      	mov	r2, r3
 8006726:	2102      	movs	r1, #2
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff fa53 	bl	8005bd4 <get_sequence_step_timeout>
 800672e:	4603      	mov	r3, r0
 8006730:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006734:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006738:	2b00      	cmp	r3, #0
 800673a:	d122      	bne.n	8006782 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800673c:	7e3b      	ldrb	r3, [r7, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d007      	beq.n	8006752 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006746:	6939      	ldr	r1, [r7, #16]
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800674c:	441a      	add	r2, r3
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8006752:	7ebb      	ldrb	r3, [r7, #26]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d009      	beq.n	800676c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800675c:	6939      	ldr	r1, [r7, #16]
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	440b      	add	r3, r1
 8006762:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006764:	441a      	add	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	e00a      	b.n	8006782 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800676c:	7e7b      	ldrb	r3, [r7, #25]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006776:	6939      	ldr	r1, [r7, #16]
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800677c:	441a      	add	r2, r3
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006782:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006786:	2b00      	cmp	r3, #0
 8006788:	d114      	bne.n	80067b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800678a:	7efb      	ldrb	r3, [r7, #27]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d011      	beq.n	80067b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8006790:	f107 030c 	add.w	r3, r7, #12
 8006794:	461a      	mov	r2, r3
 8006796:	2103      	movs	r1, #3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fa1b 	bl	8005bd4 <get_sequence_step_timeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80067a8:	68f9      	ldr	r1, [r7, #12]
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80067ae:	441a      	add	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80067b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d114      	bne.n	80067e6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80067bc:	7f3b      	ldrb	r3, [r7, #28]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d011      	beq.n	80067e6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80067c2:	f107 0314 	add.w	r3, r7, #20
 80067c6:	461a      	mov	r2, r3
 80067c8:	2104      	movs	r1, #4
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fa02 	bl	8005bd4 <get_sequence_step_timeout>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80067da:	6979      	ldr	r1, [r7, #20]
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80067e0:	441a      	add	r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80067e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d103      	bne.n	80067f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80067f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3740      	adds	r7, #64	; 0x40
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800680e:	2300      	movs	r3, #0
 8006810:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006816:	e0c6      	b.n	80069a6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	4413      	add	r3, r2
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	3301      	adds	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006828:	7cfb      	ldrb	r3, [r7, #19]
 800682a:	2bff      	cmp	r3, #255	; 0xff
 800682c:	f040 808d 	bne.w	800694a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	4413      	add	r3, r2
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	747b      	strb	r3, [r7, #17]
			Index++;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	3301      	adds	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006840:	7c7b      	ldrb	r3, [r7, #17]
 8006842:	2b03      	cmp	r3, #3
 8006844:	d87e      	bhi.n	8006944 <VL53L0X_load_tuning_settings+0x140>
 8006846:	a201      	add	r2, pc, #4	; (adr r2, 800684c <VL53L0X_load_tuning_settings+0x48>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	0800685d 	.word	0x0800685d
 8006850:	08006897 	.word	0x08006897
 8006854:	080068d1 	.word	0x080068d1
 8006858:	0800690b 	.word	0x0800690b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	4413      	add	r3, r2
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	743b      	strb	r3, [r7, #16]
				Index++;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	3301      	adds	r3, #1
 800686a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	4413      	add	r3, r2
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	3301      	adds	r3, #1
 800687a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800687c:	7c3b      	ldrb	r3, [r7, #16]
 800687e:	b29b      	uxth	r3, r3
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	b29a      	uxth	r2, r3
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	b29b      	uxth	r3, r3
 8006888:	4413      	add	r3, r2
 800688a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	89ba      	ldrh	r2, [r7, #12]
 8006890:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 8006894:	e087      	b.n	80069a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	4413      	add	r3, r2
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	743b      	strb	r3, [r7, #16]
				Index++;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	3301      	adds	r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	4413      	add	r3, r2
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	73fb      	strb	r3, [r7, #15]
				Index++;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	3301      	adds	r3, #1
 80068b4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80068b6:	7c3b      	ldrb	r3, [r7, #16]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	b29a      	uxth	r2, r3
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	4413      	add	r3, r2
 80068c4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	89ba      	ldrh	r2, [r7, #12]
 80068ca:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 80068ce:	e06a      	b.n	80069a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	4413      	add	r3, r2
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	743b      	strb	r3, [r7, #16]
				Index++;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	3301      	adds	r3, #1
 80068de:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	4413      	add	r3, r2
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	73fb      	strb	r3, [r7, #15]
				Index++;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	3301      	adds	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80068f0:	7c3b      	ldrb	r3, [r7, #16]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	4413      	add	r3, r2
 80068fe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	89ba      	ldrh	r2, [r7, #12]
 8006904:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 8006908:	e04d      	b.n	80069a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	4413      	add	r3, r2
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	743b      	strb	r3, [r7, #16]
				Index++;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	3301      	adds	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	4413      	add	r3, r2
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	3301      	adds	r3, #1
 8006928:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800692a:	7c3b      	ldrb	r3, [r7, #16]
 800692c:	b29b      	uxth	r3, r3
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	b29a      	uxth	r2, r3
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	b29b      	uxth	r3, r3
 8006936:	4413      	add	r3, r2
 8006938:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	89ba      	ldrh	r2, [r7, #12]
 800693e:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 8006942:	e030      	b.n	80069a6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006944:	23fc      	movs	r3, #252	; 0xfc
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e02d      	b.n	80069a6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800694a:	7cfb      	ldrb	r3, [r7, #19]
 800694c:	2b04      	cmp	r3, #4
 800694e:	d828      	bhi.n	80069a2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	4413      	add	r3, r2
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	74bb      	strb	r3, [r7, #18]
			Index++;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	3301      	adds	r3, #1
 800695e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006960:	2300      	movs	r3, #0
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	e00f      	b.n	8006986 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	4413      	add	r3, r2
 800696c:	7819      	ldrb	r1, [r3, #0]
 800696e:	f107 0208 	add.w	r2, r7, #8
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	4413      	add	r3, r2
 8006976:	460a      	mov	r2, r1
 8006978:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	3301      	adds	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	3301      	adds	r3, #1
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	7cfb      	ldrb	r3, [r7, #19]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	429a      	cmp	r2, r3
 800698c:	dbeb      	blt.n	8006966 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800698e:	7cfb      	ldrb	r3, [r7, #19]
 8006990:	f107 0208 	add.w	r2, r7, #8
 8006994:	7cb9      	ldrb	r1, [r7, #18]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fdaa 	bl	80074f0 <VL53L0X_WriteMulti>
 800699c:	4603      	mov	r3, r0
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e001      	b.n	80069a6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80069a2:	23fc      	movs	r3, #252	; 0xfc
 80069a4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	4413      	add	r3, r2
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <VL53L0X_load_tuning_settings+0x1b8>
 80069b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f43f af2e 	beq.w	8006818 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80069de:	f107 0313 	add.w	r3, r7, #19
 80069e2:	4619      	mov	r1, r3
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7fc fc9f 	bl	8003328 <VL53L0X_GetXTalkCompensationEnable>
 80069ea:	4603      	mov	r3, r0
 80069ec:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80069ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d111      	bne.n	8006a1a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80069f6:	7cfb      	ldrb	r3, [r7, #19]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00e      	beq.n	8006a1a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	8a9b      	ldrh	r3, [r3, #20]
 8006a06:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3380      	adds	r3, #128	; 0x80
 8006a14:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8006a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3720      	adds	r7, #32
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b086      	sub	sp, #24
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006a3e:	f107 0310 	add.w	r3, r7, #16
 8006a42:	461a      	mov	r2, r3
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff ffbe 	bl	80069c8 <VL53L0X_get_total_xtalk_rate>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	441a      	add	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	601a      	str	r2, [r3, #0]

	return Status;
 8006a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 8006a70:	b084      	sub	sp, #16
 8006a72:	b480      	push	{r7}
 8006a74:	b085      	sub	sp, #20
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	f107 0c18 	add.w	ip, r7, #24
 8006a7c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a80:	2300      	movs	r3, #0
 8006a82:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 8006a90:	2300      	movs	r3, #0
 8006a92:	607b      	str	r3, [r7, #4]
 8006a94:	e00d      	b.n	8006ab2 <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f107 0218 	add.w	r2, r7, #24
 8006a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d802      	bhi.n	8006aac <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60bb      	str	r3, [r7, #8]
			break;
 8006aaa:	e006      	b.n	8006aba <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d8ed      	bhi.n	8006a96 <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 8006aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d105      	bne.n	8006ace <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 8006ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	e008      	b.n	8006ae0 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e002      	b.n	8006ae0 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ae4:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aea:	601a      	str	r2, [r3, #0]

	return Status;
 8006aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	b004      	add	sp, #16
 8006afc:	4770      	bx	lr

08006afe <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 8006afe:	b5b0      	push	{r4, r5, r7, lr}
 8006b00:	b0ba      	sub	sp, #232	; 0xe8
 8006b02:	af0e      	add	r7, sp, #56	; 0x38
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006b18:	f107 031c 	add.w	r3, r7, #28
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7fc f918 	bl	8002d54 <VL53L0X_GetDeviceParameters>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 8006b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d803      	bhi.n	8006b3a <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 8006b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b38:	e07c      	b.n	8006c34 <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 8006b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d304      	bcc.n	8006b4c <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 8006b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b4a:	e073      	b.n	8006c34 <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 8006b4c:	f107 0314 	add.w	r3, r7, #20
 8006b50:	930d      	str	r3, [sp, #52]	; 0x34
 8006b52:	f107 0318 	add.w	r3, r7, #24
 8006b56:	930c      	str	r3, [sp, #48]	; 0x30
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b5c:	2307      	movs	r3, #7
 8006b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b60:	466d      	mov	r5, sp
 8006b62:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8006b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b72:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b7c:	f7ff ff78 	bl	8006a70 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d109      	bne.n	8006b9c <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	33b0      	adds	r3, #176	; 0xb0
 8006b90:	443b      	add	r3, r7
 8006b92:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8006b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b9a:	e04b      	b.n	8006c34 <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	330e      	adds	r3, #14
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	33b0      	adds	r3, #176	; 0xb0
 8006ba4:	443b      	add	r3, r7
 8006ba6:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8006baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	330e      	adds	r3, #14
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	33b0      	adds	r3, #176	; 0xb0
 8006bb6:	443b      	add	r3, r7
 8006bb8:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8006bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	3314      	adds	r3, #20
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	33b0      	adds	r3, #176	; 0xb0
 8006bc8:	443b      	add	r3, r7
 8006bca:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8006bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	33b0      	adds	r3, #176	; 0xb0
 8006bda:	443b      	add	r3, r7
 8006bdc:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8006be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 8006be4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006be8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d01d      	beq.n	8006c2c <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 8006bf0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bf8:	1ad2      	subs	r2, r2, r3
 8006bfa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006bfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c02:	1acb      	subs	r3, r1, r3
 8006c04:	0a1b      	lsrs	r3, r3, #8
 8006c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 8006c0e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 8006c16:	0a1b      	lsrs	r3, r3, #8
 8006c18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c1c:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 8006c20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006c24:	4413      	add	r3, r2
 8006c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c2a:	e003      	b.n	8006c34 <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 8006c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 8006c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c38:	0c1a      	lsrs	r2, r3, #16
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8006c3e:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	37b0      	adds	r7, #176	; 0xb0
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006c4c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b0b0      	sub	sp, #192	; 0xc0
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8006c58:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8006c60:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006c64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 8006c68:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8006c6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006c70:	f241 235c 	movw	r3, #4700	; 0x125c
 8006c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8006c78:	4b98      	ldr	r3, [pc, #608]	; (8006edc <VL53L0X_calc_sigma_estimate+0x290>)
 8006c7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006c7e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006c86:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8006c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006c96:	4b92      	ldr	r3, [pc, #584]	; (8006ee0 <VL53L0X_calc_sigma_estimate+0x294>)
 8006c98:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9e:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8006ca0:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8006ca4:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 8006ca6:	f240 6377 	movw	r3, #1655	; 0x677
 8006caa:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cac:	2300      	movs	r3, #0
 8006cae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cc0:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8006cc4:	0c1b      	lsrs	r3, r3, #16
 8006cc6:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 8006cc8:	f107 0314 	add.w	r3, r7, #20
 8006ccc:	461a      	mov	r2, r3
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f7ff fea8 	bl	8006a26 <VL53L0X_get_total_signal_rate>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8006cdc:	f107 0318 	add.w	r3, r7, #24
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f7ff fe6f 	bl	80069c8 <VL53L0X_get_total_xtalk_rate>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cf6:	fb02 f303 	mul.w	r3, r2, r3
 8006cfa:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8006cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cfe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d02:	0c1b      	lsrs	r3, r3, #16
 8006d04:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d0c:	fb02 f303 	mul.w	r3, r2, r3
 8006d10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8006d14:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d902      	bls.n	8006d24 <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8006d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8006d24:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d160      	bne.n	8006dee <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8006d3c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006d40:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006d44:	461a      	mov	r2, r3
 8006d46:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7fe feee 	bl	8005b2c <VL53L0X_calc_timeout_mclks>
 8006d50:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8006d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006d62:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006d66:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7fe fedb 	bl	8005b2c <VL53L0X_calc_timeout_mclks>
 8006d76:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 8006d7e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006d82:	2b08      	cmp	r3, #8
 8006d84:	d102      	bne.n	8006d8c <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 8006d86:	2302      	movs	r3, #2
 8006d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8006d8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d90:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8006d92:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006d96:	fb02 f303 	mul.w	r3, r2, r3
 8006d9a:	02db      	lsls	r3, r3, #11
 8006d9c:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006da4:	4a4f      	ldr	r2, [pc, #316]	; (8006ee4 <VL53L0X_calc_sigma_estimate+0x298>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	099b      	lsrs	r3, r3, #6
 8006dac:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 8006dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006db2:	fb02 f303 	mul.w	r3, r2, r3
 8006db6:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006dbe:	4a49      	ldr	r2, [pc, #292]	; (8006ee4 <VL53L0X_calc_sigma_estimate+0x298>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	099b      	lsrs	r3, r3, #6
 8006dc6:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	3380      	adds	r3, #128	; 0x80
 8006dcc:	0a1b      	lsrs	r3, r3, #8
 8006dce:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd4:	fb02 f303 	mul.w	r3, r2, r3
 8006dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8006ddc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006de0:	3380      	adds	r3, #128	; 0x80
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006dee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 8006df6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006dfa:	e14a      	b.n	8007092 <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 8006dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006e08:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006e10:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006e14:	e13b      	b.n	800708e <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 8006e16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8006e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e28:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8006e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e2c:	041a      	lsls	r2, r3, #16
 8006e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8006e38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d903      	bls.n	8006e4c <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8006e44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8006e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e54:	fb02 f303 	mul.w	r3, r2, r3
 8006e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8006e5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006e60:	4613      	mov	r3, r2
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe f8b9 	bl	8004fe0 <VL53L0X_isqrt>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	891b      	ldrh	r3, [r3, #8]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e7c:	fb02 f303 	mul.w	r3, r2, r3
 8006e80:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e84:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e8a:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006e8c:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006e8e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006e92:	4a14      	ldr	r2, [pc, #80]	; (8006ee4 <VL53L0X_calc_sigma_estimate+0x298>)
 8006e94:	fba2 2303 	umull	r2, r3, r2, r3
 8006e98:	099b      	lsrs	r3, r3, #6
 8006e9a:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8006e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e9e:	041b      	lsls	r3, r3, #16
 8006ea0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006ea4:	4a0f      	ldr	r2, [pc, #60]	; (8006ee4 <VL53L0X_calc_sigma_estimate+0x298>)
 8006ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eaa:	099b      	lsrs	r3, r3, #6
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 8006eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb0:	021b      	lsls	r3, r3, #8
 8006eb2:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8006eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bfb8      	it	lt
 8006ec0:	425b      	neglt	r3, r3
 8006ec2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	021b      	lsls	r3, r3, #8
 8006ec8:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	7e1b      	ldrb	r3, [r3, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 8006ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006eda:	e032      	b.n	8006f42 <VL53L0X_calc_sigma_estimate+0x2f6>
 8006edc:	028f87ae 	.word	0x028f87ae
 8006ee0:	0006999a 	.word	0x0006999a
 8006ee4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 8006ee8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8006efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f00:	fb02 f303 	mul.w	r3, r2, r3
 8006f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8006f08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f0e:	4413      	add	r3, r2
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8006f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f1a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 8006f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8006f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f30:	fb03 f303 	mul.w	r3, r3, r3
 8006f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8006f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f3c:	0b9b      	lsrs	r3, r3, #14
 8006f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8006f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f48:	fb02 f303 	mul.w	r3, r2, r3
 8006f4c:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f54:	0c1b      	lsrs	r3, r3, #16
 8006f56:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8006f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5a:	fb03 f303 	mul.w	r3, r3, r3
 8006f5e:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 8006f60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f64:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f6c:	0c1b      	lsrs	r3, r3, #16
 8006f6e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	fb03 f303 	mul.w	r3, r3, r3
 8006f76:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8006f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	4413      	add	r3, r2
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8006f80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f82:	f7fe f82d 	bl	8004fe0 <VL53L0X_isqrt>
 8006f86:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	041b      	lsls	r3, r3, #16
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	3332      	adds	r3, #50	; 0x32
 8006f92:	4a42      	ldr	r2, [pc, #264]	; (800709c <VL53L0X_calc_sigma_estimate+0x450>)
 8006f94:	fba2 2303 	umull	r2, r3, r2, r3
 8006f98:	095a      	lsrs	r2, r3, #5
 8006f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8006fa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fa8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8006fac:	fb02 f303 	mul.w	r3, r2, r3
 8006fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8006fb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fb8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8006fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fc6:	4a36      	ldr	r2, [pc, #216]	; (80070a0 <VL53L0X_calc_sigma_estimate+0x454>)
 8006fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fcc:	0b5b      	lsrs	r3, r3, #13
 8006fce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8006fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d903      	bls.n	8006fe6 <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 8006fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 8006fe6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8006ff4:	4a2b      	ldr	r2, [pc, #172]	; (80070a4 <VL53L0X_calc_sigma_estimate+0x458>)
 8006ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffa:	099b      	lsrs	r3, r3, #6
 8006ffc:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8007002:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007006:	441a      	add	r2, r3
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	4618      	mov	r0, r3
 8007010:	f7fd ffe6 	bl	8004fe0 <VL53L0X_isqrt>
 8007014:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007022:	4a20      	ldr	r2, [pc, #128]	; (80070a4 <VL53L0X_calc_sigma_estimate+0x458>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	099b      	lsrs	r3, r3, #6
 800702a:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800702c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007030:	fb03 f303 	mul.w	r3, r3, r3
 8007034:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	fb03 f303 	mul.w	r3, r3, r3
 800703c:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800703e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007042:	4413      	add	r3, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f7fd ffcb 	bl	8004fe0 <VL53L0X_isqrt>
 800704a:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800705a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <VL53L0X_calc_sigma_estimate+0x428>
 8007060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <VL53L0X_calc_sigma_estimate+0x428>
 8007068:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800706c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007070:	429a      	cmp	r2, r3
 8007072:	d903      	bls.n	800707c <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 8007074:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007082:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800708e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8007092:	4618      	mov	r0, r3
 8007094:	37c0      	adds	r7, #192	; 0xc0
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	51eb851f 	.word	0x51eb851f
 80070a0:	d1b71759 	.word	0xd1b71759
 80070a4:	10624dd3 	.word	0x10624dd3

080070a8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b090      	sub	sp, #64	; 0x40
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	607a      	str	r2, [r7, #4]
 80070b2:	461a      	mov	r2, r3
 80070b4:	460b      	mov	r3, r1
 80070b6:	72fb      	strb	r3, [r7, #11]
 80070b8:	4613      	mov	r3, r2
 80070ba:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80070ce:	2300      	movs	r3, #0
 80070d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80070fa:	7afb      	ldrb	r3, [r7, #11]
 80070fc:	10db      	asrs	r3, r3, #3
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007108:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800710c:	2b00      	cmp	r3, #0
 800710e:	d017      	beq.n	8007140 <VL53L0X_get_pal_range_status+0x98>
 8007110:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007114:	2b05      	cmp	r3, #5
 8007116:	d013      	beq.n	8007140 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007118:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800711c:	2b07      	cmp	r3, #7
 800711e:	d00f      	beq.n	8007140 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007120:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007124:	2b0c      	cmp	r3, #12
 8007126:	d00b      	beq.n	8007140 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007128:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800712c:	2b0d      	cmp	r3, #13
 800712e:	d007      	beq.n	8007140 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007130:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007134:	2b0e      	cmp	r3, #14
 8007136:	d003      	beq.n	8007140 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007138:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800713c:	2b0f      	cmp	r3, #15
 800713e:	d103      	bne.n	8007148 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007140:	2301      	movs	r3, #1
 8007142:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007146:	e002      	b.n	800714e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800714e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007156:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800715a:	461a      	mov	r2, r3
 800715c:	2100      	movs	r1, #0
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7fc f9b6 	bl	80034d0 <VL53L0X_GetLimitCheckEnable>
 8007164:	4603      	mov	r3, r0
 8007166:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800716a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800716e:	2b00      	cmp	r3, #0
 8007170:	d03c      	beq.n	80071ec <VL53L0X_get_pal_range_status+0x144>
 8007172:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007176:	2b00      	cmp	r3, #0
 8007178:	d138      	bne.n	80071ec <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800717a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800717e:	461a      	mov	r2, r3
 8007180:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f7ff fd62 	bl	8006c4c <VL53L0X_calc_sigma_estimate>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 800718e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 8007196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f107 0210 	add.w	r2, r7, #16
 800719e:	4619      	mov	r1, r3
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f7ff fcac 	bl	8006afe <VL53L0X_calc_dmax>
 80071a6:	4603      	mov	r3, r0
 80071a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80071ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ba:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80071bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d113      	bne.n	80071ec <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80071c4:	f107 0320 	add.w	r3, r7, #32
 80071c8:	461a      	mov	r2, r3
 80071ca:	2100      	movs	r1, #0
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7fc fa05 	bl	80035dc <VL53L0X_GetLimitCheckValue>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d006      	beq.n	80071ec <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 80071de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d902      	bls.n	80071ec <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80071ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d109      	bne.n	8007208 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80071f4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80071f8:	461a      	mov	r2, r3
 80071fa:	2102      	movs	r1, #2
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7fc f967 	bl	80034d0 <VL53L0X_GetLimitCheckEnable>
 8007202:	4603      	mov	r3, r0
 8007204:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007208:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800720c:	2b00      	cmp	r3, #0
 800720e:	d044      	beq.n	800729a <VL53L0X_get_pal_range_status+0x1f2>
 8007210:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007214:	2b00      	cmp	r3, #0
 8007216:	d140      	bne.n	800729a <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007218:	f107 031c 	add.w	r3, r7, #28
 800721c:	461a      	mov	r2, r3
 800721e:	2102      	movs	r1, #2
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7fc f9db 	bl	80035dc <VL53L0X_GetLimitCheckValue>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800722c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007230:	2b00      	cmp	r3, #0
 8007232:	d107      	bne.n	8007244 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007234:	2201      	movs	r2, #1
 8007236:	21ff      	movs	r1, #255	; 0xff
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f9b5 	bl	80075a8 <VL53L0X_WrByte>
 800723e:	4603      	mov	r3, r0
 8007240:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007244:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007248:	2b00      	cmp	r3, #0
 800724a:	d109      	bne.n	8007260 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 800724c:	f107 0316 	add.w	r3, r7, #22
 8007250:	461a      	mov	r2, r3
 8007252:	21b6      	movs	r1, #182	; 0xb6
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fa53 	bl	8007700 <VL53L0X_RdWord>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007260:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007264:	2b00      	cmp	r3, #0
 8007266:	d107      	bne.n	8007278 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007268:	2200      	movs	r2, #0
 800726a:	21ff      	movs	r1, #255	; 0xff
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 f99b 	bl	80075a8 <VL53L0X_WrByte>
 8007272:	4603      	mov	r3, r0
 8007274:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007278:	8afb      	ldrh	r3, [r7, #22]
 800727a:	025b      	lsls	r3, r3, #9
 800727c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007282:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d006      	beq.n	800729a <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800728c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800728e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007290:	429a      	cmp	r2, r3
 8007292:	d902      	bls.n	800729a <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007294:	2301      	movs	r3, #1
 8007296:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800729a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80072a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072a6:	461a      	mov	r2, r3
 80072a8:	2103      	movs	r1, #3
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7fc f910 	bl	80034d0 <VL53L0X_GetLimitCheckEnable>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80072b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d023      	beq.n	8007306 <VL53L0X_get_pal_range_status+0x25e>
 80072be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d11f      	bne.n	8007306 <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80072c6:	893b      	ldrh	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
 80072d0:	e005      	b.n	80072de <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	021a      	lsls	r2, r3, #8
 80072d6:	893b      	ldrh	r3, [r7, #8]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80072de:	f107 0318 	add.w	r3, r7, #24
 80072e2:	461a      	mov	r2, r3
 80072e4:	2103      	movs	r1, #3
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f7fc f978 	bl	80035dc <VL53L0X_GetLimitCheckValue>
 80072ec:	4603      	mov	r3, r0
 80072ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d006      	beq.n	8007306 <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80072f8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80072fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d202      	bcs.n	8007306 <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007300:	2301      	movs	r3, #1
 8007302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007306:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800730a:	2b00      	cmp	r3, #0
 800730c:	d14a      	bne.n	80073a4 <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 800730e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007312:	2b01      	cmp	r3, #1
 8007314:	d103      	bne.n	800731e <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 8007316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007318:	22ff      	movs	r2, #255	; 0xff
 800731a:	701a      	strb	r2, [r3, #0]
 800731c:	e042      	b.n	80073a4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 800731e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007322:	2b01      	cmp	r3, #1
 8007324:	d007      	beq.n	8007336 <VL53L0X_get_pal_range_status+0x28e>
 8007326:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800732a:	2b02      	cmp	r3, #2
 800732c:	d003      	beq.n	8007336 <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 800732e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007332:	2b03      	cmp	r3, #3
 8007334:	d103      	bne.n	800733e <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007338:	2205      	movs	r2, #5
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e032      	b.n	80073a4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 800733e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007342:	2b06      	cmp	r3, #6
 8007344:	d003      	beq.n	800734e <VL53L0X_get_pal_range_status+0x2a6>
 8007346:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800734a:	2b09      	cmp	r3, #9
 800734c:	d103      	bne.n	8007356 <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800734e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007350:	2204      	movs	r2, #4
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e026      	b.n	80073a4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007356:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800735a:	2b08      	cmp	r3, #8
 800735c:	d007      	beq.n	800736e <VL53L0X_get_pal_range_status+0x2c6>
 800735e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007362:	2b0a      	cmp	r3, #10
 8007364:	d003      	beq.n	800736e <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 8007366:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800736a:	2b01      	cmp	r3, #1
 800736c:	d103      	bne.n	8007376 <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800736e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007370:	2203      	movs	r2, #3
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	e016      	b.n	80073a4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007376:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800737a:	2b04      	cmp	r3, #4
 800737c:	d003      	beq.n	8007386 <VL53L0X_get_pal_range_status+0x2de>
 800737e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007382:	2b01      	cmp	r3, #1
 8007384:	d103      	bne.n	800738e <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007388:	2202      	movs	r2, #2
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	e00a      	b.n	80073a4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 800738e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007392:	2b01      	cmp	r3, #1
 8007394:	d103      	bne.n	800739e <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007398:	2201      	movs	r2, #1
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	e002      	b.n	80073a4 <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800739e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80073a4:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80073a8:	461a      	mov	r2, r3
 80073aa:	2101      	movs	r1, #1
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7fc f88f 	bl	80034d0 <VL53L0X_GetLimitCheckEnable>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80073b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d14f      	bne.n	8007460 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80073c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <VL53L0X_get_pal_range_status+0x328>
 80073c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d103      	bne.n	80073d8 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073d6:	e002      	b.n	80073de <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80073e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80073e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d003      	beq.n	80073f8 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80073f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073fe:	e002      	b.n	8007406 <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800740c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007410:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <VL53L0X_get_pal_range_status+0x378>
 8007418:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800741c:	2b01      	cmp	r3, #1
 800741e:	d103      	bne.n	8007428 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007420:	2301      	movs	r3, #1
 8007422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007426:	e002      	b.n	800742e <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007438:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <VL53L0X_get_pal_range_status+0x3a0>
 8007440:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007444:	2b01      	cmp	r3, #1
 8007446:	d103      	bne.n	8007450 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007448:	2301      	movs	r3, #1
 800744a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744e:	e002      	b.n	8007456 <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800745c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007460:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8007464:	4618      	mov	r0, r3
 8007466:	3740      	adds	r7, #64	; 0x40
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	330a      	adds	r3, #10
 800747c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800748a:	b299      	uxth	r1, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	b29a      	uxth	r2, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	4613      	mov	r3, r2
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	f7f9 fe9a 	bl	80011d0 <HAL_I2C_Master_Transmit>
 800749c:	4603      	mov	r3, r0
 800749e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80074a0:	693b      	ldr	r3, [r7, #16]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b088      	sub	sp, #32
 80074ae:	af02      	add	r7, sp, #8
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	330a      	adds	r3, #10
 80074ba:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	b299      	uxth	r1, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	f7f9 ff76 	bl	80013cc <HAL_I2C_Master_Receive>
 80074e0:	4603      	mov	r3, r0
 80074e2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80074e4:	693b      	ldr	r3, [r7, #16]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	607a      	str	r2, [r7, #4]
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	460b      	mov	r3, r1
 80074fe:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007500:	2300      	movs	r3, #0
 8007502:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	2b3f      	cmp	r3, #63	; 0x3f
 8007508:	d902      	bls.n	8007510 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800750a:	f06f 0303 	mvn.w	r3, #3
 800750e:	e016      	b.n	800753e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8007510:	4a0d      	ldr	r2, [pc, #52]	; (8007548 <VL53L0X_WriteMulti+0x58>)
 8007512:	7afb      	ldrb	r3, [r7, #11]
 8007514:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	480c      	ldr	r0, [pc, #48]	; (800754c <VL53L0X_WriteMulti+0x5c>)
 800751c:	f000 f998 	bl	8007850 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	461a      	mov	r2, r3
 8007526:	4908      	ldr	r1, [pc, #32]	; (8007548 <VL53L0X_WriteMulti+0x58>)
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff ff9f 	bl	800746c <_I2CWrite>
 800752e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007536:	23ec      	movs	r3, #236	; 0xec
 8007538:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800753a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000518 	.word	0x20000518
 800754c:	20000519 	.word	0x20000519

08007550 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	607a      	str	r2, [r7, #4]
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	460b      	mov	r3, r1
 800755e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007560:	2300      	movs	r3, #0
 8007562:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007564:	f107 030b 	add.w	r3, r7, #11
 8007568:	2201      	movs	r2, #1
 800756a:	4619      	mov	r1, r3
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f7ff ff7d 	bl	800746c <_I2CWrite>
 8007572:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800757a:	23ec      	movs	r3, #236	; 0xec
 800757c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800757e:	e00c      	b.n	800759a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7ff ff90 	bl	80074aa <_I2CRead>
 800758a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007592:	23ec      	movs	r3, #236	; 0xec
 8007594:	75fb      	strb	r3, [r7, #23]
 8007596:	e000      	b.n	800759a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8007598:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800759a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
 80075b4:	4613      	mov	r3, r2
 80075b6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80075bc:	4a0b      	ldr	r2, [pc, #44]	; (80075ec <VL53L0X_WrByte+0x44>)
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80075c2:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <VL53L0X_WrByte+0x44>)
 80075c4:	78bb      	ldrb	r3, [r7, #2]
 80075c6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80075c8:	2202      	movs	r2, #2
 80075ca:	4908      	ldr	r1, [pc, #32]	; (80075ec <VL53L0X_WrByte+0x44>)
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff ff4d 	bl	800746c <_I2CWrite>
 80075d2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80075da:	23ec      	movs	r3, #236	; 0xec
 80075dc:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80075de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000518 	.word	0x20000518

080075f0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
 80075fc:	4613      	mov	r3, r2
 80075fe:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007604:	4a0e      	ldr	r2, [pc, #56]	; (8007640 <VL53L0X_WrWord+0x50>)
 8007606:	78fb      	ldrb	r3, [r7, #3]
 8007608:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800760a:	883b      	ldrh	r3, [r7, #0]
 800760c:	0a1b      	lsrs	r3, r3, #8
 800760e:	b29b      	uxth	r3, r3
 8007610:	b2da      	uxtb	r2, r3
 8007612:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <VL53L0X_WrWord+0x50>)
 8007614:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8007616:	883b      	ldrh	r3, [r7, #0]
 8007618:	b2da      	uxtb	r2, r3
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <VL53L0X_WrWord+0x50>)
 800761c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800761e:	2203      	movs	r2, #3
 8007620:	4907      	ldr	r1, [pc, #28]	; (8007640 <VL53L0X_WrWord+0x50>)
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff ff22 	bl	800746c <_I2CWrite>
 8007628:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007630:	23ec      	movs	r3, #236	; 0xec
 8007632:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007634:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000518 	.word	0x20000518

08007644 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	4608      	mov	r0, r1
 800764e:	4611      	mov	r1, r2
 8007650:	461a      	mov	r2, r3
 8007652:	4603      	mov	r3, r0
 8007654:	70fb      	strb	r3, [r7, #3]
 8007656:	460b      	mov	r3, r1
 8007658:	70bb      	strb	r3, [r7, #2]
 800765a:	4613      	mov	r3, r2
 800765c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8007662:	f107 020e 	add.w	r2, r7, #14
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f81e 	bl	80076ac <VL53L0X_RdByte>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8007674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d110      	bne.n	800769e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800767c:	7bba      	ldrb	r2, [r7, #14]
 800767e:	78bb      	ldrb	r3, [r7, #2]
 8007680:	4013      	ands	r3, r2
 8007682:	b2da      	uxtb	r2, r3
 8007684:	787b      	ldrb	r3, [r7, #1]
 8007686:	4313      	orrs	r3, r2
 8007688:	b2db      	uxtb	r3, r3
 800768a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800768c:	7bba      	ldrb	r2, [r7, #14]
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff ff88 	bl	80075a8 <VL53L0X_WrByte>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
 800769c:	e000      	b.n	80076a0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800769e:	bf00      	nop
done:
    return Status;
 80076a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	460b      	mov	r3, r1
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80076be:	f107 030b 	add.w	r3, r7, #11
 80076c2:	2201      	movs	r2, #1
 80076c4:	4619      	mov	r1, r3
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7ff fed0 	bl	800746c <_I2CWrite>
 80076cc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80076d4:	23ec      	movs	r3, #236	; 0xec
 80076d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80076d8:	e00c      	b.n	80076f4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80076da:	2201      	movs	r2, #1
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff fee3 	bl	80074aa <_I2CRead>
 80076e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80076ec:	23ec      	movs	r3, #236	; 0xec
 80076ee:	75fb      	strb	r3, [r7, #23]
 80076f0:	e000      	b.n	80076f4 <VL53L0X_RdByte+0x48>
    }
done:
 80076f2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80076f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	460b      	mov	r3, r1
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007712:	f107 030b 	add.w	r3, r7, #11
 8007716:	2201      	movs	r2, #1
 8007718:	4619      	mov	r1, r3
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f7ff fea6 	bl	800746c <_I2CWrite>
 8007720:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007728:	23ec      	movs	r3, #236	; 0xec
 800772a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800772c:	e017      	b.n	800775e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800772e:	2202      	movs	r2, #2
 8007730:	490e      	ldr	r1, [pc, #56]	; (800776c <VL53L0X_RdWord+0x6c>)
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff feb9 	bl	80074aa <_I2CRead>
 8007738:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007740:	23ec      	movs	r3, #236	; 0xec
 8007742:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007744:	e00b      	b.n	800775e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007746:	4b09      	ldr	r3, [pc, #36]	; (800776c <VL53L0X_RdWord+0x6c>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	b29a      	uxth	r2, r3
 8007750:	4b06      	ldr	r3, [pc, #24]	; (800776c <VL53L0X_RdWord+0x6c>)
 8007752:	785b      	ldrb	r3, [r3, #1]
 8007754:	b29b      	uxth	r3, r3
 8007756:	4413      	add	r3, r2
 8007758:	b29a      	uxth	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800775e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000518 	.word	0x20000518

08007770 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	460b      	mov	r3, r1
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800777e:	2300      	movs	r3, #0
 8007780:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007782:	f107 030b 	add.w	r3, r7, #11
 8007786:	2201      	movs	r2, #1
 8007788:	4619      	mov	r1, r3
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f7ff fe6e 	bl	800746c <_I2CWrite>
 8007790:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007798:	23ec      	movs	r3, #236	; 0xec
 800779a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800779c:	e01b      	b.n	80077d6 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800779e:	2204      	movs	r2, #4
 80077a0:	4910      	ldr	r1, [pc, #64]	; (80077e4 <VL53L0X_RdDWord+0x74>)
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7ff fe81 	bl	80074aa <_I2CRead>
 80077a8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80077b0:	23ec      	movs	r3, #236	; 0xec
 80077b2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80077b4:	e00f      	b.n	80077d6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <VL53L0X_RdDWord+0x74>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	061a      	lsls	r2, r3, #24
 80077bc:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <VL53L0X_RdDWord+0x74>)
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	041b      	lsls	r3, r3, #16
 80077c2:	441a      	add	r2, r3
 80077c4:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <VL53L0X_RdDWord+0x74>)
 80077c6:	789b      	ldrb	r3, [r3, #2]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	4413      	add	r3, r2
 80077cc:	4a05      	ldr	r2, [pc, #20]	; (80077e4 <VL53L0X_RdDWord+0x74>)
 80077ce:	78d2      	ldrb	r2, [r2, #3]
 80077d0:	441a      	add	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80077d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000518 	.word	0x20000518

080077e8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80077f4:	2002      	movs	r0, #2
 80077f6:	f7f9 f8ff 	bl	80009f8 <HAL_Delay>
    return status;
 80077fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <__libc_init_array>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	4d0d      	ldr	r5, [pc, #52]	; (8007840 <__libc_init_array+0x38>)
 800780c:	4c0d      	ldr	r4, [pc, #52]	; (8007844 <__libc_init_array+0x3c>)
 800780e:	1b64      	subs	r4, r4, r5
 8007810:	10a4      	asrs	r4, r4, #2
 8007812:	2600      	movs	r6, #0
 8007814:	42a6      	cmp	r6, r4
 8007816:	d109      	bne.n	800782c <__libc_init_array+0x24>
 8007818:	4d0b      	ldr	r5, [pc, #44]	; (8007848 <__libc_init_array+0x40>)
 800781a:	4c0c      	ldr	r4, [pc, #48]	; (800784c <__libc_init_array+0x44>)
 800781c:	f000 f836 	bl	800788c <_init>
 8007820:	1b64      	subs	r4, r4, r5
 8007822:	10a4      	asrs	r4, r4, #2
 8007824:	2600      	movs	r6, #0
 8007826:	42a6      	cmp	r6, r4
 8007828:	d105      	bne.n	8007836 <__libc_init_array+0x2e>
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007830:	4798      	blx	r3
 8007832:	3601      	adds	r6, #1
 8007834:	e7ee      	b.n	8007814 <__libc_init_array+0xc>
 8007836:	f855 3b04 	ldr.w	r3, [r5], #4
 800783a:	4798      	blx	r3
 800783c:	3601      	adds	r6, #1
 800783e:	e7f2      	b.n	8007826 <__libc_init_array+0x1e>
 8007840:	080078c4 	.word	0x080078c4
 8007844:	080078c4 	.word	0x080078c4
 8007848:	080078c4 	.word	0x080078c4
 800784c:	080078c8 	.word	0x080078c8

08007850 <memcpy>:
 8007850:	440a      	add	r2, r1
 8007852:	4291      	cmp	r1, r2
 8007854:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007858:	d100      	bne.n	800785c <memcpy+0xc>
 800785a:	4770      	bx	lr
 800785c:	b510      	push	{r4, lr}
 800785e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007866:	4291      	cmp	r1, r2
 8007868:	d1f9      	bne.n	800785e <memcpy+0xe>
 800786a:	bd10      	pop	{r4, pc}

0800786c <memset>:
 800786c:	4402      	add	r2, r0
 800786e:	4603      	mov	r3, r0
 8007870:	4293      	cmp	r3, r2
 8007872:	d100      	bne.n	8007876 <memset+0xa>
 8007874:	4770      	bx	lr
 8007876:	f803 1b01 	strb.w	r1, [r3], #1
 800787a:	e7f9      	b.n	8007870 <memset+0x4>

0800787c <strcpy>:
 800787c:	4603      	mov	r3, r0
 800787e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007882:	f803 2b01 	strb.w	r2, [r3], #1
 8007886:	2a00      	cmp	r2, #0
 8007888:	d1f9      	bne.n	800787e <strcpy+0x2>
 800788a:	4770      	bx	lr

0800788c <_init>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	bf00      	nop
 8007890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007892:	bc08      	pop	{r3}
 8007894:	469e      	mov	lr, r3
 8007896:	4770      	bx	lr

08007898 <_fini>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	bf00      	nop
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr
